
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000138c  080106c8  080106c8  000206c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a54  08011a54  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  08011a54  08011a54  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011a54  08011a54  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a54  08011a54  00021a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a58  08011a58  00021a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011a5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          00004af4  200001f4  200001f4  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ce8  20004ce8  000301f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcd9  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040dd  00000000  00000000  0004defd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00051fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001230  00000000  00000000  000533b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fae  00000000  00000000  000545e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c101  00000000  00000000  00076596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bcd45  00000000  00000000  00092697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014f3dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006358  00000000  00000000  0014f430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080106b0 	.word	0x080106b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080106b0 	.word	0x080106b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <driverHWSPI1Init>:

#include "driverHWSPI1.h"

SPI_HandleTypeDef driverHWSPI1Handle;

void driverHWSPI1Init(GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  driverHWSPI1Handle.Instance = SPI1;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <driverHWSPI1Init+0x8c>)
 8000c98:	601a      	str	r2, [r3, #0]
  driverHWSPI1Handle.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  driverHWSPI1Handle.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  driverHWSPI1Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000caa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cae:	60da      	str	r2, [r3, #12]
  driverHWSPI1Handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	611a      	str	r2, [r3, #16]
  driverHWSPI1Handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	615a      	str	r2, [r3, #20]
  driverHWSPI1Handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cc2:	619a      	str	r2, [r3, #24]
  driverHWSPI1Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cc6:	2238      	movs	r2, #56	; 0x38
 8000cc8:	61da      	str	r2, [r3, #28]
  driverHWSPI1Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  driverHWSPI1Handle.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  driverHWSPI1Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  driverHWSPI1Handle.Init.CRCPolynomial = 7;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  driverHWSPI1Handle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  driverHWSPI1Handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&driverHWSPI1Handle) != HAL_OK)
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cf0:	f006 f9e4 	bl	80070bc <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d000      	beq.n	8000cfc <driverHWSPI1Init+0x74>
  {
    while(true);
 8000cfa:	e7fe      	b.n	8000cfa <driverHWSPI1Init+0x72>
  }

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f004 fb2e 	bl	8005364 <HAL_GPIO_WritePin>
};
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000045c 	.word	0x2000045c
 8000d14:	40013000 	.word	0x40013000

08000d18 <driverHWSPI1Write>:

bool driverHWSPI1Write(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	461a      	mov	r2, r3
 8000d24:	460b      	mov	r3, r1
 8000d26:	72fb      	strb	r3, [r7, #11]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	813b      	strh	r3, [r7, #8]
	uint8_t *readBuffer;																																					// Make fake buffer holder
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state
	readBuffer = malloc(noOfBytesToWrite);																												// Make fake buffer for
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00c fe1a 	bl	800d968 <malloc>
 8000d34:	4603      	mov	r3, r0
 8000d36:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);																      // Make CS low
 8000d38:	893b      	ldrh	r3, [r7, #8]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f004 fb10 	bl	8005364 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeBuffer,readBuffer,noOfBytesToWrite,driverHWSPI1DefaultTimeout);	// Write desired data to slave and store the received data in readBuffer
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2264      	movs	r2, #100	; 0x64
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d52:	f006 fbcc 	bl	80074ee <HAL_SPI_TransmitReceive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	74fb      	strb	r3, [r7, #19]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  																		// Wait until transmission is complete
 8000d5a:	bf00      	nop
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d0f9      	beq.n	8000d5c <driverHWSPI1Write+0x44>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);																	      // Make CS High
 8000d68:	893b      	ldrh	r3, [r7, #8]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f004 faf8 	bl	8005364 <HAL_GPIO_WritePin>

	free(readBuffer);																																							// Dump de fake buffer
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f00c fdff 	bl	800d978 <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000d7a:	7cfb      	ldrb	r3, [r7, #19]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
};
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000045c 	.word	0x2000045c

08000d94 <driverHWSPI1WriteRead>:

bool driverHWSPI1WriteRead(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, uint8_t *readBuffer, uint8_t noOfBytesToRead, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	72fb      	strb	r3, [r7, #11]
 8000da4:	4613      	mov	r3, r2
 8000da6:	72bb      	strb	r3, [r7, #10]
	uint8_t *writeArray, *readArray;
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state

	writeArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000da8:	7afa      	ldrb	r2, [r7, #11]
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	4413      	add	r3, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00c fdda 	bl	800d968 <malloc>
 8000db4:	4603      	mov	r3, r0
 8000db6:	61fb      	str	r3, [r7, #28]
	readArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000db8:	7afa      	ldrb	r2, [r7, #11]
 8000dba:	7abb      	ldrb	r3, [r7, #10]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00c fdd2 	bl	800d968 <malloc>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	61bb      	str	r3, [r7, #24]

	memset(writeArray,0xFF,noOfBytesToWrite+noOfBytesToRead);
 8000dc8:	7afa      	ldrb	r2, [r7, #11]
 8000dca:	7abb      	ldrb	r3, [r7, #10]
 8000dcc:	4413      	add	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	21ff      	movs	r1, #255	; 0xff
 8000dd2:	69f8      	ldr	r0, [r7, #28]
 8000dd4:	f00c fde6 	bl	800d9a4 <memset>
	memcpy(writeArray,writeBuffer,noOfBytesToWrite);
 8000dd8:	7afb      	ldrb	r3, [r7, #11]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f00c fdd2 	bl	800d988 <memcpy>

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);
 8000de4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dec:	f004 faba 	bl	8005364 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeArray,readArray,noOfBytesToWrite+noOfBytesToRead,driverHWSPI1DefaultTimeout);
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	7abb      	ldrb	r3, [r7, #10]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2264      	movs	r2, #100	; 0x64
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69f9      	ldr	r1, [r7, #28]
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e06:	f006 fb72 	bl	80074ee <HAL_SPI_TransmitReceive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	75fb      	strb	r3, [r7, #23]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 8000e0e:	bf00      	nop
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d0f9      	beq.n	8000e10 <driverHWSPI1WriteRead+0x7c>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000e1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e24:	f004 fa9e 	bl	8005364 <HAL_GPIO_WritePin>

	memcpy(readBuffer,readArray+noOfBytesToWrite,noOfBytesToRead);
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7aba      	ldrb	r2, [r7, #10]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f00c fda8 	bl	800d988 <memcpy>

	free(writeArray);
 8000e38:	69f8      	ldr	r0, [r7, #28]
 8000e3a:	f00c fd9d 	bl	800d978 <free>
	free(readArray);
 8000e3e:	69b8      	ldr	r0, [r7, #24]
 8000e40:	f00c fd9a 	bl	800d978 <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
};
 8000e50:	4618      	mov	r0, r3
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000045c 	.word	0x2000045c

08000e5c <driverSWLTC6804DelayMS>:
uint8_t driverSWLTC6804MaxNoOfCellPerModule = 0;
uint8_t driverSWLTC6804MaxNoOfTempSensorPerModule = 0;

driverLTC6804ConfigStructTypedef driverSWLTC6804ConfigStruct;

void driverSWLTC6804DelayMS(uint32_t delayMS) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = HAL_GetTick();
 8000e64:	f003 f8e8 	bl	8004038 <HAL_GetTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60fb      	str	r3, [r7, #12]
	while(!modDelayTick1ms(&currentTick,delayMS)){};
 8000e6c:	bf00      	nop
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fd94 	bl	80039a2 <modDelayTick1ms>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f6      	beq.n	8000e6e <driverSWLTC6804DelayMS+0x12>
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <driverSWLTC6804Init>:

void driverSWLTC6804Init(driverLTC6804ConfigStructTypedef configStruct, uint8_t totalNumberOfLTCs, uint8_t noOfCellPerModule, uint8_t noOfTempSensorPerModule, uint8_t cellMonitorType) {
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e9c:	466b      	mov	r3, sp
 8000e9e:	461e      	mov	r6, r3
	driverSWLTC6804ConfigStruct = configStruct;
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <driverSWLTC6804Init+0x110>)
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eb0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	driverSWLTC6804TotalNumberOfICs = totalNumberOfLTCs;
 8000eb4:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000eb6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000eba:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfCellPerModule = noOfCellPerModule;
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <driverSWLTC6804Init+0x118>)
 8000ebe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ec2:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfTempSensorPerModule = noOfTempSensorPerModule;
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <driverSWLTC6804Init+0x11c>)
 8000ec6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000eca:	7013      	strb	r3, [r2, #0]

	uint8_t rxConfig [driverSWLTC6804TotalNumberOfICs][8];
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000ece:	781c      	ldrb	r4, [r3, #0]
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	b2e0      	uxtb	r0, r4
 8000ed8:	f04f 0100 	mov.w	r1, #0
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	018b      	lsls	r3, r1, #6
 8000ee6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000eea:	0182      	lsls	r2, r0, #6
 8000eec:	b2e0      	uxtb	r0, r4
 8000eee:	f04f 0100 	mov.w	r1, #0
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	018b      	lsls	r3, r1, #6
 8000efc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000f00:	0182      	lsls	r2, r0, #6
 8000f02:	4623      	mov	r3, r4
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	3307      	adds	r3, #7
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f10:	466b      	mov	r3, sp
 8000f12:	3300      	adds	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
	uint8_t LTCScanCount = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73bb      	strb	r3, [r7, #14]
	int8_t returnPEC = -1;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	73fb      	strb	r3, [r7, #15]

	driverHWSPI1Init(GPIOA,GPIO_PIN_4);
 8000f1e:	2110      	movs	r1, #16
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f7ff feb0 	bl	8000c88 <driverHWSPI1Init>
	driverSWLTC6804WakeIC();
 8000f28:	f000 fed9 	bl	8001cde <driverSWLTC6804WakeIC>

	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f2c:	e025      	b.n	8000f7a <driverSWLTC6804Init+0xee>
	  returnPEC =	driverSWLTC6804ReadConfigRegister(driverSWLTC6804TotalNumberOfICs,rxConfig);
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fe36 	bl	8001ba8 <driverSWLTC6804ReadConfigRegister>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
		driverSWLTC6804WakeIC();
 8000f40:	f000 fecd 	bl	8001cde <driverSWLTC6804WakeIC>
		driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fb07 	bl	8001560 <driverSWLTC6804WriteConfigRegister>
		if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8000f52:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d003      	beq.n	8000f62 <driverSWLTC6804Init+0xd6>
 8000f5a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d106      	bne.n	8000f70 <driverSWLTC6804Init+0xe4>
			driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fc9a 	bl	80018a4 <driverSWLTC6804WriteConfigRegisterB>
	}
		driverSWLTC6804WakeIC();
 8000f70:	f000 feb5 	bl	8001cde <driverSWLTC6804WakeIC>
		LTCScanCount++;
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73bb      	strb	r3, [r7, #14]
	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d804      	bhi.n	8000f8a <driverSWLTC6804Init+0xfe>
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d0d1      	beq.n	8000f2e <driverSWLTC6804Init+0xa2>
 8000f8a:	46b5      	mov	sp, r6
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000f96:	b004      	add	sp, #16
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200004c0 	.word	0x200004c0
 8000fa0:	20000210 	.word	0x20000210
 8000fa4:	20000211 	.word	0x20000211
 8000fa8:	20000212 	.word	0x20000212

08000fac <driverSWLTC6804ResetCellVoltageRegisters>:

void driverSWLTC6804ResetCellVoltageRegisters(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	703b      	strb	r3, [r7, #0]
  cmd[1] = 0x11;
 8000fb6:	2311      	movs	r3, #17
 8000fb8:	707b      	strb	r3, [r7, #1]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f000 fdbe 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	80fb      	strh	r3, [r7, #6]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec );
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	70fb      	strb	r3, [r7, #3]

	driverSWLTC6804WakeIC();
 8000fd8:	f000 fe81 	bl	8001cde <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fe52 	bl	8001c8a <driverSWLTC6804Write>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <driverSWLTC6804StartCellVoltageConversion>:

  driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}

void driverSWLTC6804StartCellVoltageConversion(uint8_t MD,uint8_t DCP, uint8_t CH) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	71bb      	strb	r3, [r7, #6]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint16_t cmd_pec;
	uint8_t ADCV[2]; //!< Cell Voltage conversion command.

  ADCV[0] = ((MD & 0x02) >> 1) + 0x02;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3302      	adds	r3, #2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	733b      	strb	r3, [r7, #12]
  ADCV[1] = ((MD & 0x01) << 7) + 0x60 + (DCP<<4) + CH;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	01db      	lsls	r3, r3, #7
 8001016:	b2da      	uxtb	r2, r3
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4413      	add	r3, r2
 8001020:	b2da      	uxtb	r2, r3
 8001022:	797b      	ldrb	r3, [r7, #5]
 8001024:	4413      	add	r3, r2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	3360      	adds	r3, #96	; 0x60
 800102a:	b2db      	uxtb	r3, r3
 800102c:	737b      	strb	r3, [r7, #13]

  cmd[0] = ADCV[0];
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	743b      	strb	r3, [r7, #16]
  cmd[1] = ADCV[1];
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	747b      	strb	r3, [r7, #17]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADCV);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4619      	mov	r1, r3
 800103c:	2002      	movs	r0, #2
 800103e:	f000 fd7f 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 8001042:	4603      	mov	r3, r0
 8001044:	82fb      	strh	r3, [r7, #22]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001046:	8afb      	ldrh	r3, [r7, #22]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (uint8_t)(cmd_pec);
 8001050:	8afb      	ldrh	r3, [r7, #22]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	74fb      	strb	r3, [r7, #19]

	driverSWLTC6804WakeIC();
 8001056:	f000 fe42 	bl	8001cde <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2104      	movs	r1, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fe12 	bl	8001c8a <driverSWLTC6804Write>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <driverSWLTC6804ReadCellVoltagesArray>:
	driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}


bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 8001070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001074:	b089      	sub	sp, #36	; 0x24
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	4b64      	ldr	r3, [pc, #400]	; (800120c <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 800107c:	781e      	ldrb	r6, [r3, #0]
 800107e:	4633      	mov	r3, r6
 8001080:	3b01      	subs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	b2f0      	uxtb	r0, r6
 8001086:	f04f 0100 	mov.w	r1, #0
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	014b      	lsls	r3, r1, #5
 8001094:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001098:	0142      	lsls	r2, r0, #5
 800109a:	466b      	mov	r3, sp
 800109c:	4699      	mov	r9, r3
	bool dataValid = true;
 800109e:	2301      	movs	r3, #1
 80010a0:	767b      	strb	r3, [r7, #25]
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule];
 80010a2:	4b5a      	ldr	r3, [pc, #360]	; (800120c <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 80010a4:	781c      	ldrb	r4, [r3, #0]
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 80010a8:	781d      	ldrb	r5, [r3, #0]
 80010aa:	4623      	mov	r3, r4
 80010ac:	3b01      	subs	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	b2e0      	uxtb	r0, r4
 80010b2:	f04f 0100 	mov.w	r1, #0
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	010b      	lsls	r3, r1, #4
 80010c0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80010c4:	0102      	lsls	r2, r0, #4
 80010c6:	4623      	mov	r3, r4
 80010c8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80010cc:	462b      	mov	r3, r5
 80010ce:	3b01      	subs	r3, #1
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	b2e0      	uxtb	r0, r4
 80010d4:	f04f 0100 	mov.w	r1, #0
 80010d8:	b2ea      	uxtb	r2, r5
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	fb02 fe01 	mul.w	lr, r2, r1
 80010e2:	fb00 fc03 	mul.w	ip, r0, r3
 80010e6:	44f4      	add	ip, lr
 80010e8:	fba0 2302 	umull	r2, r3, r0, r2
 80010ec:	eb0c 0103 	add.w	r1, ip, r3
 80010f0:	460b      	mov	r3, r1
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	f04f 0100 	mov.w	r1, #0
 80010fa:	0119      	lsls	r1, r3, #4
 80010fc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001100:	0110      	lsls	r0, r2, #4
 8001102:	b2e0      	uxtb	r0, r4
 8001104:	f04f 0100 	mov.w	r1, #0
 8001108:	b2ea      	uxtb	r2, r5
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	fb02 fe01 	mul.w	lr, r2, r1
 8001112:	fb00 fc03 	mul.w	ip, r0, r3
 8001116:	44f4      	add	ip, lr
 8001118:	fba0 2302 	umull	r2, r3, r0, r2
 800111c:	eb0c 0103 	add.w	r1, ip, r3
 8001120:	460b      	mov	r3, r1
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	f04f 0100 	mov.w	r1, #0
 800112a:	0119      	lsls	r1, r3, #4
 800112c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001130:	0110      	lsls	r0, r2, #4
 8001132:	4623      	mov	r3, r4
 8001134:	462a      	mov	r2, r5
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3307      	adds	r3, #7
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	ebad 0d03 	sub.w	sp, sp, r3
 8001146:	466b      	mov	r3, sp
 8001148:	3301      	adds	r3, #1
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]

	driverSWLTC6804ReadCellVoltageRegisters(CELL_CH_ALL,driverSWLTC6804TotalNumberOfICs,cellVoltageArrayCodes);
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4619      	mov	r1, r3
 8001158:	2000      	movs	r0, #0
 800115a:	f000 f85d 	bl	8001218 <driverSWLTC6804ReadCellVoltageRegisters>

  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 800115e:	2300      	movs	r3, #0
 8001160:	76bb      	strb	r3, [r7, #26]
 8001162:	e047      	b.n	80011f4 <driverSWLTC6804ReadCellVoltagesArray+0x184>
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 8001164:	2300      	movs	r3, #0
 8001166:	76fb      	strb	r3, [r7, #27]
 8001168:	e03c      	b.n	80011e4 <driverSWLTC6804ReadCellVoltagesArray+0x174>
			if(cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f < 10.0f)
 800116a:	ea4f 0158 	mov.w	r1, r8, lsr #1
 800116e:	7eb8      	ldrb	r0, [r7, #26]
 8001170:	7efa      	ldrb	r2, [r7, #27]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	fb00 f101 	mul.w	r1, r0, r1
 8001178:	440a      	add	r2, r1
 800117a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001214 <driverSWLTC6804ReadCellVoltagesArray+0x1a4>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	d51e      	bpl.n	80011da <driverSWLTC6804ReadCellVoltagesArray+0x16a>
			  cellVoltagesArray[modulePointer][cellPointer] = cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f;
 800119c:	ea4f 0158 	mov.w	r1, r8, lsr #1
 80011a0:	7eb8      	ldrb	r0, [r7, #26]
 80011a2:	7efa      	ldrb	r2, [r7, #27]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	fb00 f101 	mul.w	r1, r0, r1
 80011aa:	440a      	add	r2, r1
 80011ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	7ebb      	ldrb	r3, [r7, #26]
 80011ba:	4632      	mov	r2, r6
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	441a      	add	r2, r3
 80011c6:	7efb      	ldrb	r3, [r7, #27]
 80011c8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001214 <driverSWLTC6804ReadCellVoltagesArray+0x1a4>
 80011cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	edc3 7a00 	vstr	s15, [r3]
 80011d8:	e001      	b.n	80011de <driverSWLTC6804ReadCellVoltagesArray+0x16e>
			else
				dataValid = false;
 80011da:	2300      	movs	r3, #0
 80011dc:	767b      	strb	r3, [r7, #25]
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 80011de:	7efb      	ldrb	r3, [r7, #27]
 80011e0:	3301      	adds	r3, #1
 80011e2:	76fb      	strb	r3, [r7, #27]
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	7efa      	ldrb	r2, [r7, #27]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3bd      	bcc.n	800116a <driverSWLTC6804ReadCellVoltagesArray+0xfa>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 80011ee:	7ebb      	ldrb	r3, [r7, #26]
 80011f0:	3301      	adds	r3, #1
 80011f2:	76bb      	strb	r3, [r7, #26]
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	7eba      	ldrb	r2, [r7, #26]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3b2      	bcc.n	8001164 <driverSWLTC6804ReadCellVoltagesArray+0xf4>
		}
  }

	return dataValid;
 80011fe:	7e7b      	ldrb	r3, [r7, #25]
 8001200:	46cd      	mov	sp, r9
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120c:	20000211 	.word	0x20000211
 8001210:	20000210 	.word	0x20000210
 8001214:	38d1b717 	.word	0x38d1b717

08001218 <driverSWLTC6804ReadCellVoltageRegisters>:

uint8_t driverSWLTC6804ReadCellVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t cell_codes[][driverSWLTC6804MaxNoOfCellPerModule]) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	603a      	str	r2, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	460b      	mov	r3, r1
 8001226:	71bb      	strb	r3, [r7, #6]
 8001228:	4b9d      	ldr	r3, [pc, #628]	; (80014a0 <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 800122a:	781c      	ldrb	r4, [r3, #0]
 800122c:	4623      	mov	r3, r4
 800122e:	3b01      	subs	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	b2e0      	uxtb	r0, r4
 8001234:	f04f 0100 	mov.w	r1, #0
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	010b      	lsls	r3, r1, #4
 8001242:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001246:	0102      	lsls	r2, r0, #4
  const uint8_t NUM_RX_BYT = 8;
 8001248:	2308      	movs	r3, #8
 800124a:	76fb      	strb	r3, [r7, #27]
  const uint8_t BYT_IN_REG = 6;
 800124c:	2306      	movs	r3, #6
 800124e:	76bb      	strb	r3, [r7, #26]
  const uint8_t CELL_IN_REG = 3;
 8001250:	2303      	movs	r3, #3
 8001252:	767b      	strb	r3, [r7, #25]

  uint8_t  *cell_data;
  int8_t  pec_error = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter=0; //data counter
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001260:	7efb      	ldrb	r3, [r7, #27]
 8001262:	79ba      	ldrb	r2, [r7, #6]
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f00c fb7d 	bl	800d968 <malloc>
 800126e:	4603      	mov	r3, r0
 8001270:	617b      	str	r3, [r7, #20]

  if (reg == 0) {
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 8092 	bne.w	800139e <driverSWLTC6804ReadCellVoltageRegisters+0x186>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 800127a:	2301      	movs	r3, #1
 800127c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001280:	e080      	b.n	8001384 <driverSWLTC6804ReadCellVoltageRegisters+0x16c>
      data_counter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      driverSWLTC6804ReadCellVoltageGroups(cell_reg, total_ic,cell_data );								                     //Reads a single Cell voltage register
 8001288:	79b9      	ldrb	r1, [r7, #6]
 800128a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f909 	bl	80014a8 <driverSWLTC6804ReadCellVoltageGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001296:	2300      	movs	r3, #0
 8001298:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800129c:	e068      	b.n	8001370 <driverSWLTC6804ReadCellVoltageRegisters+0x158>
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80012a4:	e02e      	b.n	8001304 <driverSWLTC6804ReadCellVoltageRegisters+0xec>
          parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);      //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 80012a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012b6:	3301      	adds	r3, #1
 80012b8:	6979      	ldr	r1, [r7, #20]
 80012ba:	440b      	add	r3, r1
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	81fb      	strh	r3, [r7, #14]
          cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80012c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012cc:	4622      	mov	r2, r4
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80012dc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80012e0:	3a01      	subs	r2, #1
 80012e2:	7e78      	ldrb	r0, [r7, #25]
 80012e4:	fb00 f202 	mul.w	r2, r0, r2
 80012e8:	440a      	add	r2, r1
 80012ea:	89f9      	ldrh	r1, [r7, #14]
 80012ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter = data_counter + 2;											                           //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 80012f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012f4:	3302      	adds	r3, #2
 80012f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80012fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012fe:	3301      	adds	r3, #1
 8001300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001304:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001308:	7e7b      	ldrb	r3, [r7, #25]
 800130a:	429a      	cmp	r2, r3
 800130c:	d3cb      	bcc.n	80012a6 <driverSWLTC6804ReadCellVoltageRegisters+0x8e>
        }
        received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 800130e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001322:	3301      	adds	r3, #1
 8001324:	6979      	ldr	r1, [r7, #20]
 8001326:	440b      	add	r3, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	827b      	strh	r3, [r7, #18]
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001330:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001334:	7efa      	ldrb	r2, [r7, #27]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	461a      	mov	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	441a      	add	r2, r3
 8001340:	7ebb      	ldrb	r3, [r7, #26]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fbfb 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 800134a:	4603      	mov	r3, r0
 800134c:	823b      	strh	r3, [r7, #16]
        if(received_pec != data_pec) {
 800134e:	8a7a      	ldrh	r2, [r7, #18]
 8001350:	8a3b      	ldrh	r3, [r7, #16]
 8001352:	429a      	cmp	r2, r3
 8001354:	d002      	beq.n	800135c <driverSWLTC6804ReadCellVoltageRegisters+0x144>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 8001356:	23ff      	movs	r3, #255	; 0xff
 8001358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
        data_counter=data_counter+2;												                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 800135c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001360:	3302      	adds	r3, #2
 8001362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800136a:	3301      	adds	r3, #1
 800136c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001370:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	429a      	cmp	r2, r3
 8001378:	d391      	bcc.n	800129e <driverSWLTC6804ReadCellVoltageRegisters+0x86>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 800137a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800137e:	3301      	adds	r3, #1
 8001380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <driverSWLTC6804ReadCellVoltageRegisters+0x28c>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001396:	429a      	cmp	r2, r3
 8001398:	f67f af73 	bls.w	8001282 <driverSWLTC6804ReadCellVoltageRegisters+0x6a>
 800139c:	e076      	b.n	800148c <driverSWLTC6804ReadCellVoltageRegisters+0x274>
      }
    }
  }else{
    driverSWLTC6804ReadCellVoltageGroups(reg, total_ic,cell_data);
 800139e:	79b9      	ldrb	r1, [r7, #6]
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f87f 	bl	80014a8 <driverSWLTC6804ReadCellVoltageGroups>
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80013b0:	e067      	b.n	8001482 <driverSWLTC6804ReadCellVoltageRegisters+0x26a>
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80013b8:	e02d      	b.n	8001416 <driverSWLTC6804ReadCellVoltageRegisters+0x1fe>
			  parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);            //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 80013ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ca:	3301      	adds	r3, #1
 80013cc:	6979      	ldr	r1, [r7, #20]
 80013ce:	440b      	add	r3, r1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	81fb      	strh	r3, [r7, #14]
			  cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 80013dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013e0:	4622      	mov	r2, r4
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	3a01      	subs	r2, #1
 80013f4:	7e78      	ldrb	r0, [r7, #25]
 80013f6:	fb00 f202 	mul.w	r2, r0, r2
 80013fa:	440a      	add	r2, r1
 80013fc:	89f9      	ldrh	r1, [r7, #14]
 80013fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  data_counter= data_counter + 2;     									                             //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 8001402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001406:	3302      	adds	r3, #2
 8001408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 800140c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001410:	3301      	adds	r3, #1
 8001412:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001416:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800141a:	7e7b      	ldrb	r3, [r7, #25]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3cc      	bcc.n	80013ba <driverSWLTC6804ReadCellVoltageRegisters+0x1a2>
		  }
	    received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 8001420:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b29a      	uxth	r2, r3
 8001430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001434:	3301      	adds	r3, #1
 8001436:	6979      	ldr	r1, [r7, #20]
 8001438:	440b      	add	r3, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4413      	add	r3, r2
 8001440:	827b      	strh	r3, [r7, #18]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001442:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001446:	7efa      	ldrb	r2, [r7, #27]
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	461a      	mov	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	441a      	add	r2, r3
 8001452:	7ebb      	ldrb	r3, [r7, #26]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fb72 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 800145c:	4603      	mov	r3, r0
 800145e:	823b      	strh	r3, [r7, #16]

			if(received_pec != data_pec) {
 8001460:	8a7a      	ldrh	r2, [r7, #18]
 8001462:	8a3b      	ldrh	r3, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d002      	beq.n	800146e <driverSWLTC6804ReadCellVoltageRegisters+0x256>
			  pec_error = -1;															                                       //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 8001468:	23ff      	movs	r3, #255	; 0xff
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  }
		  data_counter= data_counter + 2; 											                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 800146e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001472:	3302      	adds	r3, #2
 8001474:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001478:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800147c:	3301      	adds	r3, #1
 800147e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001482:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	429a      	cmp	r2, r3
 800148a:	d392      	bcc.n	80013b2 <driverSWLTC6804ReadCellVoltageRegisters+0x19a>
	  }
  }

  free(cell_data);
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f00c fa73 	bl	800d978 <free>
  return(pec_error);
 8001492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001496:	4618      	mov	r0, r3
 8001498:	372c      	adds	r7, #44	; 0x2c
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000211 	.word	0x20000211
 80014a4:	aaaaaaab 	.word	0xaaaaaaab

080014a8 <driverSWLTC6804ReadCellVoltageGroups>:

void driverSWLTC6804ReadCellVoltageGroups(uint8_t reg, uint8_t total_ic, uint8_t *data ) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	603a      	str	r2, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	460b      	mov	r3, r1
 80014b6:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80014b8:	2308      	movs	r3, #8
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1) {      //1: RDCVA
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d104      	bne.n	80014cc <driverSWLTC6804ReadCellVoltageGroups+0x24>
    cmd[1] = 0x04;
 80014c2:	2304      	movs	r3, #4
 80014c4:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80014c6:	2300      	movs	r3, #0
 80014c8:	723b      	strb	r3, [r7, #8]
 80014ca:	e026      	b.n	800151a <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 2) { //2: RDCVB
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d104      	bne.n	80014dc <driverSWLTC6804ReadCellVoltageGroups+0x34>
    cmd[1] = 0x06;
 80014d2:	2306      	movs	r3, #6
 80014d4:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80014d6:	2300      	movs	r3, #0
 80014d8:	723b      	strb	r3, [r7, #8]
 80014da:	e01e      	b.n	800151a <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 3) { //3: RDCVC
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d104      	bne.n	80014ec <driverSWLTC6804ReadCellVoltageGroups+0x44>
    cmd[1] = 0x08;
 80014e2:	2308      	movs	r3, #8
 80014e4:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	723b      	strb	r3, [r7, #8]
 80014ea:	e016      	b.n	800151a <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 4) { //4: RDCVD
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d104      	bne.n	80014fc <driverSWLTC6804ReadCellVoltageGroups+0x54>
    cmd[1] = 0x0A;
 80014f2:	230a      	movs	r3, #10
 80014f4:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80014f6:	2300      	movs	r3, #0
 80014f8:	723b      	strb	r3, [r7, #8]
 80014fa:	e00e      	b.n	800151a <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 5) { //5: RDCVE - LTC6812 & LTC6813 only
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d104      	bne.n	800150c <driverSWLTC6804ReadCellVoltageGroups+0x64>
    cmd[1] = 0x09;
 8001502:	2309      	movs	r3, #9
 8001504:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	723b      	strb	r3, [r7, #8]
 800150a:	e006      	b.n	800151a <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 6) { //6: RDCVF -  LTC6813 only
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d103      	bne.n	800151a <driverSWLTC6804ReadCellVoltageGroups+0x72>
    cmd[1] = 0x0B;
 8001512:	230b      	movs	r3, #11
 8001514:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001516:	2300      	movs	r3, #0
 8001518:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4619      	mov	r1, r3
 8001520:	2002      	movs	r0, #2
 8001522:	f000 fb0d 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 8001526:	4603      	mov	r3, r0
 8001528:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800152a:	89bb      	ldrh	r3, [r7, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001534:	89bb      	ldrh	r3, [r7, #12]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	72fb      	strb	r3, [r7, #11]

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800153a:	f000 fbd0 	bl	8001cde <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	fb12 f303 	smulbb	r3, r2, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f107 0008 	add.w	r0, r7, #8
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	2104      	movs	r1, #4
 8001550:	f000 fbac 	bl	8001cac <driverSWLTC6804WriteRead>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0000      	movs	r0, r0
	...

08001560 <driverSWLTC6804WriteConfigRegister>:

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake, this command can be removed.
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
}

void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b08c      	sub	sp, #48	; 0x30
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	6039      	str	r1, [r7, #0]
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	4613      	mov	r3, r2
 8001570:	71bb      	strb	r3, [r7, #6]
 8001572:	466b      	mov	r3, sp
 8001574:	461d      	mov	r5, r3
  const uint8_t BYTES_IN_REG = 6;
 8001576:	2306      	movs	r3, #6
 8001578:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	3304      	adds	r3, #4
 8001584:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8001588:	79fc      	ldrb	r4, [r7, #7]
 800158a:	4623      	mov	r3, r4
 800158c:	3b01      	subs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	b2e0      	uxtb	r0, r4
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	eb12 0a02 	adds.w	sl, r2, r2
 800159e:	eb43 0b03 	adc.w	fp, r3, r3
 80015a2:	4652      	mov	r2, sl
 80015a4:	465b      	mov	r3, fp
 80015a6:	1812      	adds	r2, r2, r0
 80015a8:	eb41 0303 	adc.w	r3, r1, r3
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	0119      	lsls	r1, r3, #4
 80015b6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80015ba:	0110      	lsls	r0, r2, #4
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4622      	mov	r2, r4
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	b2e0      	uxtb	r0, r4
 80015cc:	f04f 0100 	mov.w	r1, #0
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	eb12 0802 	adds.w	r8, r2, r2
 80015d8:	eb43 0903 	adc.w	r9, r3, r3
 80015dc:	4642      	mov	r2, r8
 80015de:	464b      	mov	r3, r9
 80015e0:	1812      	adds	r2, r2, r0
 80015e2:	eb41 0303 	adc.w	r3, r1, r3
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	0119      	lsls	r1, r3, #4
 80015f0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80015f4:	0110      	lsls	r0, r2, #4
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4622      	mov	r2, r4
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	3307      	adds	r3, #7
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	ebad 0d03 	sub.w	sp, sp, r3
 800160e:	466b      	mov	r3, sp
 8001610:	3300      	adds	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8001614:	4ba2      	ldr	r3, [pc, #648]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff95 	bl	8000548 <__aeabi_f2d>
 800161e:	a39e      	add	r3, pc, #632	; (adr r3, 8001898 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f912 	bl	800084c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff faba 	bl	8000ba8 <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	82fb      	strh	r3, [r7, #22]
	uint16_t VoV = driverSWLTC6804ConfigStruct.CellOverVoltageLimit/(16*0.0001);
 8001638:	4b99      	ldr	r3, [pc, #612]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff83 	bl	8000548 <__aeabi_f2d>
 8001642:	a395      	add	r3, pc, #596	; (adr r3, 8001898 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f900 	bl	800084c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff faa8 	bl	8000ba8 <__aeabi_d2uiz>
 8001658:	4603      	mov	r3, r0
 800165a:	82bb      	strh	r3, [r7, #20]
	uint32_t activeBalanceMask=0;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
 8001664:	e08d      	b.n	8001782 <driverSWLTC6804WriteConfigRegister+0x222>
		if(useArray)
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <driverSWLTC6804WriteConfigRegister+0x11a>
			activeBalanceMask = balanceEnableMaskArray[i];
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	e002      	b.n	8001680 <driverSWLTC6804WriteConfigRegister+0x120>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 800167a:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24

    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001682:	791b      	ldrb	r3, [r3, #4]
 8001684:	01db      	lsls	r3, r3, #7
 8001686:	b25a      	sxtb	r2, r3
 8001688:	4b85      	ldr	r3, [pc, #532]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 800168a:	78db      	ldrb	r3, [r3, #3]
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b25a      	sxtb	r2, r3
 8001694:	4b82      	ldr	r3, [pc, #520]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001696:	789b      	ldrb	r3, [r3, #2]
 8001698:	015b      	lsls	r3, r3, #5
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	4b7f      	ldr	r3, [pc, #508]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	4b7c      	ldr	r3, [pc, #496]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	4b79      	ldr	r3, [pc, #484]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 80016ba:	7a5b      	ldrb	r3, [r3, #9]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 80016c6:	7adb      	ldrb	r3, [r3, #11]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	b2d8      	uxtb	r0, r3
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	440b      	add	r3, r1
 80016de:	4602      	mov	r2, r0
 80016e0:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = (VuV & 0xFF) ;
 80016e2:	8afb      	ldrh	r3, [r7, #22]
 80016e4:	b2d8      	uxtb	r0, r3
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	440b      	add	r3, r1
 80016f4:	3301      	adds	r3, #1
 80016f6:	4602      	mov	r2, r0
 80016f8:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 80016fa:	8abb      	ldrh	r3, [r7, #20]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	8afb      	ldrh	r3, [r7, #22]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b29b      	uxth	r3, r3
 8001706:	b25b      	sxtb	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b25b      	sxtb	r3, r3
 800170c:	b2d8      	uxtb	r0, r3
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	440b      	add	r3, r1
 800171c:	3302      	adds	r3, #2
 800171e:	4602      	mov	r2, r0
 8001720:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][3] = (VoV >> 4) ;
 8001722:	8abb      	ldrh	r3, [r7, #20]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	b29b      	uxth	r3, r3
 8001728:	b2d8      	uxtb	r0, r3
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	440b      	add	r3, r1
 8001738:	3303      	adds	r3, #3
 800173a:	4602      	mov	r2, r0
 800173c:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][4] = (activeBalanceMask & 0xFF) ;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	b2d8      	uxtb	r0, r3
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	440b      	add	r3, r1
 8001750:	3304      	adds	r3, #4
 8001752:	4602      	mov	r2, r0
 8001754:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ;
 8001756:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001758:	7d1b      	ldrb	r3, [r3, #20]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	b2da      	uxtb	r2, r3
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b2d8      	uxtb	r0, r3
 8001768:	69b9      	ldr	r1, [r7, #24]
 800176a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	440b      	add	r3, r1
 8001776:	3305      	adds	r3, #5
 8001778:	4602      	mov	r2, r0
 800177a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 800177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177e:	3301      	adds	r3, #1
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001786:	429a      	cmp	r2, r3
 8001788:	f6ff af6d 	blt.w	8001666 <driverSWLTC6804WriteConfigRegister+0x106>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 800178c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001790:	4618      	mov	r0, r3
 8001792:	f00c f8e9 	bl	800d968 <malloc>
 8001796:	4603      	mov	r3, r0
 8001798:	613b      	str	r3, [r7, #16]
  cmd[0] = 0x00; // config register command
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x01; // config register command
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	3301      	adds	r3, #1
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
  cmd[2] = 0x3d; // PEC
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	3302      	adds	r3, #2
 80017ac:	223d      	movs	r2, #61	; 0x3d
 80017ae:	701a      	strb	r2, [r3, #0]
  cmd[3] = 0x6e; // PEC
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	3303      	adds	r3, #3
 80017b4:	226e      	movs	r2, #110	; 0x6e
 80017b6:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 80017b8:	2304      	movs	r3, #4
 80017ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80017c4:	e051      	b.n	800186a <driverSWLTC6804WriteConfigRegister+0x30a>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017cc:	e01b      	b.n	8001806 <driverSWLTC6804WriteConfigRegister+0x2a6>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 80017ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 80017d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017dc:	6939      	ldr	r1, [r7, #16]
 80017de:	4419      	add	r1, r3
 80017e0:	69bc      	ldr	r4, [r7, #24]
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4423      	add	r3, r4
 80017ec:	4403      	add	r3, r0
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 80017f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017f6:	3301      	adds	r3, #1
 80017f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 80017fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001800:	3301      	adds	r3, #1
 8001802:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001806:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800180a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800180e:	429a      	cmp	r2, r3
 8001810:	d3dd      	bcc.n	80017ce <driverSWLTC6804WriteConfigRegister+0x26e>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8001812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	441a      	add	r2, r3
 8001824:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f988 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 8001830:	4603      	mov	r3, r0
 8001832:	81fb      	strh	r3, [r7, #14]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b299      	uxth	r1, r3
 800183a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4413      	add	r3, r2
 8001842:	b2ca      	uxtb	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800184a:	3301      	adds	r3, #1
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	89fa      	ldrh	r2, [r7, #14]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8001856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800185a:	3302      	adds	r3, #2
 800185c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001864:	3b01      	subs	r3, #1
 8001866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800186a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1a9      	bne.n	80017c6 <driverSWLTC6804WriteConfigRegister+0x266>
  }

	driverSWLTC6804WakeIC();
 8001872:	f000 fa34 	bl	8001cde <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 8001876:	f897 3020 	ldrb.w	r3, [r7, #32]
 800187a:	4619      	mov	r1, r3
 800187c:	6938      	ldr	r0, [r7, #16]
 800187e:	f000 fa04 	bl	8001c8a <driverSWLTC6804Write>
  free(cmd);
 8001882:	6938      	ldr	r0, [r7, #16]
 8001884:	f00c f878 	bl	800d978 <free>
 8001888:	46ad      	mov	sp, r5
}
 800188a:	bf00      	nop
 800188c:	3730      	adds	r7, #48	; 0x30
 800188e:	46bd      	mov	sp, r7
 8001890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001894:	f3af 8000 	nop.w
 8001898:	eb1c432d 	.word	0xeb1c432d
 800189c:	3f5a36e2 	.word	0x3f5a36e2
 80018a0:	200004c0 	.word	0x200004c0

080018a4 <driverSWLTC6804WriteConfigRegisterB>:

void driverSWLTC6804WriteConfigRegisterB(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 80018a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a8:	b08a      	sub	sp, #40	; 0x28
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	6039      	str	r1, [r7, #0]
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	4613      	mov	r3, r2
 80018b4:	71bb      	strb	r3, [r7, #6]
 80018b6:	466b      	mov	r3, sp
 80018b8:	461d      	mov	r5, r3
  const uint8_t BYTES_IN_REG = 6;
 80018ba:	2306      	movs	r3, #6
 80018bc:	767b      	strb	r3, [r7, #25]
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3304      	adds	r3, #4
 80018c6:	763b      	strb	r3, [r7, #24]
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 80018c8:	79fc      	ldrb	r4, [r7, #7]
 80018ca:	4623      	mov	r3, r4
 80018cc:	3b01      	subs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	b2e0      	uxtb	r0, r4
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	eb12 0a02 	adds.w	sl, r2, r2
 80018de:	eb43 0b03 	adc.w	fp, r3, r3
 80018e2:	4652      	mov	r2, sl
 80018e4:	465b      	mov	r3, fp
 80018e6:	1812      	adds	r2, r2, r0
 80018e8:	eb41 0303 	adc.w	r3, r1, r3
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0119      	lsls	r1, r3, #4
 80018f6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80018fa:	0110      	lsls	r0, r2, #4
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4622      	mov	r2, r4
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	b2e0      	uxtb	r0, r4
 800190c:	f04f 0100 	mov.w	r1, #0
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	eb12 0802 	adds.w	r8, r2, r2
 8001918:	eb43 0903 	adc.w	r9, r3, r3
 800191c:	4642      	mov	r2, r8
 800191e:	464b      	mov	r3, r9
 8001920:	1812      	adds	r2, r2, r0
 8001922:	eb41 0303 	adc.w	r3, r1, r3
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	0119      	lsls	r1, r3, #4
 8001930:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001934:	0110      	lsls	r0, r2, #4
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4622      	mov	r2, r4
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	3307      	adds	r3, #7
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	ebad 0d03 	sub.w	sp, sp, r3
 800194e:	466b      	mov	r3, sp
 8001950:	3300      	adds	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
	uint32_t activeBalanceMask=0;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
	uint16_t cmd_pec;

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	e06c      	b.n	8001a38 <driverSWLTC6804WriteConfigRegisterB+0x194>
		if(useArray)
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <driverSWLTC6804WriteConfigRegisterB+0xce>
			activeBalanceMask = balanceEnableMaskArray[i];
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	e002      	b.n	8001978 <driverSWLTC6804WriteConfigRegisterB+0xd4>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8001972:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	61fb      	str	r3, [r7, #28]


    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f023 030f 	bic.w	r3, r3, #15
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001986:	7a1b      	ldrb	r3, [r3, #8]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001992:	79db      	ldrb	r3, [r3, #7]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <driverSWLTC6804WriteConfigRegisterB+0x298>)
 800199e:	799b      	ldrb	r3, [r3, #6]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4a64      	ldr	r2, [pc, #400]	; (8001b3c <driverSWLTC6804WriteConfigRegisterB+0x298>)
 80019aa:	7952      	ldrb	r2, [r2, #5]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b2d8      	uxtb	r0, r3
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	6a3a      	ldr	r2, [r7, #32]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	440b      	add	r3, r1
 80019be:	4602      	mov	r2, r0
 80019c0:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = ((activeBalanceMask >> 16 ) & 0x00000003) ;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	b2d8      	uxtb	r0, r3
 80019ce:	6939      	ldr	r1, [r7, #16]
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	440b      	add	r3, r1
 80019dc:	3301      	adds	r3, #1
 80019de:	4602      	mov	r2, r0
 80019e0:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][2] = 0;
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	6a3a      	ldr	r2, [r7, #32]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	440b      	add	r3, r1
 80019f0:	3302      	adds	r3, #2
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][3] = 0;
 80019f6:	6939      	ldr	r1, [r7, #16]
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	440b      	add	r3, r1
 8001a04:	3303      	adds	r3, #3
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][4] = 0;
 8001a0a:	6939      	ldr	r1, [r7, #16]
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	440b      	add	r3, r1
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][5] = 0;
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	6a3a      	ldr	r2, [r7, #32]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3305      	adds	r3, #5
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	3301      	adds	r3, #1
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	6a3a      	ldr	r2, [r7, #32]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	db8e      	blt.n	800195e <driverSWLTC6804WriteConfigRegisterB+0xba>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001a40:	7e3b      	ldrb	r3, [r7, #24]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00b ff90 	bl	800d968 <malloc>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]
  cmd[0] = 0x00; // config register B command
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x24; // config register B command
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3301      	adds	r3, #1
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	701a      	strb	r2, [r3, #0]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f000 f86f 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001a66:	897b      	ldrh	r3, [r7, #10]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3303      	adds	r3, #3
 8001a78:	897a      	ldrh	r2, [r7, #10]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	76fb      	strb	r3, [r7, #27]

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a88:	e043      	b.n	8001b12 <driverSWLTC6804WriteConfigRegisterB+0x26e>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	76bb      	strb	r3, [r7, #26]
 8001a8e:	e015      	b.n	8001abc <driverSWLTC6804WriteConfigRegisterB+0x218>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 8001a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a94:	1e5a      	subs	r2, r3, #1
 8001a96:	7eb8      	ldrb	r0, [r7, #26]
 8001a98:	7efb      	ldrb	r3, [r7, #27]
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	4419      	add	r1, r3
 8001a9e:	693c      	ldr	r4, [r7, #16]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4423      	add	r3, r4
 8001aaa:	4403      	add	r3, r0
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 8001ab0:	7efb      	ldrb	r3, [r7, #27]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	76fb      	strb	r3, [r7, #27]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001ab6:	7ebb      	ldrb	r3, [r7, #26]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	76bb      	strb	r3, [r7, #26]
 8001abc:	7eba      	ldrb	r2, [r7, #26]
 8001abe:	7e7b      	ldrb	r3, [r7, #25]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3e5      	bcc.n	8001a90 <driverSWLTC6804WriteConfigRegisterB+0x1ec>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8001ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac8:	1e5a      	subs	r2, r3, #1
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	7e7b      	ldrb	r3, [r7, #25]
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f830 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	813b      	strh	r3, [r7, #8]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001ae4:	893b      	ldrh	r3, [r7, #8]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	7efb      	ldrb	r3, [r7, #27]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001af4:	7efb      	ldrb	r3, [r7, #27]
 8001af6:	3301      	adds	r3, #1
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	893a      	ldrh	r2, [r7, #8]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8001b02:	7efb      	ldrb	r3, [r7, #27]
 8001b04:	3302      	adds	r3, #2
 8001b06:	76fb      	strb	r3, [r7, #27]
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1b7      	bne.n	8001a8a <driverSWLTC6804WriteConfigRegisterB+0x1e6>
  }

	driverSWLTC6804WakeIC();
 8001b1a:	f000 f8e0 	bl	8001cde <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 8001b1e:	7e3b      	ldrb	r3, [r7, #24]
 8001b20:	4619      	mov	r1, r3
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 f8b1 	bl	8001c8a <driverSWLTC6804Write>
  free(cmd);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f00b ff25 	bl	800d978 <free>
 8001b2e:	46ad      	mov	sp, r5
}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200004c0 	.word	0x200004c0

08001b40 <driverSWLTC6804CalcPEC15>:
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,enableMask,true);
	}
}

uint16_t driverSWLTC6804CalcPEC15(uint8_t len, uint8_t *data) {
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 8001b50:	2300      	movs	r3, #0
 8001b52:	737b      	strb	r3, [r7, #13]
 8001b54:	e018      	b.n	8001b88 <driverSWLTC6804CalcPEC15+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	09db      	lsrs	r3, r3, #7
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	7b7b      	ldrb	r3, [r7, #13]
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	440b      	add	r3, r1
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4053      	eors	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	897b      	ldrh	r3, [r7, #10]
 8001b76:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <driverSWLTC6804CalcPEC15+0x64>)
 8001b78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4053      	eors	r3, r2
 8001b80:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 8001b82:	7b7b      	ldrb	r3, [r7, #13]
 8001b84:	3301      	adds	r3, #1
 8001b86:	737b      	strb	r3, [r7, #13]
 8001b88:	7b7a      	ldrb	r2, [r7, #13]
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3e2      	bcc.n	8001b56 <driverSWLTC6804CalcPEC15+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	b29b      	uxth	r3, r3
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	08010ce8 	.word	0x08010ce8

08001ba8 <driverSWLTC6804ReadConfigRegister>:

int8_t driverSWLTC6804ReadConfigRegister(uint8_t total_ic, uint8_t r_config[][8]) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  const uint8_t BYTES_IN_REG = 8;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	753b      	strb	r3, [r7, #20]

  uint8_t cmd[4];
  uint8_t *rx_data;
  int8_t pec_error = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	75fb      	strb	r3, [r7, #23]
  uint16_t data_pec;
  uint16_t received_pec;

  rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f00b fed1 	bl	800d968 <malloc>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	613b      	str	r3, [r7, #16]

  cmd[0] = 0x00;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	723b      	strb	r3, [r7, #8]
  cmd[1] = 0x02;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	727b      	strb	r3, [r7, #9]
  cmd[2] = 0x2b;
 8001bd2:	232b      	movs	r3, #43	; 0x2b
 8001bd4:	72bb      	strb	r3, [r7, #10]
  cmd[3] = 0x0A;
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	72fb      	strb	r3, [r7, #11]

	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 8001bda:	7d3a      	ldrb	r2, [r7, #20]
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	fb12 f303 	smulbb	r3, r2, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f107 0008 	add.w	r0, r7, #8
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	2104      	movs	r1, #4
 8001bec:	f000 f85e 	bl	8001cac <driverSWLTC6804WriteRead>

  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75bb      	strb	r3, [r7, #22]
 8001bf4:	e03c      	b.n	8001c70 <driverSWLTC6804ReadConfigRegister+0xc8>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	757b      	strb	r3, [r7, #21]
 8001bfa:	e012      	b.n	8001c22 <driverSWLTC6804ReadConfigRegister+0x7a>
      r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8001bfc:	7d7a      	ldrb	r2, [r7, #21]
 8001bfe:	7dbb      	ldrb	r3, [r7, #22]
 8001c00:	7d39      	ldrb	r1, [r7, #20]
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1899      	adds	r1, r3, r2
 8001c0e:	7dbb      	ldrb	r3, [r7, #22]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	441a      	add	r2, r3
 8001c16:	7d7b      	ldrb	r3, [r7, #21]
 8001c18:	7809      	ldrb	r1, [r1, #0]
 8001c1a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 8001c1c:	7d7b      	ldrb	r3, [r7, #21]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	757b      	strb	r3, [r7, #21]
 8001c22:	7d7a      	ldrb	r2, [r7, #21]
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d3e8      	bcc.n	8001bfc <driverSWLTC6804ReadConfigRegister+0x54>
    }
    received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001c2a:	7dbb      	ldrb	r3, [r7, #22]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	799b      	ldrb	r3, [r3, #6]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	7dbb      	ldrb	r3, [r7, #22]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	440b      	add	r3, r1
 8001c42:	79db      	ldrb	r3, [r3, #7]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	81fb      	strh	r3, [r7, #14]
    data_pec = driverSWLTC6804CalcPEC15(6, &r_config[current_ic][0]);
 8001c4a:	7dbb      	ldrb	r3, [r7, #22]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	2006      	movs	r0, #6
 8001c56:	f7ff ff73 	bl	8001b40 <driverSWLTC6804CalcPEC15>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	81bb      	strh	r3, [r7, #12]
    if(received_pec != data_pec) {
 8001c5e:	89fa      	ldrh	r2, [r7, #14]
 8001c60:	89bb      	ldrh	r3, [r7, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <driverSWLTC6804ReadConfigRegister+0xc2>
      pec_error = -1;
 8001c66:	23ff      	movs	r3, #255	; 0xff
 8001c68:	75fb      	strb	r3, [r7, #23]
  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 8001c6a:	7dbb      	ldrb	r3, [r7, #22]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	75bb      	strb	r3, [r7, #22]
 8001c70:	7dba      	ldrb	r2, [r7, #22]
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3be      	bcc.n	8001bf6 <driverSWLTC6804ReadConfigRegister+0x4e>
    }
  }
  free(rx_data);
 8001c78:	6938      	ldr	r0, [r7, #16]
 8001c7a:	f00b fe7d 	bl	800d978 <free>
  return(pec_error);
 8001c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <driverSWLTC6804Write>:

// Coupling of drivers
void driverSWLTC6804Write(uint8_t *writeBytes, uint8_t writeLength) {
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
	driverHWSPI1Write(writeBytes,writeLength,GPIOA,GPIO_PIN_4);
 8001c96:	78f9      	ldrb	r1, [r7, #3]
 8001c98:	2310      	movs	r3, #16
 8001c9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff f83a 	bl	8000d18 <driverHWSPI1Write>
};
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <driverSWLTC6804WriteRead>:

// Coupling of drivers
void driverSWLTC6804WriteRead(uint8_t *writeBytes, uint8_t writeLength, uint8_t *readBytes, uint8_t readLength) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	460b      	mov	r3, r1
 8001cba:	72fb      	strb	r3, [r7, #11]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	72bb      	strb	r3, [r7, #10]
	driverHWSPI1WriteRead(writeBytes,writeLength,readBytes,readLength,GPIOA,GPIO_PIN_4);
 8001cc0:	7abb      	ldrb	r3, [r7, #10]
 8001cc2:	7af9      	ldrb	r1, [r7, #11]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	9201      	str	r2, [sp, #4]
 8001cc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ccc:	9200      	str	r2, [sp, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff f85f 	bl	8000d94 <driverHWSPI1WriteRead>
};
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <driverSWLTC6804WakeIC>:

void driverSWLTC6804WakeIC(void){
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
	driverSWLTC6804DelayMS(1);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff f8ba 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2110      	movs	r1, #16
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf0:	f003 fb38 	bl	8005364 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f7ff f8b1 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2110      	movs	r1, #16
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d02:	f003 fb2f 	bl	8005364 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff f8a8 	bl	8000e5c <driverSWLTC6804DelayMS>
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d1a:	4804      	ldr	r0, [pc, #16]	; (8001d2c <SELECT+0x1c>)
 8001d1c:	f003 fb22 	bl	8005364 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f002 f995 	bl	8004050 <HAL_Delay>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	48000400 	.word	0x48000400

08001d30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	4804      	ldr	r0, [pc, #16]	; (8001d4c <DESELECT+0x1c>)
 8001d3c:	f003 fb12 	bl	8005364 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f002 f985 	bl	8004050 <HAL_Delay>
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	48000400 	.word	0x48000400

08001d50 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d5a:	bf00      	nop
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <SPI_TxByte+0x30>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d1f8      	bne.n	8001d5c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001d6a:	1df9      	adds	r1, r7, #7
 8001d6c:	2364      	movs	r3, #100	; 0x64
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <SPI_TxByte+0x30>)
 8001d72:	f005 fa4e 	bl	8007212 <HAL_SPI_Transmit>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000530 	.word	0x20000530

08001d84 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d90:	bf00      	nop
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <SPI_TxBuffer+0x30>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d1f8      	bne.n	8001d92 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <SPI_TxBuffer+0x30>)
 8001da8:	f005 fa33 	bl	8007212 <HAL_SPI_Transmit>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000530 	.word	0x20000530

08001db8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001dbe:	23ff      	movs	r3, #255	; 0xff
 8001dc0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001dc2:	bf00      	nop
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <SPI_RxByte+0x34>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d1f8      	bne.n	8001dc4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001dd2:	1dba      	adds	r2, r7, #6
 8001dd4:	1df9      	adds	r1, r7, #7
 8001dd6:	2364      	movs	r3, #100	; 0x64
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <SPI_RxByte+0x34>)
 8001dde:	f005 fb86 	bl	80074ee <HAL_SPI_TransmitReceive>

	return data;
 8001de2:	79bb      	ldrb	r3, [r7, #6]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000530 	.word	0x20000530

08001df0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001df8:	f7ff ffde 	bl	8001db8 <SPI_RxByte>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	701a      	strb	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <SD_ReadyWait+0x30>)
 8001e14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e18:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001e1a:	f7ff ffcd 	bl	8001db8 <SPI_RxByte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2bff      	cmp	r3, #255	; 0xff
 8001e26:	d004      	beq.n	8001e32 <SD_ReadyWait+0x26>
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SD_ReadyWait+0x30>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f3      	bne.n	8001e1a <SD_ReadyWait+0xe>

	return res;
 8001e32:	79fb      	ldrb	r3, [r7, #7]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20002c6a 	.word	0x20002c6a

08001e40 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001e46:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001e4a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001e4c:	f7ff ff70 	bl	8001d30 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	e005      	b.n	8001e62 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001e56:	20ff      	movs	r0, #255	; 0xff
 8001e58:	f7ff ff7a 	bl	8001d50 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	ddf6      	ble.n	8001e56 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001e68:	f7ff ff52 	bl	8001d10 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001e80:	2395      	movs	r3, #149	; 0x95
 8001e82:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001e84:	463b      	mov	r3, r7
 8001e86:	2106      	movs	r1, #6
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff7b 	bl	8001d84 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e8e:	e002      	b.n	8001e96 <SD_PowerOn+0x56>
	{
		cnt--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e96:	f7ff ff8f 	bl	8001db8 <SPI_RxByte>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d002      	beq.n	8001ea6 <SD_PowerOn+0x66>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f4      	bne.n	8001e90 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001ea6:	f7ff ff43 	bl	8001d30 <DESELECT>
	SPI_TxByte(0XFF);
 8001eaa:	20ff      	movs	r0, #255	; 0xff
 8001eac:	f7ff ff50 	bl	8001d50 <SPI_TxByte>

	PowerFlag = 1;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <SD_PowerOn+0x80>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000214 	.word	0x20000214

08001ec4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <SD_PowerOff+0x14>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	20000214 	.word	0x20000214

08001edc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <SD_CheckPower+0x14>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000214 	.word	0x20000214

08001ef4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <SD_RxDataBlock+0x5c>)
 8001f00:	22c8      	movs	r2, #200	; 0xc8
 8001f02:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001f04:	f7ff ff58 	bl	8001db8 <SPI_RxByte>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d104      	bne.n	8001f1c <SD_RxDataBlock+0x28>
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <SD_RxDataBlock+0x5c>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f3      	bne.n	8001f04 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2bfe      	cmp	r3, #254	; 0xfe
 8001f20:	d001      	beq.n	8001f26 <SD_RxDataBlock+0x32>
 8001f22:	2300      	movs	r3, #0
 8001f24:	e00f      	b.n	8001f46 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <SPI_RxBytePtr>
	} while(len--);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	603a      	str	r2, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f4      	bne.n	8001f26 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001f3c:	f7ff ff3c 	bl	8001db8 <SPI_RxByte>
	SPI_RxByte();
 8001f40:	f7ff ff3a 	bl	8001db8 <SPI_RxByte>

	return TRUE;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20002c6c 	.word	0x20002c6c

08001f54 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001f64:	f7ff ff52 	bl	8001e0c <SD_ReadyWait>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2bff      	cmp	r3, #255	; 0xff
 8001f6c:	d001      	beq.n	8001f72 <SD_TxDataBlock+0x1e>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e02f      	b.n	8001fd2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff feeb 	bl	8001d50 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	2bfd      	cmp	r3, #253	; 0xfd
 8001f7e:	d020      	beq.n	8001fc2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fefd 	bl	8001d84 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001f8a:	f7ff ff15 	bl	8001db8 <SPI_RxByte>
		SPI_RxByte();
 8001f8e:	f7ff ff13 	bl	8001db8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001f92:	e00b      	b.n	8001fac <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001f94:	f7ff ff10 	bl	8001db8 <SPI_RxByte>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d006      	beq.n	8001fb4 <SD_TxDataBlock+0x60>
			i++;
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001fac:	7bbb      	ldrb	r3, [r7, #14]
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d9f0      	bls.n	8001f94 <SD_TxDataBlock+0x40>
 8001fb2:	e000      	b.n	8001fb6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001fb4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001fb6:	bf00      	nop
 8001fb8:	f7ff fefe 	bl	8001db8 <SPI_RxByte>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0fa      	beq.n	8001fb8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d101      	bne.n	8001fd0 <SD_TxDataBlock+0x7c>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	6039      	str	r1, [r7, #0]
 8001fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001fe6:	f7ff ff11 	bl	8001e0c <SD_ReadyWait>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d001      	beq.n	8001ff4 <SD_SendCmd+0x1a>
 8001ff0:	23ff      	movs	r3, #255	; 0xff
 8001ff2:	e042      	b.n	800207a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff feaa 	bl	8001d50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	0e1b      	lsrs	r3, r3, #24
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fea4 	bl	8001d50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	b2db      	uxtb	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fe9e 	bl	8001d50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fe98 	bl	8001d50 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fe93 	bl	8001d50 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d102      	bne.n	8002036 <SD_SendCmd+0x5c>
 8002030:	2395      	movs	r3, #149	; 0x95
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e007      	b.n	8002046 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b48      	cmp	r3, #72	; 0x48
 800203a:	d102      	bne.n	8002042 <SD_SendCmd+0x68>
 800203c:	2387      	movs	r3, #135	; 0x87
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <SD_SendCmd+0x6c>
	else crc = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe81 	bl	8001d50 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b4c      	cmp	r3, #76	; 0x4c
 8002052:	d101      	bne.n	8002058 <SD_SendCmd+0x7e>
 8002054:	f7ff feb0 	bl	8001db8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002058:	230a      	movs	r3, #10
 800205a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800205c:	f7ff feac 	bl	8001db8 <SPI_RxByte>
 8002060:	4603      	mov	r3, r0
 8002062:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002064:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da05      	bge.n	8002078 <SD_SendCmd+0x9e>
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	3b01      	subs	r3, #1
 8002070:	73bb      	strb	r3, [r7, #14]
 8002072:	7bbb      	ldrb	r3, [r7, #14]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f1      	bne.n	800205c <SD_SendCmd+0x82>

	return res;
 8002078:	7b7b      	ldrb	r3, [r7, #13]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <SD_disk_initialize+0x14>
 8002094:	2301      	movs	r3, #1
 8002096:	e0d6      	b.n	8002246 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002098:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <SD_disk_initialize+0x1cc>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <SD_disk_initialize+0x2a>
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <SD_disk_initialize+0x1cc>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	e0cb      	b.n	8002246 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80020ae:	f7ff fec7 	bl	8001e40 <SD_PowerOn>

	/* slave select */
	SELECT();
 80020b2:	f7ff fe2d 	bl	8001d10 <SELECT>

	/* check disk type */
	type = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80020ba:	2100      	movs	r1, #0
 80020bc:	2040      	movs	r0, #64	; 0x40
 80020be:	f7ff ff8c 	bl	8001fda <SD_SendCmd>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	f040 80a6 	bne.w	8002216 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80020ca:	4b62      	ldr	r3, [pc, #392]	; (8002254 <SD_disk_initialize+0x1d0>)
 80020cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020d0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80020d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80020d6:	2048      	movs	r0, #72	; 0x48
 80020d8:	f7ff ff7f 	bl	8001fda <SD_SendCmd>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d158      	bne.n	8002194 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e00c      	b.n	8002102 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80020e8:	7bfc      	ldrb	r4, [r7, #15]
 80020ea:	f7ff fe65 	bl	8001db8 <SPI_RxByte>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4423      	add	r3, r4
 80020f8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d9ef      	bls.n	80020e8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002108:	7abb      	ldrb	r3, [r7, #10]
 800210a:	2b01      	cmp	r3, #1
 800210c:	f040 8083 	bne.w	8002216 <SD_disk_initialize+0x192>
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	2baa      	cmp	r3, #170	; 0xaa
 8002114:	d17f      	bne.n	8002216 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002116:	2100      	movs	r1, #0
 8002118:	2077      	movs	r0, #119	; 0x77
 800211a:	f7ff ff5e 	bl	8001fda <SD_SendCmd>
 800211e:	4603      	mov	r3, r0
 8002120:	2b01      	cmp	r3, #1
 8002122:	d807      	bhi.n	8002134 <SD_disk_initialize+0xb0>
 8002124:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002128:	2069      	movs	r0, #105	; 0x69
 800212a:	f7ff ff56 	bl	8001fda <SD_SendCmd>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002134:	4b47      	ldr	r3, [pc, #284]	; (8002254 <SD_disk_initialize+0x1d0>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1eb      	bne.n	8002116 <SD_disk_initialize+0x92>
 800213e:	e000      	b.n	8002142 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002140:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002142:	4b44      	ldr	r3, [pc, #272]	; (8002254 <SD_disk_initialize+0x1d0>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d064      	beq.n	8002216 <SD_disk_initialize+0x192>
 800214c:	2100      	movs	r1, #0
 800214e:	207a      	movs	r0, #122	; 0x7a
 8002150:	f7ff ff43 	bl	8001fda <SD_SendCmd>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d15d      	bne.n	8002216 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e00c      	b.n	800217a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002160:	7bfc      	ldrb	r4, [r7, #15]
 8002162:	f7ff fe29 	bl	8001db8 <SPI_RxByte>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	4423      	add	r3, r4
 8002170:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d9ef      	bls.n	8002160 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002180:	7a3b      	ldrb	r3, [r7, #8]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SD_disk_initialize+0x10a>
 800218a:	230c      	movs	r3, #12
 800218c:	e000      	b.n	8002190 <SD_disk_initialize+0x10c>
 800218e:	2304      	movs	r3, #4
 8002190:	73bb      	strb	r3, [r7, #14]
 8002192:	e040      	b.n	8002216 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002194:	2100      	movs	r1, #0
 8002196:	2077      	movs	r0, #119	; 0x77
 8002198:	f7ff ff1f 	bl	8001fda <SD_SendCmd>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d808      	bhi.n	80021b4 <SD_disk_initialize+0x130>
 80021a2:	2100      	movs	r1, #0
 80021a4:	2069      	movs	r0, #105	; 0x69
 80021a6:	f7ff ff18 	bl	8001fda <SD_SendCmd>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d801      	bhi.n	80021b4 <SD_disk_initialize+0x130>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e000      	b.n	80021b6 <SD_disk_initialize+0x132>
 80021b4:	2301      	movs	r3, #1
 80021b6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d10e      	bne.n	80021dc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80021be:	2100      	movs	r1, #0
 80021c0:	2077      	movs	r0, #119	; 0x77
 80021c2:	f7ff ff0a 	bl	8001fda <SD_SendCmd>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d80e      	bhi.n	80021ea <SD_disk_initialize+0x166>
 80021cc:	2100      	movs	r1, #0
 80021ce:	2069      	movs	r0, #105	; 0x69
 80021d0:	f7ff ff03 	bl	8001fda <SD_SendCmd>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d107      	bne.n	80021ea <SD_disk_initialize+0x166>
 80021da:	e00d      	b.n	80021f8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80021dc:	2100      	movs	r1, #0
 80021de:	2041      	movs	r0, #65	; 0x41
 80021e0:	f7ff fefb 	bl	8001fda <SD_SendCmd>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <SD_disk_initialize+0x1d0>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e1      	bne.n	80021b8 <SD_disk_initialize+0x134>
 80021f4:	e000      	b.n	80021f8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80021f6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <SD_disk_initialize+0x1d0>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <SD_disk_initialize+0x18e>
 8002202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002206:	2050      	movs	r0, #80	; 0x50
 8002208:	f7ff fee7 	bl	8001fda <SD_SendCmd>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SD_disk_initialize+0x192>
 8002212:	2300      	movs	r3, #0
 8002214:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002216:	4a10      	ldr	r2, [pc, #64]	; (8002258 <SD_disk_initialize+0x1d4>)
 8002218:	7bbb      	ldrb	r3, [r7, #14]
 800221a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800221c:	f7ff fd88 	bl	8001d30 <DESELECT>
	SPI_RxByte();
 8002220:	f7ff fdca 	bl	8001db8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <SD_disk_initialize+0x1cc>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <SD_disk_initialize+0x1cc>)
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e001      	b.n	8002240 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800223c:	f7ff fe42 	bl	8001ec4 <SD_PowerOff>
	}

	return Stat;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <SD_disk_initialize+0x1cc>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000
 8002254:	20002c6c 	.word	0x20002c6c
 8002258:	20000213 	.word	0x20000213

0800225c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <SD_disk_status+0x14>
 800226c:	2301      	movs	r3, #1
 800226e:	e002      	b.n	8002276 <SD_disk_status+0x1a>
	return Stat;
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SD_disk_status+0x28>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000

08002288 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <SD_disk_read+0x1c>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <SD_disk_read+0x20>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e051      	b.n	800234c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <SD_disk_read+0xcc>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <SD_disk_read+0x32>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e048      	b.n	800234c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <SD_disk_read+0xd0>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <SD_disk_read+0x44>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	607b      	str	r3, [r7, #4]

	SELECT();
 80022cc:	f7ff fd20 	bl	8001d10 <SELECT>

	if (count == 1)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d111      	bne.n	80022fa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	2051      	movs	r0, #81	; 0x51
 80022da:	f7ff fe7e 	bl	8001fda <SD_SendCmd>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d129      	bne.n	8002338 <SD_disk_read+0xb0>
 80022e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e8:	68b8      	ldr	r0, [r7, #8]
 80022ea:	f7ff fe03 	bl	8001ef4 <SD_RxDataBlock>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d021      	beq.n	8002338 <SD_disk_read+0xb0>
 80022f4:	2300      	movs	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	e01e      	b.n	8002338 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	2052      	movs	r0, #82	; 0x52
 80022fe:	f7ff fe6c 	bl	8001fda <SD_SendCmd>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d117      	bne.n	8002338 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800230c:	68b8      	ldr	r0, [r7, #8]
 800230e:	f7ff fdf1 	bl	8001ef4 <SD_RxDataBlock>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <SD_disk_read+0xa6>
				buff += 512;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800231e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ed      	bne.n	8002308 <SD_disk_read+0x80>
 800232c:	e000      	b.n	8002330 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800232e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002330:	2100      	movs	r1, #0
 8002332:	204c      	movs	r0, #76	; 0x4c
 8002334:	f7ff fe51 	bl	8001fda <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002338:	f7ff fcfa 	bl	8001d30 <DESELECT>
	SPI_RxByte();
 800233c:	f7ff fd3c 	bl	8001db8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000000 	.word	0x20000000
 8002358:	20000213 	.word	0x20000213

0800235c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <SD_disk_write+0x1c>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <SD_disk_write+0x20>
 8002378:	2304      	movs	r3, #4
 800237a:	e06b      	b.n	8002454 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800237c:	4b37      	ldr	r3, [pc, #220]	; (800245c <SD_disk_write+0x100>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SD_disk_write+0x32>
 800238a:	2303      	movs	r3, #3
 800238c:	e062      	b.n	8002454 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800238e:	4b33      	ldr	r3, [pc, #204]	; (800245c <SD_disk_write+0x100>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <SD_disk_write+0x44>
 800239c:	2302      	movs	r3, #2
 800239e:	e059      	b.n	8002454 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80023a0:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <SD_disk_write+0x104>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <SD_disk_write+0x56>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	025b      	lsls	r3, r3, #9
 80023b0:	607b      	str	r3, [r7, #4]

	SELECT();
 80023b2:	f7ff fcad 	bl	8001d10 <SELECT>

	if (count == 1)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d110      	bne.n	80023de <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	2058      	movs	r0, #88	; 0x58
 80023c0:	f7ff fe0b 	bl	8001fda <SD_SendCmd>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d13a      	bne.n	8002440 <SD_disk_write+0xe4>
 80023ca:	21fe      	movs	r1, #254	; 0xfe
 80023cc:	68b8      	ldr	r0, [r7, #8]
 80023ce:	f7ff fdc1 	bl	8001f54 <SD_TxDataBlock>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d033      	beq.n	8002440 <SD_disk_write+0xe4>
			count = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	e030      	b.n	8002440 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <SD_disk_write+0x104>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80023ea:	2100      	movs	r1, #0
 80023ec:	2077      	movs	r0, #119	; 0x77
 80023ee:	f7ff fdf4 	bl	8001fda <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	2057      	movs	r0, #87	; 0x57
 80023f6:	f7ff fdf0 	bl	8001fda <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	2059      	movs	r0, #89	; 0x59
 80023fe:	f7ff fdec 	bl	8001fda <SD_SendCmd>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11b      	bne.n	8002440 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002408:	21fc      	movs	r1, #252	; 0xfc
 800240a:	68b8      	ldr	r0, [r7, #8]
 800240c:	f7ff fda2 	bl	8001f54 <SD_TxDataBlock>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <SD_disk_write+0xd0>
				buff += 512;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800241c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3b01      	subs	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ee      	bne.n	8002408 <SD_disk_write+0xac>
 800242a:	e000      	b.n	800242e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800242c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800242e:	21fd      	movs	r1, #253	; 0xfd
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fd8f 	bl	8001f54 <SD_TxDataBlock>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <SD_disk_write+0xe4>
			{
				count = 1;
 800243c:	2301      	movs	r3, #1
 800243e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002440:	f7ff fc76 	bl	8001d30 <DESELECT>
	SPI_RxByte();
 8002444:	f7ff fcb8 	bl	8001db8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000000 	.word	0x20000000
 8002460:	20000213 	.word	0x20000213

08002464 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	603a      	str	r2, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	460b      	mov	r3, r1
 8002472:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <SD_disk_ioctl+0x1e>
 800247e:	2304      	movs	r3, #4
 8002480:	e115      	b.n	80026ae <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	2b05      	cmp	r3, #5
 800248c:	d124      	bne.n	80024d8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d012      	beq.n	80024bc <SD_disk_ioctl+0x58>
 8002496:	2b02      	cmp	r3, #2
 8002498:	dc1a      	bgt.n	80024d0 <SD_disk_ioctl+0x6c>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <SD_disk_ioctl+0x40>
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d006      	beq.n	80024b0 <SD_disk_ioctl+0x4c>
 80024a2:	e015      	b.n	80024d0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80024a4:	f7ff fd0e 	bl	8001ec4 <SD_PowerOff>
			res = RES_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80024ae:	e0fc      	b.n	80026aa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80024b0:	f7ff fcc6 	bl	8001e40 <SD_PowerOn>
			res = RES_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80024ba:	e0f6      	b.n	80026aa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	1c5c      	adds	r4, r3, #1
 80024c0:	f7ff fd0c 	bl	8001edc <SD_CheckPower>
 80024c4:	4603      	mov	r3, r0
 80024c6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80024ce:	e0ec      	b.n	80026aa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80024d0:	2304      	movs	r3, #4
 80024d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024d6:	e0e8      	b.n	80026aa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024d8:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <SD_disk_ioctl+0x254>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SD_disk_ioctl+0x86>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0e1      	b.n	80026ae <SD_disk_ioctl+0x24a>

		SELECT();
 80024ea:	f7ff fc11 	bl	8001d10 <SELECT>

		switch (ctrl)
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b0d      	cmp	r3, #13
 80024f2:	f200 80cb 	bhi.w	800268c <SD_disk_ioctl+0x228>
 80024f6:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <SD_disk_ioctl+0x98>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	080025f7 	.word	0x080025f7
 8002500:	08002535 	.word	0x08002535
 8002504:	080025e7 	.word	0x080025e7
 8002508:	0800268d 	.word	0x0800268d
 800250c:	0800268d 	.word	0x0800268d
 8002510:	0800268d 	.word	0x0800268d
 8002514:	0800268d 	.word	0x0800268d
 8002518:	0800268d 	.word	0x0800268d
 800251c:	0800268d 	.word	0x0800268d
 8002520:	0800268d 	.word	0x0800268d
 8002524:	0800268d 	.word	0x0800268d
 8002528:	08002609 	.word	0x08002609
 800252c:	0800262d 	.word	0x0800262d
 8002530:	08002651 	.word	0x08002651
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002534:	2100      	movs	r1, #0
 8002536:	2049      	movs	r0, #73	; 0x49
 8002538:	f7ff fd4f 	bl	8001fda <SD_SendCmd>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 80a8 	bne.w	8002694 <SD_disk_ioctl+0x230>
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	2110      	movs	r1, #16
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fcd2 	bl	8001ef4 <SD_RxDataBlock>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 809e 	beq.w	8002694 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002558:	7b3b      	ldrb	r3, [r7, #12]
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10e      	bne.n	8002580 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002562:	7d7b      	ldrb	r3, [r7, #21]
 8002564:	b29a      	uxth	r2, r3
 8002566:	7d3b      	ldrb	r3, [r7, #20]
 8002568:	b29b      	uxth	r3, r3
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	4413      	add	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002576:	8bfb      	ldrh	r3, [r7, #30]
 8002578:	029a      	lsls	r2, r3, #10
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e02e      	b.n	80025de <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002580:	7c7b      	ldrb	r3, [r7, #17]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	b2da      	uxtb	r2, r3
 8002588:	7dbb      	ldrb	r3, [r7, #22]
 800258a:	09db      	lsrs	r3, r3, #7
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4413      	add	r3, r2
 8002590:	b2da      	uxtb	r2, r3
 8002592:	7d7b      	ldrb	r3, [r7, #21]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f003 0306 	and.w	r3, r3, #6
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4413      	add	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3302      	adds	r3, #2
 80025a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80025a8:	7d3b      	ldrb	r3, [r7, #20]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	7cbb      	ldrb	r3, [r7, #18]
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80025d0:	8bfa      	ldrh	r2, [r7, #30]
 80025d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025d6:	3b09      	subs	r3, #9
 80025d8:	409a      	lsls	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80025e4:	e056      	b.n	8002694 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ec:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025f4:	e055      	b.n	80026a2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80025f6:	f7ff fc09 	bl	8001e0c <SD_ReadyWait>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2bff      	cmp	r3, #255	; 0xff
 80025fe:	d14b      	bne.n	8002698 <SD_disk_ioctl+0x234>
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002606:	e047      	b.n	8002698 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002608:	2100      	movs	r1, #0
 800260a:	2049      	movs	r0, #73	; 0x49
 800260c:	f7ff fce5 	bl	8001fda <SD_SendCmd>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d142      	bne.n	800269c <SD_disk_ioctl+0x238>
 8002616:	2110      	movs	r1, #16
 8002618:	6a38      	ldr	r0, [r7, #32]
 800261a:	f7ff fc6b 	bl	8001ef4 <SD_RxDataBlock>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03b      	beq.n	800269c <SD_disk_ioctl+0x238>
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800262a:	e037      	b.n	800269c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800262c:	2100      	movs	r1, #0
 800262e:	204a      	movs	r0, #74	; 0x4a
 8002630:	f7ff fcd3 	bl	8001fda <SD_SendCmd>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d132      	bne.n	80026a0 <SD_disk_ioctl+0x23c>
 800263a:	2110      	movs	r1, #16
 800263c:	6a38      	ldr	r0, [r7, #32]
 800263e:	f7ff fc59 	bl	8001ef4 <SD_RxDataBlock>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d02b      	beq.n	80026a0 <SD_disk_ioctl+0x23c>
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800264e:	e027      	b.n	80026a0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002650:	2100      	movs	r1, #0
 8002652:	207a      	movs	r0, #122	; 0x7a
 8002654:	f7ff fcc1 	bl	8001fda <SD_SendCmd>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800265e:	2300      	movs	r3, #0
 8002660:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002664:	e00b      	b.n	800267e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002666:	6a3c      	ldr	r4, [r7, #32]
 8002668:	1c63      	adds	r3, r4, #1
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	f7ff fba4 	bl	8001db8 <SPI_RxByte>
 8002670:	4603      	mov	r3, r0
 8002672:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002678:	3301      	adds	r3, #1
 800267a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800267e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002682:	2b03      	cmp	r3, #3
 8002684:	d9ef      	bls.n	8002666 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800268c:	2304      	movs	r3, #4
 800268e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002692:	e006      	b.n	80026a2 <SD_disk_ioctl+0x23e>
			break;
 8002694:	bf00      	nop
 8002696:	e004      	b.n	80026a2 <SD_disk_ioctl+0x23e>
			break;
 8002698:	bf00      	nop
 800269a:	e002      	b.n	80026a2 <SD_disk_ioctl+0x23e>
			break;
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <SD_disk_ioctl+0x23e>
			break;
 80026a0:	bf00      	nop
		}

		DESELECT();
 80026a2:	f7ff fb45 	bl	8001d30 <DESELECT>
		SPI_RxByte();
 80026a6:	f7ff fb87 	bl	8001db8 <SPI_RxByte>
	}

	return res;
 80026aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	372c      	adds	r7, #44	; 0x2c
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <bufsize>:
cellMonitorCellsTypeDef cellVoltagesIndividual[18]; //18:Total no of cells possible
float packVoltage, packCurrent;

/*******************************************************************************/
int bufsize (char *buf)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	int i=0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80026c8:	e002      	b.n	80026d0 <bufsize+0x14>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f6      	bne.n	80026ca <bufsize+0xe>
	return i;
 80026dc:	68fb      	ldr	r3, [r7, #12]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <clear_buffer>:

void clear_buffer (void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	e007      	b.n	8002708 <clear_buffer+0x1c>
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <clear_buffer+0x34>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3301      	adds	r3, #1
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	dbf3      	blt.n	80026f8 <clear_buffer+0xc>
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000162c 	.word	0x2000162c

08002724 <send_uart>:

void send_uart (char *string)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fd fd4f 	bl	80001d0 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	b29a      	uxth	r2, r3
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <send_uart+0x2c>)
 8002742:	f005 fa99 	bl	8007c78 <HAL_UART_Transmit>
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20001ad4 	.word	0x20001ad4
 8002754:	00000000 	.word	0x00000000

08002758 <write_to_csvfile>:

void write_to_csvfile (void)
{
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b0ce      	sub	sp, #312	; 0x138
 800275e:	af2a      	add	r7, sp, #168	; 0xa8

		  //dummy_timer += 1;
		  //dummy_cell_votlages += 1;
		  //dummy_pack_voltage += 11;

		  dummy_pack_current += 0.1;
 8002760:	4ba1      	ldr	r3, [pc, #644]	; (80029e8 <write_to_csvfile+0x290>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd feef 	bl	8000548 <__aeabi_f2d>
 800276a:	a39d      	add	r3, pc, #628	; (adr r3, 80029e0 <write_to_csvfile+0x288>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd fd8c 	bl	800028c <__adddf3>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7fe fa34 	bl	8000be8 <__aeabi_d2f>
 8002780:	4603      	mov	r3, r0
 8002782:	4a99      	ldr	r2, [pc, #612]	; (80029e8 <write_to_csvfile+0x290>)
 8002784:	6013      	str	r3, [r2, #0]
		  dummy_temperature += 1.0;
 8002786:	4b99      	ldr	r3, [pc, #612]	; (80029ec <write_to_csvfile+0x294>)
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002794:	4b95      	ldr	r3, [pc, #596]	; (80029ec <write_to_csvfile+0x294>)
 8002796:	edc3 7a00 	vstr	s15, [r3]

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800279a:	2203      	movs	r2, #3
 800279c:	4994      	ldr	r1, [pc, #592]	; (80029f0 <write_to_csvfile+0x298>)
 800279e:	4895      	ldr	r0, [pc, #596]	; (80029f4 <write_to_csvfile+0x29c>)
 80027a0:	f009 fa5c 	bl	800bc5c <f_open>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b93      	ldr	r3, [pc, #588]	; (80029f8 <write_to_csvfile+0x2a0>)
 80027aa:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 80027ac:	4b91      	ldr	r3, [pc, #580]	; (80029f4 <write_to_csvfile+0x29c>)
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	330c      	adds	r3, #12
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	488e      	ldr	r0, [pc, #568]	; (80029f4 <write_to_csvfile+0x29c>)
 80027ba:	f00a fb1b 	bl	800cdf4 <f_lseek>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b8d      	ldr	r3, [pc, #564]	; (80029f8 <write_to_csvfile+0x2a0>)
 80027c4:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80027c6:	f001 fc37 	bl	8004038 <HAL_GetTick>
 80027ca:	4603      	mov	r3, r0
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe99 	bl	8000504 <__aeabi_ui2d>
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b89      	ldr	r3, [pc, #548]	; (80029fc <write_to_csvfile+0x2a4>)
 80027d8:	f7fe f838 	bl	800084c <__aeabi_ddiv>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80027e4:	4b86      	ldr	r3, [pc, #536]	; (8002a00 <write_to_csvfile+0x2a8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fead 	bl	8000548 <__aeabi_f2d>
 80027ee:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80027f2:	4b83      	ldr	r3, [pc, #524]	; (8002a00 <write_to_csvfile+0x2a8>)
 80027f4:	685b      	ldr	r3, [r3, #4]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fea6 	bl	8000548 <__aeabi_f2d>
 80027fc:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002800:	4b7f      	ldr	r3, [pc, #508]	; (8002a00 <write_to_csvfile+0x2a8>)
 8002802:	689b      	ldr	r3, [r3, #8]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fe9f 	bl	8000548 <__aeabi_f2d>
 800280a:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800280e:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <write_to_csvfile+0x2a8>)
 8002810:	68db      	ldr	r3, [r3, #12]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800281c:	4b78      	ldr	r3, [pc, #480]	; (8002a00 <write_to_csvfile+0x2a8>)
 800281e:	691b      	ldr	r3, [r3, #16]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd fe91 	bl	8000548 <__aeabi_f2d>
 8002826:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800282a:	4b75      	ldr	r3, [pc, #468]	; (8002a00 <write_to_csvfile+0x2a8>)
 800282c:	695b      	ldr	r3, [r3, #20]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe8a 	bl	8000548 <__aeabi_f2d>
 8002834:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002838:	4b71      	ldr	r3, [pc, #452]	; (8002a00 <write_to_csvfile+0x2a8>)
 800283a:	699b      	ldr	r3, [r3, #24]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fe83 	bl	8000548 <__aeabi_f2d>
 8002842:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002846:	4b6e      	ldr	r3, [pc, #440]	; (8002a00 <write_to_csvfile+0x2a8>)
 8002848:	69db      	ldr	r3, [r3, #28]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fe7c 	bl	8000548 <__aeabi_f2d>
 8002850:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <write_to_csvfile+0x2a8>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe75 	bl	8000548 <__aeabi_f2d>
 800285e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <write_to_csvfile+0x2a8>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe6e 	bl	8000548 <__aeabi_f2d>
 800286c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <write_to_csvfile+0x2a8>)
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fe67 	bl	8000548 <__aeabi_f2d>
 800287a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800287e:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <write_to_csvfile+0x2a8>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe60 	bl	8000548 <__aeabi_f2d>
 8002888:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800288c:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <write_to_csvfile+0x2a8>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fe59 	bl	8000548 <__aeabi_f2d>
 8002896:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current, dummy_temperature);
 800289a:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <write_to_csvfile+0x2a8>)
 800289c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe52 	bl	8000548 <__aeabi_f2d>
 80028a4:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current, dummy_temperature);
 80028a8:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <write_to_csvfile+0x2a8>)
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe4b 	bl	8000548 <__aeabi_f2d>
 80028b2:	e9c7 0104 	strd	r0, r1, [r7, #16]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current, dummy_temperature);
 80028b6:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <write_to_csvfile+0x2a8>)
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe44 	bl	8000548 <__aeabi_f2d>
 80028c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current, dummy_temperature);
 80028c4:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <write_to_csvfile+0x2a8>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe3d 	bl	8000548 <__aeabi_f2d>
 80028ce:	e9c7 0100 	strd	r0, r1, [r7]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current, dummy_temperature);
 80028d2:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <write_to_csvfile+0x2a8>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fe36 	bl	8000548 <__aeabi_f2d>
 80028dc:	4682      	mov	sl, r0
 80028de:	468b      	mov	fp, r1
 80028e0:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <write_to_csvfile+0x2ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe2f 	bl	8000548 <__aeabi_f2d>
 80028ea:	4680      	mov	r8, r0
 80028ec:	4689      	mov	r9, r1
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <write_to_csvfile+0x290>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe28 	bl	8000548 <__aeabi_f2d>
 80028f8:	4604      	mov	r4, r0
 80028fa:	460d      	mov	r5, r1
 80028fc:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <write_to_csvfile+0x294>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe21 	bl	8000548 <__aeabi_f2d>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800290e:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
 8002912:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
 8002916:	e9cd ab22 	strd	sl, fp, [sp, #136]	; 0x88
 800291a:	ed97 7b00 	vldr	d7, [r7]
 800291e:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002922:	ed97 7b02 	vldr	d7, [r7, #8]
 8002926:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800292a:	ed97 7b04 	vldr	d7, [r7, #16]
 800292e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002932:	ed97 7b06 	vldr	d7, [r7, #24]
 8002936:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800293a:	ed97 7b08 	vldr	d7, [r7, #32]
 800293e:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002942:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002946:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800294a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800294e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002952:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002956:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800295a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800295e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002962:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002966:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800296a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800296e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002972:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002976:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800297a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800297e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002982:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800298a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800298e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002992:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002996:	ed8d 7b02 	vstr	d7, [sp, #8]
 800299a:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800299e:	ed8d 7b00 	vstr	d7, [sp]
 80029a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029a6:	4918      	ldr	r1, [pc, #96]	; (8002a08 <write_to_csvfile+0x2b0>)
 80029a8:	4818      	ldr	r0, [pc, #96]	; (8002a0c <write_to_csvfile+0x2b4>)
 80029aa:	f00b fd27 	bl	800e3fc <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80029ae:	4817      	ldr	r0, [pc, #92]	; (8002a0c <write_to_csvfile+0x2b4>)
 80029b0:	f7ff fe84 	bl	80026bc <bufsize>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <write_to_csvfile+0x2b8>)
 80029ba:	4914      	ldr	r1, [pc, #80]	; (8002a0c <write_to_csvfile+0x2b4>)
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <write_to_csvfile+0x29c>)
 80029be:	f009 fe9d 	bl	800c6fc <f_write>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <write_to_csvfile+0x2a0>)
 80029c8:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 80029ca:	480a      	ldr	r0, [pc, #40]	; (80029f4 <write_to_csvfile+0x29c>)
 80029cc:	f00a f9e7 	bl	800cd9e <f_close>

		  clear_buffer();
 80029d0:	f7ff fe8c 	bl	80026ec <clear_buffer>
}
 80029d4:	bf00      	nop
 80029d6:	3790      	adds	r7, #144	; 0x90
 80029d8:	46bd      	mov	sp, r7
 80029da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029de:	bf00      	nop
 80029e0:	9999999a 	.word	0x9999999a
 80029e4:	3fb99999 	.word	0x3fb99999
 80029e8:	20001c28 	.word	0x20001c28
 80029ec:	20001a58 	.word	0x20001a58
 80029f0:	080106c8 	.word	0x080106c8
 80029f4:	20001c38 	.word	0x20001c38
 80029f8:	20001a64 	.word	0x20001a64
 80029fc:	408f4000 	.word	0x408f4000
 8002a00:	200004e8 	.word	0x200004e8
 8002a04:	20002c64 	.word	0x20002c64
 8002a08:	080106d4 	.word	0x080106d4
 8002a0c:	2000162c 	.word	0x2000162c
 8002a10:	20001a54 	.word	0x20001a54

08002a14 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f001 fe1c 	bl	8004660 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d102      	bne.n	8002a36 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
	}
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20001acc 	.word	0x20001acc
 8002a44:	20001c0c 	.word	0x20001c0c
 8002a48:	2000021c 	.word	0x2000021c

08002a4c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, uart_rx_data, 4);
 8002a54:	2204      	movs	r2, #4
 8002a56:	4905      	ldr	r1, [pc, #20]	; (8002a6c <HAL_UART_RxCpltCallback+0x20>)
 8002a58:	4805      	ldr	r0, [pc, #20]	; (8002a70 <HAL_UART_RxCpltCallback+0x24>)
 8002a5a:	f005 f9a1 	bl	8007da0 <HAL_UART_Receive_IT>
  uart_rx_flag = 1;
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_UART_RxCpltCallback+0x28>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20001c2c 	.word	0x20001c2c
 8002a70:	20001ad4 	.word	0x20001ad4
 8002a74:	20000218 	.word	0x20000218

08002a78 <set_time>:



void set_time(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x53;
 8002a94:	2353      	movs	r3, #83	; 0x53
 8002a96:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4812      	ldr	r0, [pc, #72]	; (8002af4 <set_time+0x7c>)
 8002aac:	f004 f833 	bl	8006b16 <HAL_RTC_SetTime>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <set_time+0x42>
	  {
	    Error_Handler();
 8002ab6:	f000 ff6f 	bl	8003998 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002aba:	2303      	movs	r3, #3
 8002abc:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JUNE;
 8002abe:	2306      	movs	r3, #6
 8002ac0:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x22;
 8002ac2:	2322      	movs	r3, #34	; 0x22
 8002ac4:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 8002ac6:	2322      	movs	r3, #34	; 0x22
 8002ac8:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002aca:	463b      	mov	r3, r7
 8002acc:	2201      	movs	r2, #1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4808      	ldr	r0, [pc, #32]	; (8002af4 <set_time+0x7c>)
 8002ad2:	f004 f93b 	bl	8006d4c <HAL_RTC_SetDate>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <set_time+0x68>
	  {
	    Error_Handler();
 8002adc:	f000 ff5c 	bl	8003998 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8002ae0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4803      	ldr	r0, [pc, #12]	; (8002af4 <set_time+0x7c>)
 8002ae8:	f004 fab6 	bl	8007058 <HAL_RTCEx_BKUPWrite>

	  /* USER CODE END RTC_Init 2 */
}
 8002aec:	bf00      	nop
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20001a2c 	.word	0x20001a2c

08002af8 <get_time>:


void get_time(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002afe:	463b      	mov	r3, r7
 8002b00:	2200      	movs	r2, #0
 8002b02:	4619      	mov	r1, r3
 8002b04:	4817      	ldr	r0, [pc, #92]	; (8002b64 <get_time+0x6c>)
 8002b06:	f004 f8c3 	bl	8006c90 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4814      	ldr	r0, [pc, #80]	; (8002b64 <get_time+0x6c>)
 8002b14:	f004 f9c1 	bl	8006e9a <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(buffer,"Time is: %02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002b18:	783b      	ldrb	r3, [r7, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	78bb      	ldrb	r3, [r7, #2]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	460b      	mov	r3, r1
 8002b26:	4910      	ldr	r1, [pc, #64]	; (8002b68 <get_time+0x70>)
 8002b28:	4810      	ldr	r0, [pc, #64]	; (8002b6c <get_time+0x74>)
 8002b2a:	f00b fc67 	bl	800e3fc <siprintf>
 send_uart(buffer);
 8002b2e:	480f      	ldr	r0, [pc, #60]	; (8002b6c <get_time+0x74>)
 8002b30:	f7ff fdf8 	bl	8002724 <send_uart>
 clear_buffer();
 8002b34:	f7ff fdda 	bl	80026ec <clear_buffer>
/* Display date Format: dd-mm-yy */
 sprintf(buffer,"Date is : %02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8002b38:	7dbb      	ldrb	r3, [r7, #22]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	7d7b      	ldrb	r3, [r7, #21]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4909      	ldr	r1, [pc, #36]	; (8002b70 <get_time+0x78>)
 8002b4c:	4807      	ldr	r0, [pc, #28]	; (8002b6c <get_time+0x74>)
 8002b4e:	f00b fc55 	bl	800e3fc <siprintf>
 send_uart(buffer);
 8002b52:	4806      	ldr	r0, [pc, #24]	; (8002b6c <get_time+0x74>)
 8002b54:	f7ff fde6 	bl	8002724 <send_uart>
 clear_buffer();
 8002b58:	f7ff fdc8 	bl	80026ec <clear_buffer>
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20001a2c 	.word	0x20001a2c
 8002b68:	08010748 	.word	0x08010748
 8002b6c:	2000162c 	.word	0x2000162c
 8002b70:	08010764 	.word	0x08010764

08002b74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //interrupt callback function for Charger detect
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI5 (PB5 Pin)
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d119      	bne.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x44>
    {
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002b84:	2120      	movs	r1, #32
 8002b86:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002b88:	f002 fbd4 	bl	8005334 <HAL_GPIO_ReadPin>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_GPIO_EXTI_Callback+0x32>
    	{
    		sprintf(buffer, "Charger detected\r\n");
 8002b92:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x50>)
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002b96:	f00b fc31 	bl	800e3fc <siprintf>
    		send_uart(buffer);
 8002b9a:	480b      	ldr	r0, [pc, #44]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002b9c:	f7ff fdc2 	bl	8002724 <send_uart>
    		clear_buffer();
 8002ba0:	f7ff fda4 	bl	80026ec <clear_buffer>
    		sprintf(buffer, "Charger has been disconnected\r\n");
    		send_uart(buffer);
    		clear_buffer();
    	}
    }
}
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x44>
    		sprintf(buffer, "Charger has been disconnected\r\n");
 8002ba6:	4909      	ldr	r1, [pc, #36]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x58>)
 8002ba8:	4807      	ldr	r0, [pc, #28]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002baa:	f00b fc27 	bl	800e3fc <siprintf>
    		send_uart(buffer);
 8002bae:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002bb0:	f7ff fdb8 	bl	8002724 <send_uart>
    		clear_buffer();
 8002bb4:	f7ff fd9a 	bl	80026ec <clear_buffer>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	08010780 	.word	0x08010780
 8002bc8:	2000162c 	.word	0x2000162c
 8002bcc:	08010794 	.word	0x08010794

08002bd0 <sd_init>:
		HAL_Delay(0.01);
	}
}

void sd_init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	  //mount SD card and check SD card mounting status
	  fresult = f_mount(&fs, "/", 1);
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	49b4      	ldr	r1, [pc, #720]	; (8002ea8 <sd_init+0x2d8>)
 8002bd8:	48b4      	ldr	r0, [pc, #720]	; (8002eac <sd_init+0x2dc>)
 8002bda:	f008 fff5 	bl	800bbc8 <f_mount>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	4bb3      	ldr	r3, [pc, #716]	; (8002eb0 <sd_init+0x2e0>)
 8002be4:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK)
 8002be6:	4bb2      	ldr	r3, [pc, #712]	; (8002eb0 <sd_init+0x2e0>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <sd_init+0x26>
	  	{
	  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8002bee:	48b1      	ldr	r0, [pc, #708]	; (8002eb4 <sd_init+0x2e4>)
 8002bf0:	f7ff fd98 	bl	8002724 <send_uart>
 8002bf4:	e002      	b.n	8002bfc <sd_init+0x2c>

	  	}
	  	else
	  	{
	  		send_uart("SD CARD mounted successfully...\r\n");
 8002bf6:	48b0      	ldr	r0, [pc, #704]	; (8002eb8 <sd_init+0x2e8>)
 8002bf8:	f7ff fd94 	bl	8002724 <send_uart>
	  	}

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	  	f_getfree("", &fre_clust, &pfs);
 8002bfc:	4aaf      	ldr	r2, [pc, #700]	; (8002ebc <sd_init+0x2ec>)
 8002bfe:	49b0      	ldr	r1, [pc, #704]	; (8002ec0 <sd_init+0x2f0>)
 8002c00:	48b0      	ldr	r0, [pc, #704]	; (8002ec4 <sd_init+0x2f4>)
 8002c02:	f00a fc2b 	bl	800d45c <f_getfree>

	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002c06:	4bad      	ldr	r3, [pc, #692]	; (8002ebc <sd_init+0x2ec>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0e:	3314      	adds	r3, #20
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1e9a      	subs	r2, r3, #2
 8002c14:	4ba9      	ldr	r3, [pc, #676]	; (8002ebc <sd_init+0x2ec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	fb03 f302 	mul.w	r3, r3, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fc6d 	bl	8000504 <__aeabi_ui2d>
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4ba6      	ldr	r3, [pc, #664]	; (8002ec8 <sd_init+0x2f8>)
 8002c30:	f7fd fce2 	bl	80005f8 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fd ffb4 	bl	8000ba8 <__aeabi_d2uiz>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4aa2      	ldr	r2, [pc, #648]	; (8002ecc <sd_init+0x2fc>)
 8002c44:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 8002c46:	4ba1      	ldr	r3, [pc, #644]	; (8002ecc <sd_init+0x2fc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	49a0      	ldr	r1, [pc, #640]	; (8002ed0 <sd_init+0x300>)
 8002c4e:	48a1      	ldr	r0, [pc, #644]	; (8002ed4 <sd_init+0x304>)
 8002c50:	f00b fbd4 	bl	800e3fc <siprintf>
	  	send_uart(buffer);
 8002c54:	489f      	ldr	r0, [pc, #636]	; (8002ed4 <sd_init+0x304>)
 8002c56:	f7ff fd65 	bl	8002724 <send_uart>
	  	clear_buffer();
 8002c5a:	f7ff fd47 	bl	80026ec <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002c5e:	4b97      	ldr	r3, [pc, #604]	; (8002ebc <sd_init+0x2ec>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c66:	3302      	adds	r3, #2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b94      	ldr	r3, [pc, #592]	; (8002ec0 <sd_init+0x2f0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fb03 f302 	mul.w	r3, r3, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fc45 	bl	8000504 <__aeabi_ui2d>
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <sd_init+0x2f8>)
 8002c80:	f7fd fcba 	bl	80005f8 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fd ff8c 	bl	8000ba8 <__aeabi_d2uiz>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a91      	ldr	r2, [pc, #580]	; (8002ed8 <sd_init+0x308>)
 8002c94:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 8002c96:	4b90      	ldr	r3, [pc, #576]	; (8002ed8 <sd_init+0x308>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	498f      	ldr	r1, [pc, #572]	; (8002edc <sd_init+0x30c>)
 8002c9e:	488d      	ldr	r0, [pc, #564]	; (8002ed4 <sd_init+0x304>)
 8002ca0:	f00b fbac 	bl	800e3fc <siprintf>
	  	send_uart(buffer);
 8002ca4:	488b      	ldr	r0, [pc, #556]	; (8002ed4 <sd_init+0x304>)
 8002ca6:	f7ff fd3d 	bl	8002724 <send_uart>
	  	clear_buffer();
 8002caa:	f7ff fd1f 	bl	80026ec <clear_buffer>


	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002cae:	2213      	movs	r2, #19
 8002cb0:	498b      	ldr	r1, [pc, #556]	; (8002ee0 <sd_init+0x310>)
 8002cb2:	488c      	ldr	r0, [pc, #560]	; (8002ee4 <sd_init+0x314>)
 8002cb4:	f008 ffd2 	bl	800bc5c <f_open>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <sd_init+0x2e0>)
 8002cbe:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 8002cc0:	4988      	ldr	r1, [pc, #544]	; (8002ee4 <sd_init+0x314>)
 8002cc2:	4889      	ldr	r0, [pc, #548]	; (8002ee8 <sd_init+0x318>)
 8002cc4:	f00a fd26 	bl	800d714 <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 8002cc8:	4886      	ldr	r0, [pc, #536]	; (8002ee4 <sd_init+0x314>)
 8002cca:	f00a f868 	bl	800cd9e <f_close>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b77      	ldr	r3, [pc, #476]	; (8002eb0 <sd_init+0x2e0>)
 8002cd4:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <sd_init+0x2e0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <sd_init+0x114>
	  	{
	  		send_uart ("File1.txt created and the data is written \r\n");
 8002cde:	4883      	ldr	r0, [pc, #524]	; (8002eec <sd_init+0x31c>)
 8002ce0:	f7ff fd20 	bl	8002724 <send_uart>
	  	}

	  	/* Open file to read */
	  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	497e      	ldr	r1, [pc, #504]	; (8002ee0 <sd_init+0x310>)
 8002ce8:	487e      	ldr	r0, [pc, #504]	; (8002ee4 <sd_init+0x314>)
 8002cea:	f008 ffb7 	bl	800bc5c <f_open>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <sd_init+0x2e0>)
 8002cf4:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	f_gets(buffer, f_size(&fil), &fil);
 8002cf6:	4b7b      	ldr	r3, [pc, #492]	; (8002ee4 <sd_init+0x314>)
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a78      	ldr	r2, [pc, #480]	; (8002ee4 <sd_init+0x314>)
 8002d02:	4619      	mov	r1, r3
 8002d04:	4873      	ldr	r0, [pc, #460]	; (8002ed4 <sd_init+0x304>)
 8002d06:	f00a fc8b 	bl	800d620 <f_gets>

	  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 8002d0a:	4879      	ldr	r0, [pc, #484]	; (8002ef0 <sd_init+0x320>)
 8002d0c:	f7ff fd0a 	bl	8002724 <send_uart>
	  	send_uart(buffer);
 8002d10:	4870      	ldr	r0, [pc, #448]	; (8002ed4 <sd_init+0x304>)
 8002d12:	f7ff fd07 	bl	8002724 <send_uart>
	  	send_uart("\r\n");
 8002d16:	4877      	ldr	r0, [pc, #476]	; (8002ef4 <sd_init+0x324>)
 8002d18:	f7ff fd04 	bl	8002724 <send_uart>
	  	/* Close file */
	  	f_close(&fil);
 8002d1c:	4871      	ldr	r0, [pc, #452]	; (8002ee4 <sd_init+0x314>)
 8002d1e:	f00a f83e 	bl	800cd9e <f_close>
	  	clear_buffer();
 8002d22:	f7ff fce3 	bl	80026ec <clear_buffer>
	  	/**************** The following operation is using f_write and f_read **************************/

	  	/* Create second file with read write access and open it */
	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8002d26:	220a      	movs	r2, #10
 8002d28:	4973      	ldr	r1, [pc, #460]	; (8002ef8 <sd_init+0x328>)
 8002d2a:	486e      	ldr	r0, [pc, #440]	; (8002ee4 <sd_init+0x314>)
 8002d2c:	f008 ff96 	bl	800bc5c <f_open>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <sd_init+0x2e0>)
 8002d36:	701a      	strb	r2, [r3, #0]

	  	/* Writing text */
	  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 8002d38:	4a66      	ldr	r2, [pc, #408]	; (8002ed4 <sd_init+0x304>)
 8002d3a:	4b70      	ldr	r3, [pc, #448]	; (8002efc <sd_init+0x32c>)
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	2351      	movs	r3, #81	; 0x51
 8002d42:	461a      	mov	r2, r3
 8002d44:	f00a fe20 	bl	800d988 <memcpy>

	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8002d48:	4862      	ldr	r0, [pc, #392]	; (8002ed4 <sd_init+0x304>)
 8002d4a:	f7ff fcb7 	bl	80026bc <bufsize>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <sd_init+0x330>)
 8002d54:	495f      	ldr	r1, [pc, #380]	; (8002ed4 <sd_init+0x304>)
 8002d56:	4863      	ldr	r0, [pc, #396]	; (8002ee4 <sd_init+0x314>)
 8002d58:	f009 fcd0 	bl	800c6fc <f_write>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <sd_init+0x2e0>)
 8002d62:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8002d64:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <sd_init+0x2e0>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <sd_init+0x1a2>
	  	{
	  		send_uart ("File2.txt created and the data is written \r\n");
 8002d6c:	4865      	ldr	r0, [pc, #404]	; (8002f04 <sd_init+0x334>)
 8002d6e:	f7ff fcd9 	bl	8002724 <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 8002d72:	485c      	ldr	r0, [pc, #368]	; (8002ee4 <sd_init+0x314>)
 8002d74:	f00a f813 	bl	800cd9e <f_close>
	  	// clearing buffer to show that result obtained is from the file
	  	clear_buffer();
 8002d78:	f7ff fcb8 	bl	80026ec <clear_buffer>
	  	/* Open second file to read */
	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	495e      	ldr	r1, [pc, #376]	; (8002ef8 <sd_init+0x328>)
 8002d80:	4858      	ldr	r0, [pc, #352]	; (8002ee4 <sd_init+0x314>)
 8002d82:	f008 ff6b 	bl	800bc5c <f_open>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <sd_init+0x2e0>)
 8002d8c:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK){
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <sd_init+0x2e0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <sd_init+0x1cc>
	  		send_uart ("file2.txt is open and the data is shown below\r\n");
 8002d96:	485c      	ldr	r0, [pc, #368]	; (8002f08 <sd_init+0x338>)
 8002d98:	f7ff fcc4 	bl	8002724 <send_uart>
	  	}

	  	/* Read data from the file
	  	 * Please see the function details for the arguments */
	  	f_read (&fil, buffer, f_size(&fil), &br);
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <sd_init+0x314>)
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da2:	330c      	adds	r3, #12
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <sd_init+0x33c>)
 8002da8:	494a      	ldr	r1, [pc, #296]	; (8002ed4 <sd_init+0x304>)
 8002daa:	484e      	ldr	r0, [pc, #312]	; (8002ee4 <sd_init+0x314>)
 8002dac:	f009 fa90 	bl	800c2d0 <f_read>
	  	send_uart(buffer);
 8002db0:	4848      	ldr	r0, [pc, #288]	; (8002ed4 <sd_init+0x304>)
 8002db2:	f7ff fcb7 	bl	8002724 <send_uart>
	  	send_uart("\r\n");
 8002db6:	484f      	ldr	r0, [pc, #316]	; (8002ef4 <sd_init+0x324>)
 8002db8:	f7ff fcb4 	bl	8002724 <send_uart>

	  	/* Close file */
	  	f_close(&fil);
 8002dbc:	4849      	ldr	r0, [pc, #292]	; (8002ee4 <sd_init+0x314>)
 8002dbe:	f009 ffee 	bl	800cd9e <f_close>

	  	clear_buffer();
 8002dc2:	f7ff fc93 	bl	80026ec <clear_buffer>


	  	/*********************UPDATING an existing file ***************************/

	  	/* Open the file with write access */
	  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	494b      	ldr	r1, [pc, #300]	; (8002ef8 <sd_init+0x328>)
 8002dca:	4846      	ldr	r0, [pc, #280]	; (8002ee4 <sd_init+0x314>)
 8002dcc:	f008 ff46 	bl	800bc5c <f_open>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <sd_init+0x2e0>)
 8002dd6:	701a      	strb	r2, [r3, #0]

	  	/* Move to offset to the end of the file */
	  	fresult = f_lseek(&fil, f_size(&fil));
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <sd_init+0x314>)
 8002dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dde:	330c      	adds	r3, #12
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	483f      	ldr	r0, [pc, #252]	; (8002ee4 <sd_init+0x314>)
 8002de6:	f00a f805 	bl	800cdf4 <f_lseek>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <sd_init+0x2e0>)
 8002df0:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <sd_init+0x2e0>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <sd_init+0x230>
	  	{
	  		send_uart ("About to update the file2.txt\r\n");
 8002dfa:	4845      	ldr	r0, [pc, #276]	; (8002f10 <sd_init+0x340>)
 8002dfc:	f7ff fc92 	bl	8002724 <send_uart>
	  	}

	  	/* write the string to the file */
	  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8002e00:	4938      	ldr	r1, [pc, #224]	; (8002ee4 <sd_init+0x314>)
 8002e02:	4844      	ldr	r0, [pc, #272]	; (8002f14 <sd_init+0x344>)
 8002e04:	f00a fc86 	bl	800d714 <f_puts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <sd_init+0x2e0>)
 8002e0e:	701a      	strb	r2, [r3, #0]
	  	f_close (&fil);
 8002e10:	4834      	ldr	r0, [pc, #208]	; (8002ee4 <sd_init+0x314>)
 8002e12:	f009 ffc4 	bl	800cd9e <f_close>
	  	clear_buffer();
 8002e16:	f7ff fc69 	bl	80026ec <clear_buffer>

	  	/* Open to read the file */
	  	fresult = f_open (&fil, "file2.txt", FA_READ);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4936      	ldr	r1, [pc, #216]	; (8002ef8 <sd_init+0x328>)
 8002e1e:	4831      	ldr	r0, [pc, #196]	; (8002ee4 <sd_init+0x314>)
 8002e20:	f008 ff1c 	bl	800bc5c <f_open>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <sd_init+0x2e0>)
 8002e2a:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <sd_init+0x314>)
 8002e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e32:	330c      	adds	r3, #12
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <sd_init+0x33c>)
 8002e38:	4926      	ldr	r1, [pc, #152]	; (8002ed4 <sd_init+0x304>)
 8002e3a:	482a      	ldr	r0, [pc, #168]	; (8002ee4 <sd_init+0x314>)
 8002e3c:	f009 fa48 	bl	800c2d0 <f_read>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <sd_init+0x2e0>)
 8002e46:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <sd_init+0x2e0>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <sd_init+0x292>
	  	{
	  		send_uart ("Below is the data from updated file2.txt\r\n");
 8002e50:	4831      	ldr	r0, [pc, #196]	; (8002f18 <sd_init+0x348>)
 8002e52:	f7ff fc67 	bl	8002724 <send_uart>
	  		send_uart(buffer);
 8002e56:	481f      	ldr	r0, [pc, #124]	; (8002ed4 <sd_init+0x304>)
 8002e58:	f7ff fc64 	bl	8002724 <send_uart>
	  		send_uart("\r\n");
 8002e5c:	4825      	ldr	r0, [pc, #148]	; (8002ef4 <sd_init+0x324>)
 8002e5e:	f7ff fc61 	bl	8002724 <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 8002e62:	4820      	ldr	r0, [pc, #128]	; (8002ee4 <sd_init+0x314>)
 8002e64:	f009 ff9b 	bl	800cd9e <f_close>

	  	clear_buffer();
 8002e68:	f7ff fc40 	bl	80026ec <clear_buffer>


	  	/*Create csv file to log random data*/
	  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002e6c:	2213      	movs	r2, #19
 8002e6e:	492b      	ldr	r1, [pc, #172]	; (8002f1c <sd_init+0x34c>)
 8002e70:	481c      	ldr	r0, [pc, #112]	; (8002ee4 <sd_init+0x314>)
 8002e72:	f008 fef3 	bl	800bc5c <f_open>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <sd_init+0x2e0>)
 8002e7c:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("Timer(s), Cell_Voltage_1,Cell_Voltage_2,Cell_Voltage_3,Cell_Voltage_4,Cell_Voltage_5,Cell_Voltage_6,Cell_Voltage_7,Cell_Voltage_8,Cell_Voltage_9,Cell_Voltage_10,Cell_Voltage_11,Cell_Voltage_12,Cell_Voltage_13,Cell_Voltage_14,Cell_Voltage_15,Cell_Voltage_16,Cell_Voltage_17,Cell_Voltage_18, Pack_Voltage, Pack_Current, Temperature\r\n ", &fil);
 8002e7e:	4919      	ldr	r1, [pc, #100]	; (8002ee4 <sd_init+0x314>)
 8002e80:	4827      	ldr	r0, [pc, #156]	; (8002f20 <sd_init+0x350>)
 8002e82:	f00a fc47 	bl	800d714 <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 8002e86:	4817      	ldr	r0, [pc, #92]	; (8002ee4 <sd_init+0x314>)
 8002e88:	f009 ff89 	bl	800cd9e <f_close>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <sd_init+0x2e0>)
 8002e92:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <sd_init+0x2e0>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <sd_init+0x2d2>
	  	{
	  		send_uart ("File3.csv created and header is written \r\n");
 8002e9c:	4821      	ldr	r0, [pc, #132]	; (8002f24 <sd_init+0x354>)
 8002e9e:	f7ff fc41 	bl	8002724 <send_uart>
	//  	if (fresult == FR_OK)
	//  	{
	//  		send_uart ("SD CARD UNMOUNTED successfully...\r\n");
	//  	}

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	080107b4 	.word	0x080107b4
 8002eac:	200005b4 	.word	0x200005b4
 8002eb0:	20001a64 	.word	0x20001a64
 8002eb4:	080107b8 	.word	0x080107b8
 8002eb8:	080107dc 	.word	0x080107dc
 8002ebc:	20001a60 	.word	0x20001a60
 8002ec0:	200004e0 	.word	0x200004e0
 8002ec4:	08010800 	.word	0x08010800
 8002ec8:	3fe00000 	.word	0x3fe00000
 8002ecc:	20001b58 	.word	0x20001b58
 8002ed0:	08010804 	.word	0x08010804
 8002ed4:	2000162c 	.word	0x2000162c
 8002ed8:	20001624 	.word	0x20001624
 8002edc:	08010820 	.word	0x08010820
 8002ee0:	0801083c 	.word	0x0801083c
 8002ee4:	20001c38 	.word	0x20001c38
 8002ee8:	08010848 	.word	0x08010848
 8002eec:	0801088c 	.word	0x0801088c
 8002ef0:	080108bc 	.word	0x080108bc
 8002ef4:	080108fc 	.word	0x080108fc
 8002ef8:	08010900 	.word	0x08010900
 8002efc:	0801090c 	.word	0x0801090c
 8002f00:	20001a54 	.word	0x20001a54
 8002f04:	08010960 	.word	0x08010960
 8002f08:	08010990 	.word	0x08010990
 8002f0c:	20001614 	.word	0x20001614
 8002f10:	080109c0 	.word	0x080109c0
 8002f14:	080109e0 	.word	0x080109e0
 8002f18:	08010a14 	.word	0x08010a14
 8002f1c:	080106c8 	.word	0x080106c8
 8002f20:	08010a40 	.word	0x08010a40
 8002f24:	08010b90 	.word	0x08010b90

08002f28 <CellMonitorsArrayTranslate>:

void CellMonitorsArrayTranslate(void)
{
 8002f28:	b490      	push	{r4, r7}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	uint8_t individualCellPointer = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]

  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 8002f32:	2300      	movs	r3, #0
 8002f34:	71bb      	strb	r3, [r7, #6]
 8002f36:	e048      	b.n	8002fca <CellMonitorsArrayTranslate+0xa2>
		if((modulePointer+1) % (cellMonitorICCount/1)==0 && modulePointer != 0){ // If end of series string, use lastICNoOfCells instead of noOfCellsPerModule
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d021      	beq.n	8002f82 <CellMonitorsArrayTranslate+0x5a>
			for(uint8_t modulePointerCell = 0; modulePointerCell < 18; modulePointerCell++) {
 8002f3e:	2300      	movs	r3, #0
 8002f40:	717b      	strb	r3, [r7, #5]
 8002f42:	e01a      	b.n	8002f7a <CellMonitorsArrayTranslate+0x52>
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 8002f44:	79ba      	ldrb	r2, [r7, #6]
 8002f46:	7978      	ldrb	r0, [r7, #5]
 8002f48:	79f9      	ldrb	r1, [r7, #7]
 8002f4a:	4c24      	ldr	r4, [pc, #144]	; (8002fdc <CellMonitorsArrayTranslate+0xb4>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4403      	add	r3, r0
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4423      	add	r3, r4
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4820      	ldr	r0, [pc, #128]	; (8002fe0 <CellMonitorsArrayTranslate+0xb8>)
 8002f5e:	00cb      	lsls	r3, r1, #3
 8002f60:	4403      	add	r3, r0
 8002f62:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 8002f64:	79fa      	ldrb	r2, [r7, #7]
 8002f66:	1c53      	adds	r3, r2, #1
 8002f68:	71fb      	strb	r3, [r7, #7]
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	491c      	ldr	r1, [pc, #112]	; (8002fe0 <CellMonitorsArrayTranslate+0xb8>)
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < 18; modulePointerCell++) {
 8002f74:	797b      	ldrb	r3, [r7, #5]
 8002f76:	3301      	adds	r3, #1
 8002f78:	717b      	strb	r3, [r7, #5]
 8002f7a:	797b      	ldrb	r3, [r7, #5]
 8002f7c:	2b11      	cmp	r3, #17
 8002f7e:	d9e1      	bls.n	8002f44 <CellMonitorsArrayTranslate+0x1c>
 8002f80:	e020      	b.n	8002fc4 <CellMonitorsArrayTranslate+0x9c>
			}
		}else{ // use noOfCellsPerModule as usually
			for(uint8_t modulePointerCell = 0; modulePointerCell < 18; modulePointerCell++) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	713b      	strb	r3, [r7, #4]
 8002f86:	e01a      	b.n	8002fbe <CellMonitorsArrayTranslate+0x96>
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 8002f88:	79ba      	ldrb	r2, [r7, #6]
 8002f8a:	7938      	ldrb	r0, [r7, #4]
 8002f8c:	79f9      	ldrb	r1, [r7, #7]
 8002f8e:	4c13      	ldr	r4, [pc, #76]	; (8002fdc <CellMonitorsArrayTranslate+0xb4>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4403      	add	r3, r0
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4423      	add	r3, r4
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <CellMonitorsArrayTranslate+0xb8>)
 8002fa2:	00cb      	lsls	r3, r1, #3
 8002fa4:	4403      	add	r3, r0
 8002fa6:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 8002fa8:	79fa      	ldrb	r2, [r7, #7]
 8002faa:	1c53      	adds	r3, r2, #1
 8002fac:	71fb      	strb	r3, [r7, #7]
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	490b      	ldr	r1, [pc, #44]	; (8002fe0 <CellMonitorsArrayTranslate+0xb8>)
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < 18; modulePointerCell++) {
 8002fb8:	793b      	ldrb	r3, [r7, #4]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	713b      	strb	r3, [r7, #4]
 8002fbe:	793b      	ldrb	r3, [r7, #4]
 8002fc0:	2b11      	cmp	r3, #17
 8002fc2:	d9e1      	bls.n	8002f88 <CellMonitorsArrayTranslate+0x60>
  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 8002fc4:	79bb      	ldrb	r3, [r7, #6]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	71bb      	strb	r3, [r7, #6]
 8002fca:	79bb      	ldrb	r3, [r7, #6]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0b3      	beq.n	8002f38 <CellMonitorsArrayTranslate+0x10>
			}
		};
	}
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc90      	pop	{r4, r7}
 8002fda:	4770      	bx	lr
 8002fdc:	200004e8 	.word	0x200004e8
 8002fe0:	20001b7c 	.word	0x20001b7c

08002fe4 <init_LTC6813>:


void init_LTC6813(void)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b093      	sub	sp, #76	; 0x4c
 8002fe8:	af08      	add	r7, sp, #32
	driverLTC6804ConfigStructTypedef configStruct;
	configStruct.GPIO1                    = true;																														// Do not pull down this pin (false = pull down)
 8002fea:	2301      	movs	r3, #1
 8002fec:	713b      	strb	r3, [r7, #4]
	configStruct.GPIO2                    = true;																														//
 8002fee:	2301      	movs	r3, #1
 8002ff0:	717b      	strb	r3, [r7, #5]
	configStruct.GPIO3                    = true;																														//
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	71bb      	strb	r3, [r7, #6]
	configStruct.GPIO4                    = true;																														//
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	71fb      	strb	r3, [r7, #7]
	configStruct.GPIO5                    = true;																														//
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	723b      	strb	r3, [r7, #8]
	configStruct.GPIO6                    = true;																														//
 8002ffe:	2301      	movs	r3, #1
 8003000:	727b      	strb	r3, [r7, #9]
	configStruct.GPIO7                    = true;																														//
 8003002:	2301      	movs	r3, #1
 8003004:	72bb      	strb	r3, [r7, #10]
	configStruct.GPIO8                    = true;																														//
 8003006:	2301      	movs	r3, #1
 8003008:	72fb      	strb	r3, [r7, #11]
	configStruct.GPIO9                    = true;																														//
 800300a:	2301      	movs	r3, #1
 800300c:	733b      	strb	r3, [r7, #12]
	configStruct.ReferenceON              = true;																														// Reference ON
 800300e:	2301      	movs	r3, #1
 8003010:	737b      	strb	r3, [r7, #13]
	configStruct.ADCOption                = true;																											  		// ADC Option register for configuration of over sampling ratio
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
	configStruct.noOfCells                = 18;			// Number of cells to monitor (that can cause interrupt)
 8003016:	2312      	movs	r3, #18
 8003018:	743b      	strb	r3, [r7, #16]
	configStruct.DisChargeEnableMask      = 0x00000000;	// Set enable state of discharge, 1=EnableDischarge, 0=DisableDischarge
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
	configStruct.DischargeTimout          = 0;		// Discharge timout value / limit
 800301e:	2300      	movs	r3, #0
 8003020:	763b      	strb	r3, [r7, #24]
	configStruct.CellUnderVoltageLimit    = 2.80f; // Undervoltage level, cell voltages under this limit will cause interrupt
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <init_LTC6813+0xec>)
 8003024:	61fb      	str	r3, [r7, #28]
	configStruct.CellOverVoltageLimit     = 4.20f;
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <init_LTC6813+0xf0>)
 8003028:	623b      	str	r3, [r7, #32]

	driverSWLTC6804Init(configStruct, 1, 18, 7,CELL_MON_LTC6813_1);
 800302a:	2303      	movs	r3, #3
 800302c:	9307      	str	r3, [sp, #28]
 800302e:	2307      	movs	r3, #7
 8003030:	9306      	str	r3, [sp, #24]
 8003032:	2312      	movs	r3, #18
 8003034:	9305      	str	r3, [sp, #20]
 8003036:	2301      	movs	r3, #1
 8003038:	9304      	str	r3, [sp, #16]
 800303a:	466c      	mov	r4, sp
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800304a:	f7fd ff1f 	bl	8000e8c <driverSWLTC6804Init>

	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003054:	e02c      	b.n	80030b0 <init_LTC6813+0xcc>
	{
		for(uint8_t cellPointer = 0; cellPointer < 18; cellPointer++)
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800305c:	e013      	b.n	8003086 <init_LTC6813+0xa2>
			cellModuleVoltages[modulePointer][cellPointer] = 0.0f;
 800305e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003062:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003066:	481c      	ldr	r0, [pc, #112]	; (80030d8 <init_LTC6813+0xf4>)
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	440b      	add	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4403      	add	r3, r0
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
		for(uint8_t cellPointer = 0; cellPointer < 18; cellPointer++)
 800307c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003080:	3301      	adds	r3, #1
 8003082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800308a:	2b11      	cmp	r3, #17
 800308c:	d9e7      	bls.n	800305e <init_LTC6813+0x7a>

		cellModuleBalanceResistorEnableMask[modulePointer] = 0;
 800308e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <init_LTC6813+0xf8>)
 8003094:	2100      	movs	r1, #0
 8003096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		cellModuleBalanceResistorEnableMaskTest[modulePointer] = 0;
 800309a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800309e:	4a10      	ldr	r2, [pc, #64]	; (80030e0 <init_LTC6813+0xfc>)
 80030a0:	2100      	movs	r1, #0
 80030a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 80030a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030aa:	3301      	adds	r3, #1
 80030ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ce      	beq.n	8003056 <init_LTC6813+0x72>
	}

	driverSWLTC6804ResetCellVoltageRegisters();
 80030b8:	f7fd ff78 	bl	8000fac <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	2003      	movs	r0, #3
 80030c2:	f7fd ff94 	bl	8000fee <driverSWLTC6804StartCellVoltageConversion>

}
 80030c6:	bf00      	nop
 80030c8:	372c      	adds	r7, #44	; 0x2c
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40333333 	.word	0x40333333
 80030d4:	40866666 	.word	0x40866666
 80030d8:	200004e8 	.word	0x200004e8
 80030dc:	200015e4 	.word	0x200015e4
 80030e0:	20001610 	.word	0x20001610

080030e4 <unit_test_LTC6813>:
void unit_test_LTC6813(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b0be      	sub	sp, #248	; 0xf8
 80030ea:	af22      	add	r7, sp, #136	; 0x88

	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);
	//HAL_Delay(300);
	if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 80030ec:	489a      	ldr	r0, [pc, #616]	; (8003358 <unit_test_LTC6813+0x274>)
 80030ee:	f7fd ffbf 	bl	8001070 <driverSWLTC6804ReadCellVoltagesArray>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8122 	beq.w	800333e <unit_test_LTC6813+0x25a>
	{
		CellMonitorsArrayTranslate();
 80030fa:	f7ff ff15 	bl	8002f28 <CellMonitorsArrayTranslate>
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80030fe:	4b96      	ldr	r3, [pc, #600]	; (8003358 <unit_test_LTC6813+0x274>)
 8003100:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa20 	bl	8000548 <__aeabi_f2d>
 8003108:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800310c:	4b92      	ldr	r3, [pc, #584]	; (8003358 <unit_test_LTC6813+0x274>)
 800310e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fa19 	bl	8000548 <__aeabi_f2d>
 8003116:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800311a:	4b8f      	ldr	r3, [pc, #572]	; (8003358 <unit_test_LTC6813+0x274>)
 800311c:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fa12 	bl	8000548 <__aeabi_f2d>
 8003124:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003128:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <unit_test_LTC6813+0x274>)
 800312a:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fa0b 	bl	8000548 <__aeabi_f2d>
 8003132:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003136:	4b88      	ldr	r3, [pc, #544]	; (8003358 <unit_test_LTC6813+0x274>)
 8003138:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fa04 	bl	8000548 <__aeabi_f2d>
 8003140:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003144:	4b84      	ldr	r3, [pc, #528]	; (8003358 <unit_test_LTC6813+0x274>)
 8003146:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd f9fd 	bl	8000548 <__aeabi_f2d>
 800314e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003152:	4b81      	ldr	r3, [pc, #516]	; (8003358 <unit_test_LTC6813+0x274>)
 8003154:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f9f6 	bl	8000548 <__aeabi_f2d>
 800315c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003160:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <unit_test_LTC6813+0x274>)
 8003162:	69db      	ldr	r3, [r3, #28]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9ef 	bl	8000548 <__aeabi_f2d>
 800316a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800316e:	4b7a      	ldr	r3, [pc, #488]	; (8003358 <unit_test_LTC6813+0x274>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f9e8 	bl	8000548 <__aeabi_f2d>
 8003178:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800317c:	4b76      	ldr	r3, [pc, #472]	; (8003358 <unit_test_LTC6813+0x274>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f9e1 	bl	8000548 <__aeabi_f2d>
 8003186:	e9c7 0108 	strd	r0, r1, [r7, #32]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <unit_test_LTC6813+0x274>)
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd f9da 	bl	8000548 <__aeabi_f2d>
 8003194:	e9c7 0106 	strd	r0, r1, [r7, #24]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003198:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <unit_test_LTC6813+0x274>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f9d3 	bl	8000548 <__aeabi_f2d>
 80031a2:	e9c7 0104 	strd	r0, r1, [r7, #16]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80031a6:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <unit_test_LTC6813+0x274>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f9cc 	bl	8000548 <__aeabi_f2d>
 80031b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80031b4:	4b68      	ldr	r3, [pc, #416]	; (8003358 <unit_test_LTC6813+0x274>)
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f9c5 	bl	8000548 <__aeabi_f2d>
 80031be:	e9c7 0100 	strd	r0, r1, [r7]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <unit_test_LTC6813+0x274>)
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9be 	bl	8000548 <__aeabi_f2d>
 80031cc:	4682      	mov	sl, r0
 80031ce:	468b      	mov	fp, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80031d0:	4b61      	ldr	r3, [pc, #388]	; (8003358 <unit_test_LTC6813+0x274>)
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f9b7 	bl	8000548 <__aeabi_f2d>
 80031da:	4680      	mov	r8, r0
 80031dc:	4689      	mov	r9, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80031de:	4b5e      	ldr	r3, [pc, #376]	; (8003358 <unit_test_LTC6813+0x274>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f9b0 	bl	8000548 <__aeabi_f2d>
 80031e8:	4604      	mov	r4, r0
 80031ea:	460d      	mov	r5, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80031ec:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <unit_test_LTC6813+0x274>)
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd f9a9 	bl	8000548 <__aeabi_f2d>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80031fe:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8003202:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8003206:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 800320a:	ed97 7b00 	vldr	d7, [r7]
 800320e:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003212:	ed97 7b02 	vldr	d7, [r7, #8]
 8003216:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800321a:	ed97 7b04 	vldr	d7, [r7, #16]
 800321e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003222:	ed97 7b06 	vldr	d7, [r7, #24]
 8003226:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800322a:	ed97 7b08 	vldr	d7, [r7, #32]
 800322e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003232:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003236:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800323a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800323e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003242:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003246:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800324a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800324e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003252:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003256:	ed8d 7b06 	vstr	d7, [sp, #24]
 800325a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800325e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003262:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003266:	ed8d 7b02 	vstr	d7, [sp, #8]
 800326a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800326e:	ed8d 7b00 	vstr	d7, [sp]
 8003272:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003276:	4939      	ldr	r1, [pc, #228]	; (800335c <unit_test_LTC6813+0x278>)
 8003278:	4839      	ldr	r0, [pc, #228]	; (8003360 <unit_test_LTC6813+0x27c>)
 800327a:	f00b f8bf 	bl	800e3fc <siprintf>
		send_uart(buffer);
 800327e:	4838      	ldr	r0, [pc, #224]	; (8003360 <unit_test_LTC6813+0x27c>)
 8003280:	f7ff fa50 	bl	8002724 <send_uart>
		clear_buffer();
 8003284:	f7ff fa32 	bl	80026ec <clear_buffer>
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003288:	4b33      	ldr	r3, [pc, #204]	; (8003358 <unit_test_LTC6813+0x274>)
 800328a:	ed93 7a00 	vldr	s14, [r3]
 800328e:	4b32      	ldr	r3, [pc, #200]	; (8003358 <unit_test_LTC6813+0x274>)
 8003290:	edd3 7a01 	vldr	s15, [r3, #4]
 8003294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003298:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <unit_test_LTC6813+0x274>)
 800329a:	edd3 7a02 	vldr	s15, [r3, #8]
 800329e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <unit_test_LTC6813+0x274>)
 80032a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80032a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ac:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <unit_test_LTC6813+0x274>)
 80032ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80032b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <unit_test_LTC6813+0x274>)
 80032b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80032bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c0:	4b25      	ldr	r3, [pc, #148]	; (8003358 <unit_test_LTC6813+0x274>)
 80032c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80032c6:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <unit_test_LTC6813+0x274>)
 80032cc:	edd3 7a07 	vldr	s15, [r3, #28]
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 80032d0:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <unit_test_LTC6813+0x274>)
 80032d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80032da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032de:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <unit_test_LTC6813+0x274>)
 80032e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <unit_test_LTC6813+0x274>)
 80032ea:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80032ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <unit_test_LTC6813+0x274>)
 80032f4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80032f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <unit_test_LTC6813+0x274>)
 80032fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003302:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <unit_test_LTC6813+0x274>)
 8003308:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 800330c:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <unit_test_LTC6813+0x274>)
 8003312:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800331a:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <unit_test_LTC6813+0x274>)
 800331c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <unit_test_LTC6813+0x274>)
 8003326:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800332a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <unit_test_LTC6813+0x274>)
 8003330:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <unit_test_LTC6813+0x280>)
 800333a:	edc3 7a00 	vstr	s15, [r3]
	}

	driverSWLTC6804ResetCellVoltageRegisters();
 800333e:	f7fd fe35 	bl	8000fac <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	2003      	movs	r0, #3
 8003348:	f7fd fe51 	bl	8000fee <driverSWLTC6804StartCellVoltageConversion>
}
 800334c:	bf00      	nop
 800334e:	3770      	adds	r7, #112	; 0x70
 8003350:	46bd      	mov	sp, r7
 8003352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003356:	bf00      	nop
 8003358:	200004e8 	.word	0x200004e8
 800335c:	08010bbc 	.word	0x08010bbc
 8003360:	2000162c 	.word	0x2000162c
 8003364:	20002c64 	.word	0x20002c64

08003368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800336e:	f000 fe09 	bl	8003f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003372:	f000 f8c3 	bl	80034fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003376:	f000 fa8d 	bl	8003894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800337a:	f000 fa5b 	bl	8003834 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800337e:	f000 fa1b 	bl	80037b8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003382:	f005 fe7f 	bl	8009084 <MX_FATFS_Init>
  MX_CAN_Init();
 8003386:	f000 f925 	bl	80035d4 <MX_CAN_Init>
  MX_RTC_Init();
 800338a:	f000 f977 	bl	800367c <MX_RTC_Init>
  MX_SPI1_Init();
 800338e:	f000 f9d5 	bl	800373c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  //HAL_Delay(250);

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 8003392:	494b      	ldr	r1, [pc, #300]	; (80034c0 <main+0x158>)
 8003394:	484b      	ldr	r0, [pc, #300]	; (80034c4 <main+0x15c>)
 8003396:	f00b f831 	bl	800e3fc <siprintf>
  send_uart(buffer);
 800339a:	484a      	ldr	r0, [pc, #296]	; (80034c4 <main+0x15c>)
 800339c:	f7ff f9c2 	bl	8002724 <send_uart>
  clear_buffer();
 80033a0:	f7ff f9a4 	bl	80026ec <clear_buffer>

  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2)
 80033a4:	2101      	movs	r1, #1
 80033a6:	4848      	ldr	r0, [pc, #288]	; (80034c8 <main+0x160>)
 80033a8:	f003 fe70 	bl	800708c <HAL_RTCEx_BKUPRead>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d001      	beq.n	80033ba <main+0x52>
  	  {
	  	  set_time(); //set RTC init value
 80033b6:	f7ff fb5f 	bl	8002a78 <set_time>
  	  }

  sd_init();
 80033ba:	f7ff fc09 	bl	8002bd0 <sd_init>

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 80033be:	4843      	ldr	r0, [pc, #268]	; (80034cc <main+0x164>)
 80033c0:	f001 f82f 	bl	8004422 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 80033c4:	2102      	movs	r1, #2
 80033c6:	4841      	ldr	r0, [pc, #260]	; (80034cc <main+0x164>)
 80033c8:	f001 fa5c 	bl	8004884 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 80033cc:	4b40      	ldr	r3, [pc, #256]	; (80034d0 <main+0x168>)
 80033ce:	2202      	movs	r2, #2
 80033d0:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <main+0x168>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80033d8:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <main+0x168>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 80033de:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <main+0x168>)
 80033e0:	f240 4246 	movw	r2, #1094	; 0x446
 80033e4:	601a      	str	r2, [r3, #0]
  //populate data to Txdata bytes
  TxData[0] = 11;
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <main+0x16c>)
 80033e8:	220b      	movs	r2, #11
 80033ea:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <main+0x16c>)
 80033ee:	2264      	movs	r2, #100	; 0x64
 80033f0:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

  /*UART2 Interrupt*/
  HAL_UART_Receive_IT (&huart2, uart_rx_data, 4); //set interrupt for uart rx
 80033f2:	2204      	movs	r2, #4
 80033f4:	4938      	ldr	r1, [pc, #224]	; (80034d8 <main+0x170>)
 80033f6:	4839      	ldr	r0, [pc, #228]	; (80034dc <main+0x174>)
 80033f8:	f004 fcd2 	bl	8007da0 <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 80033fc:	2201      	movs	r2, #1
 80033fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003402:	4837      	ldr	r0, [pc, #220]	; (80034e0 <main+0x178>)
 8003404:	f001 ffae 	bl	8005364 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8003408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800340c:	f000 fe20 	bl	8004050 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); //turn OFF precharge relay
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003416:	4832      	ldr	r0, [pc, #200]	; (80034e0 <main+0x178>)
 8003418:	f001 ffa4 	bl	8005364 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800341c:	20fa      	movs	r0, #250	; 0xfa
 800341e:	f000 fe17 	bl	8004050 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //turn ON HV+ contactor
 8003422:	2201      	movs	r2, #1
 8003424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003428:	482d      	ldr	r0, [pc, #180]	; (80034e0 <main+0x178>)
 800342a:	f001 ff9b 	bl	8005364 <HAL_GPIO_WritePin>

  	//TO DO:add LTC6811 library files/use driverSWLTC6804 functions
  //wakeup_sleep(1);
  //wakeup_idle(1);
  init_LTC6813();
 800342e:	f7ff fdd9 	bl	8002fe4 <init_LTC6813>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive (&huart2, Rx_data, 4, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8003432:	2108      	movs	r1, #8
 8003434:	482a      	ldr	r0, [pc, #168]	; (80034e0 <main+0x178>)
 8003436:	f001 ffad 	bl	8005394 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800343a:	20fa      	movs	r0, #250	; 0xfa
 800343c:	f000 fe08 	bl	8004050 <HAL_Delay>
	  //send CAN message // TO DO:check CAN message reception on BluePill
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <main+0x17c>)
 8003442:	4a24      	ldr	r2, [pc, #144]	; (80034d4 <main+0x16c>)
 8003444:	4922      	ldr	r1, [pc, #136]	; (80034d0 <main+0x168>)
 8003446:	4821      	ldr	r0, [pc, #132]	; (80034cc <main+0x164>)
 8003448:	f001 f82f 	bl	80044aa <HAL_CAN_AddTxMessage>

	  //wakeup_idle(1);
	  unit_test_LTC6813();
 800344c:	f7ff fe4a 	bl	80030e4 <unit_test_LTC6813>

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <main+0x180>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d010      	beq.n	800347a <main+0x112>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <main+0x184>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <main+0x184>)
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	4923      	ldr	r1, [pc, #140]	; (80034f0 <main+0x188>)
 8003464:	4817      	ldr	r0, [pc, #92]	; (80034c4 <main+0x15c>)
 8003466:	f00a ffc9 	bl	800e3fc <siprintf>
		  send_uart(buffer);
 800346a:	4816      	ldr	r0, [pc, #88]	; (80034c4 <main+0x15c>)
 800346c:	f7ff f95a 	bl	8002724 <send_uart>
		  clear_buffer();
 8003470:	f7ff f93c 	bl	80026ec <clear_buffer>
		  CAN_data_checkFlag = 0;
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <main+0x180>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  }

	  if(uart_rx_flag)
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <main+0x18c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <main+0x146>
	  {
		  sprintf(buffer, "RX Message is: %c, %c, %c\r\n", uart_rx_data[0], uart_rx_data[1], uart_rx_data[2]);
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <main+0x170>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <main+0x170>)
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	4619      	mov	r1, r3
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <main+0x170>)
 8003490:	789b      	ldrb	r3, [r3, #2]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	460b      	mov	r3, r1
 8003496:	4918      	ldr	r1, [pc, #96]	; (80034f8 <main+0x190>)
 8003498:	480a      	ldr	r0, [pc, #40]	; (80034c4 <main+0x15c>)
 800349a:	f00a ffaf 	bl	800e3fc <siprintf>
		  send_uart(buffer);
 800349e:	4809      	ldr	r0, [pc, #36]	; (80034c4 <main+0x15c>)
 80034a0:	f7ff f940 	bl	8002724 <send_uart>
		  clear_buffer();
 80034a4:	f7ff f922 	bl	80026ec <clear_buffer>
		  uart_rx_flag = 0;
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <main+0x18c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

	  }

	  get_time();  //print RTC
 80034ae:	f7ff fb23 	bl	8002af8 <get_time>
	  write_to_csvfile();
 80034b2:	f7ff f951 	bl	8002758 <write_to_csvfile>
	  HAL_Delay(250);
 80034b6:	20fa      	movs	r0, #250	; 0xfa
 80034b8:	f000 fdca 	bl	8004050 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 80034bc:	e7b9      	b.n	8003432 <main+0xca>
 80034be:	bf00      	nop
 80034c0:	08010c34 	.word	0x08010c34
 80034c4:	2000162c 	.word	0x2000162c
 80034c8:	20001a2c 	.word	0x20001a2c
 80034cc:	200015e8 	.word	0x200015e8
 80034d0:	20001b64 	.word	0x20001b64
 80034d4:	20001a4c 	.word	0x20001a4c
 80034d8:	20001c2c 	.word	0x20001c2c
 80034dc:	20001ad4 	.word	0x20001ad4
 80034e0:	48000400 	.word	0x48000400
 80034e4:	20001a5c 	.word	0x20001a5c
 80034e8:	2000021c 	.word	0x2000021c
 80034ec:	20001acc 	.word	0x20001acc
 80034f0:	08010c5c 	.word	0x08010c5c
 80034f4:	20000218 	.word	0x20000218
 80034f8:	08010c84 	.word	0x08010c84

080034fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b09e      	sub	sp, #120	; 0x78
 8003500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003502:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003506:	2228      	movs	r2, #40	; 0x28
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f00a fa4a 	bl	800d9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003520:	463b      	mov	r3, r7
 8003522:	223c      	movs	r2, #60	; 0x3c
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f00a fa3c 	bl	800d9a4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800352c:	f001 ff64 	bl	80053f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003530:	4b26      	ldr	r3, [pc, #152]	; (80035cc <SystemClock_Config+0xd0>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <SystemClock_Config+0xd0>)
 8003536:	f023 0318 	bic.w	r3, r3, #24
 800353a:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800353c:	2305      	movs	r3, #5
 800353e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003544:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003546:	2300      	movs	r3, #0
 8003548:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800354a:	2301      	movs	r3, #1
 800354c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800354e:	2301      	movs	r3, #1
 8003550:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003552:	2302      	movs	r3, #2
 8003554:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800355a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800355c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003560:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003562:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003566:	4618      	mov	r0, r3
 8003568:	f001 ff56 	bl	8005418 <HAL_RCC_OscConfig>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003572:	f000 fa11 	bl	8003998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003576:	230f      	movs	r3, #15
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800357a:	2302      	movs	r3, #2
 800357c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800357e:	2300      	movs	r3, #0
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003588:	2300      	movs	r3, #0
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800358c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003590:	2102      	movs	r1, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f002 fe48 	bl	8006228 <HAL_RCC_ClockConfig>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800359e:	f000 f9fb 	bl	8003998 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <SystemClock_Config+0xd4>)
 80035a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ae:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035b0:	463b      	mov	r3, r7
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 f86e 	bl	8006694 <HAL_RCCEx_PeriphCLKConfig>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80035be:	f000 f9eb 	bl	8003998 <Error_Handler>
  }
}
 80035c2:	bf00      	nop
 80035c4:	3778      	adds	r7, #120	; 0x78
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	00010002 	.word	0x00010002

080035d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <MX_CAN_Init+0xa0>)
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <MX_CAN_Init+0xa4>)
 80035de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <MX_CAN_Init+0xa0>)
 80035e2:	2212      	movs	r2, #18
 80035e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <MX_CAN_Init+0xa0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <MX_CAN_Init+0xa0>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <MX_CAN_Init+0xa0>)
 80035f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <MX_CAN_Init+0xa0>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <MX_CAN_Init+0xa0>)
 8003602:	2200      	movs	r2, #0
 8003604:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <MX_CAN_Init+0xa0>)
 8003608:	2200      	movs	r2, #0
 800360a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <MX_CAN_Init+0xa0>)
 800360e:	2200      	movs	r2, #0
 8003610:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <MX_CAN_Init+0xa0>)
 8003614:	2200      	movs	r2, #0
 8003616:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <MX_CAN_Init+0xa0>)
 800361a:	2200      	movs	r2, #0
 800361c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <MX_CAN_Init+0xa0>)
 8003620:	2200      	movs	r2, #0
 8003622:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <MX_CAN_Init+0xa0>)
 8003626:	f000 fd37 	bl	8004098 <HAL_CAN_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003630:	f000 f9b2 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8003634:	2301      	movs	r3, #1
 8003636:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 8003638:	230b      	movs	r3, #11
 800363a:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 8003640:	f242 0360 	movw	r3, #8288	; 0x2060
 8003644:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 800364a:	f242 0360 	movw	r3, #8288	; 0x2060
 800364e:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003658:	2301      	movs	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 8003660:	463b      	mov	r3, r7
 8003662:	4619      	mov	r1, r3
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <MX_CAN_Init+0xa0>)
 8003666:	f000 fe12 	bl	800428e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800366a:	bf00      	nop
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200015e8 	.word	0x200015e8
 8003678:	40006400 	.word	0x40006400

0800367c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003690:	2300      	movs	r3, #0
 8003692:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <MX_RTC_Init+0xb8>)
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <MX_RTC_Init+0xbc>)
 8003698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <MX_RTC_Init+0xb8>)
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <MX_RTC_Init+0xb8>)
 80036a2:	227f      	movs	r2, #127	; 0x7f
 80036a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036a6:	4b23      	ldr	r3, [pc, #140]	; (8003734 <MX_RTC_Init+0xb8>)
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <MX_RTC_Init+0xb8>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <MX_RTC_Init+0xb8>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036b8:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <MX_RTC_Init+0xb8>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036be:	481d      	ldr	r0, [pc, #116]	; (8003734 <MX_RTC_Init+0xb8>)
 80036c0:	f003 f998 	bl	80069f4 <HAL_RTC_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80036ca:	f000 f965 	bl	8003998 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x23;
 80036d2:	2323      	movs	r3, #35	; 0x23
 80036d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	2201      	movs	r2, #1
 80036e6:	4619      	mov	r1, r3
 80036e8:	4812      	ldr	r0, [pc, #72]	; (8003734 <MX_RTC_Init+0xb8>)
 80036ea:	f003 fa14 	bl	8006b16 <HAL_RTC_SetTime>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80036f4:	f000 f950 	bl	8003998 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80036f8:	2303      	movs	r3, #3
 80036fa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80036fc:	2306      	movs	r3, #6
 80036fe:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8003700:	2322      	movs	r3, #34	; 0x22
 8003702:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8003704:	2322      	movs	r3, #34	; 0x22
 8003706:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003708:	463b      	mov	r3, r7
 800370a:	2201      	movs	r2, #1
 800370c:	4619      	mov	r1, r3
 800370e:	4809      	ldr	r0, [pc, #36]	; (8003734 <MX_RTC_Init+0xb8>)
 8003710:	f003 fb1c 	bl	8006d4c <HAL_RTC_SetDate>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800371a:	f000 f93d 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 800371e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003722:	2101      	movs	r1, #1
 8003724:	4803      	ldr	r0, [pc, #12]	; (8003734 <MX_RTC_Init+0xb8>)
 8003726:	f003 fc97 	bl	8007058 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 2 */

}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20001a2c 	.word	0x20001a2c
 8003738:	40002800 	.word	0x40002800

0800373c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <MX_SPI1_Init+0x78>)
 8003744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800374c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003756:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800375a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <MX_SPI1_Init+0x74>)
 800375e:	2202      	movs	r2, #2
 8003760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003764:	2201      	movs	r2, #1
 8003766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <MX_SPI1_Init+0x74>)
 800376a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003772:	2238      	movs	r2, #56	; 0x38
 8003774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003778:	2200      	movs	r2, #0
 800377a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <MX_SPI1_Init+0x74>)
 800377e:	2200      	movs	r2, #0
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003784:	2200      	movs	r2, #0
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <MX_SPI1_Init+0x74>)
 800378a:	2207      	movs	r2, #7
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <MX_SPI1_Init+0x74>)
 8003796:	2200      	movs	r2, #0
 8003798:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800379a:	4805      	ldr	r0, [pc, #20]	; (80037b0 <MX_SPI1_Init+0x74>)
 800379c:	f003 fc8e 	bl	80070bc <HAL_SPI_Init>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80037a6:	f000 f8f7 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20001a68 	.word	0x20001a68
 80037b4:	40013000 	.word	0x40013000

080037b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <MX_SPI2_Init+0x74>)
 80037be:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <MX_SPI2_Init+0x78>)
 80037c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037c2:	4b1a      	ldr	r3, [pc, #104]	; (800382c <MX_SPI2_Init+0x74>)
 80037c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <MX_SPI2_Init+0x74>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037d0:	4b16      	ldr	r3, [pc, #88]	; (800382c <MX_SPI2_Init+0x74>)
 80037d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <MX_SPI2_Init+0x74>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <MX_SPI2_Init+0x74>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <MX_SPI2_Init+0x74>)
 80037e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MX_SPI2_Init+0x74>)
 80037ee:	2208      	movs	r2, #8
 80037f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <MX_SPI2_Init+0x74>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <MX_SPI2_Init+0x74>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <MX_SPI2_Init+0x74>)
 8003800:	2200      	movs	r2, #0
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <MX_SPI2_Init+0x74>)
 8003806:	2207      	movs	r2, #7
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <MX_SPI2_Init+0x74>)
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <MX_SPI2_Init+0x74>)
 8003812:	2208      	movs	r2, #8
 8003814:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003816:	4805      	ldr	r0, [pc, #20]	; (800382c <MX_SPI2_Init+0x74>)
 8003818:	f003 fc50 	bl	80070bc <HAL_SPI_Init>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003822:	f000 f8b9 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000530 	.word	0x20000530
 8003830:	40003800 	.word	0x40003800

08003834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <MX_USART2_UART_Init+0x58>)
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <MX_USART2_UART_Init+0x5c>)
 800383c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <MX_USART2_UART_Init+0x58>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <MX_USART2_UART_Init+0x58>)
 800385a:	220c      	movs	r2, #12
 800385c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003866:	2200      	movs	r2, #0
 8003868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <MX_USART2_UART_Init+0x58>)
 800386c:	2200      	movs	r2, #0
 800386e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003872:	2200      	movs	r2, #0
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003876:	4805      	ldr	r0, [pc, #20]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003878:	f004 f9b0 	bl	8007bdc <HAL_UART_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003882:	f000 f889 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20001ad4 	.word	0x20001ad4
 8003890:	40004400 	.word	0x40004400

08003894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4a38      	ldr	r2, [pc, #224]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038b4:	6153      	str	r3, [r2, #20]
 80038b6:	4b36      	ldr	r3, [pc, #216]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038c2:	4b33      	ldr	r3, [pc, #204]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4a32      	ldr	r2, [pc, #200]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038cc:	6153      	str	r3, [r2, #20]
 80038ce:	4b30      	ldr	r3, [pc, #192]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e4:	6153      	str	r3, [r2, #20]
 80038e6:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4a26      	ldr	r2, [pc, #152]	; (8003990 <MX_GPIO_Init+0xfc>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6153      	str	r3, [r2, #20]
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <MX_GPIO_Init+0xfc>)
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800390a:	2200      	movs	r2, #0
 800390c:	2110      	movs	r1, #16
 800390e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003912:	f001 fd27 	bl	8005364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8003916:	2200      	movs	r2, #0
 8003918:	f641 4108 	movw	r1, #7176	; 0x1c08
 800391c:	481d      	ldr	r0, [pc, #116]	; (8003994 <MX_GPIO_Init+0x100>)
 800391e:	f001 fd21 	bl	8005364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003922:	2310      	movs	r3, #16
 8003924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800393c:	f001 fb80 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 8003940:	f641 4308 	movw	r3, #7176	; 0x1c08
 8003944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003946:	2301      	movs	r3, #1
 8003948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003952:	f107 0314 	add.w	r3, r7, #20
 8003956:	4619      	mov	r1, r3
 8003958:	480e      	ldr	r0, [pc, #56]	; (8003994 <MX_GPIO_Init+0x100>)
 800395a:	f001 fb71 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800395e:	2320      	movs	r3, #32
 8003960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003962:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4619      	mov	r1, r3
 8003972:	4808      	ldr	r0, [pc, #32]	; (8003994 <MX_GPIO_Init+0x100>)
 8003974:	f001 fb64 	bl	8005040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	2017      	movs	r0, #23
 800397e:	f001 fab2 	bl	8004ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003982:	2017      	movs	r0, #23
 8003984:	f001 facb 	bl	8004f1e <HAL_NVIC_EnableIRQ>

}
 8003988:	bf00      	nop
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	48000400 	.word	0x48000400

08003998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800399c:	b672      	cpsid	i
}
 800399e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <Error_Handler+0x8>

080039a2 <modDelayTick1ms>:
	if(SysTick_Config(72000)){
		while(1); //Error setting SysTick.
	}
}

uint8_t modDelayTick1ms(uint32_t *last, uint32_t ticks) {
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 80039ac:	f000 fb44 	bl	8004038 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d806      	bhi.n	80039cc <modDelayTick1ms+0x2a>
	{
		*last = HAL_GetTick();
 80039be:	f000 fb3b 	bl	8004038 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]
		return true;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <modDelayTick1ms+0x2c>
	}

	return false;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_MspInit+0x44>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <HAL_MspInit+0x44>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6193      	str	r3, [r2, #24]
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_MspInit+0x44>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_MspInit+0x44>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_MspInit+0x44>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_MspInit+0x44>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_CAN_MspInit+0x90>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d131      	bne.n	8003aa6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003a42:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_CAN_MspInit+0x94>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <HAL_CAN_MspInit+0x94>)
 8003a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	61d3      	str	r3, [r2, #28]
 8003a4e:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HAL_CAN_MspInit+0x94>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_CAN_MspInit+0x94>)
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <HAL_CAN_MspInit+0x94>)
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a64:	6153      	str	r3, [r2, #20]
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_CAN_MspInit+0x94>)
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003a84:	2309      	movs	r3, #9
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a92:	f001 fad5 	bl	8005040 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	2014      	movs	r0, #20
 8003a9c:	f001 fa23 	bl	8004ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8003aa0:	2014      	movs	r0, #20
 8003aa2:	f001 fa3c 	bl	8004f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003aa6:	bf00      	nop
 8003aa8:	3728      	adds	r7, #40	; 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40006400 	.word	0x40006400
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_RTC_MspInit+0x44>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d111      	bne.n	8003aee <HAL_RTC_MspInit+0x36>
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_RTC_MspInit+0x48>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2301      	movs	r3, #1
 8003aec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40002800 	.word	0x40002800
 8003b00:	10908100 	.word	0x10908100

08003b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	; 0x30
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a2f      	ldr	r2, [pc, #188]	; (8003be0 <HAL_SPI_MspInit+0xdc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d129      	bne.n	8003b7a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b26:	4b2f      	ldr	r3, [pc, #188]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b30:	6193      	str	r3, [r2, #24]
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	4b29      	ldr	r3, [pc, #164]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b48:	6153      	str	r3, [r2, #20]
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b56:	23e0      	movs	r3, #224	; 0xe0
 8003b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b62:	2303      	movs	r3, #3
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b66:	2305      	movs	r3, #5
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b74:	f001 fa64 	bl	8005040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b78:	e02d      	b.n	8003bd6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_SPI_MspInit+0xe4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d128      	bne.n	8003bd6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8e:	61d3      	str	r3, [r2, #28]
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba6:	6153      	str	r3, [r2, #20]
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_SPI_MspInit+0xe0>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003bb4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bc6:	2305      	movs	r3, #5
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bca:	f107 031c 	add.w	r3, r7, #28
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4806      	ldr	r0, [pc, #24]	; (8003bec <HAL_SPI_MspInit+0xe8>)
 8003bd2:	f001 fa35 	bl	8005040 <HAL_GPIO_Init>
}
 8003bd6:	bf00      	nop
 8003bd8:	3730      	adds	r7, #48	; 0x30
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40013000 	.word	0x40013000
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40003800 	.word	0x40003800
 8003bec:	48000400 	.word	0x48000400

08003bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_UART_MspInit+0x8c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d130      	bne.n	8003c74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_UART_MspInit+0x90>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_UART_MspInit+0x90>)
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	61d3      	str	r3, [r2, #28]
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_UART_MspInit+0x90>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_UART_MspInit+0x90>)
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_UART_MspInit+0x90>)
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c34:	6153      	str	r3, [r2, #20]
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_UART_MspInit+0x90>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c42:	230c      	movs	r3, #12
 8003c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c52:	2307      	movs	r3, #7
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c60:	f001 f9ee 	bl	8005040 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c64:	2200      	movs	r2, #0
 8003c66:	2100      	movs	r1, #0
 8003c68:	2026      	movs	r0, #38	; 0x26
 8003c6a:	f001 f93c 	bl	8004ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c6e:	2026      	movs	r0, #38	; 0x26
 8003c70:	f001 f955 	bl	8004f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c74:	bf00      	nop
 8003c76:	3728      	adds	r7, #40	; 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40004400 	.word	0x40004400
 8003c80:	40021000 	.word	0x40021000

08003c84 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <SDTimer_Handler+0x40>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <SDTimer_Handler+0x1c>
    Timer1--;
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <SDTimer_Handler+0x40>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <SDTimer_Handler+0x40>)
 8003c9e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <SDTimer_Handler+0x44>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <SDTimer_Handler+0x34>
    Timer2--;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <SDTimer_Handler+0x44>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <SDTimer_Handler+0x44>)
 8003cb6:	801a      	strh	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20002c6c 	.word	0x20002c6c
 8003cc8:	20002c6a 	.word	0x20002c6a

08003ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cd0:	e7fe      	b.n	8003cd0 <NMI_Handler+0x4>

08003cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cd6:	e7fe      	b.n	8003cd6 <HardFault_Handler+0x4>

08003cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cdc:	e7fe      	b.n	8003cdc <MemManage_Handler+0x4>

08003cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ce2:	e7fe      	b.n	8003ce2 <BusFault_Handler+0x4>

08003ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce8:	e7fe      	b.n	8003ce8 <UsageFault_Handler+0x4>

08003cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <SysTick_Handler+0x30>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <SysTick_Handler+0x30>)
 8003d24:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <SysTick_Handler+0x30>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b09      	cmp	r3, #9
 8003d2e:	d904      	bls.n	8003d3a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <SysTick_Handler+0x30>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003d36:	f7ff ffa5 	bl	8003c84 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d3a:	f000 f969 	bl	8004010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000220 	.word	0x20000220

08003d48 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003d4c:	4802      	ldr	r0, [pc, #8]	; (8003d58 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8003d4e:	f000 fdbf 	bl	80048d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200015e8 	.word	0x200015e8

08003d5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003d60:	2020      	movs	r0, #32
 8003d62:	f001 fb31 	bl	80053c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <USART2_IRQHandler+0x10>)
 8003d72:	f004 f863 	bl	8007e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20001ad4 	.word	0x20001ad4

08003d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
	return 1;
 8003d84:	2301      	movs	r3, #1
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_kill>:

int _kill(int pid, int sig)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d9a:	f009 fdbb 	bl	800d914 <__errno>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2216      	movs	r2, #22
 8003da2:	601a      	str	r2, [r3, #0]
	return -1;
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_exit>:

void _exit (int status)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003db8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ffe7 	bl	8003d90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dc2:	e7fe      	b.n	8003dc2 <_exit+0x12>

08003dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e00a      	b.n	8003dec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dd6:	f3af 8000 	nop.w
 8003dda:	4601      	mov	r1, r0
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	60ba      	str	r2, [r7, #8]
 8003de2:	b2ca      	uxtb	r2, r1
 8003de4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	3301      	adds	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	dbf0      	blt.n	8003dd6 <_read+0x12>
	}

return len;
 8003df4:	687b      	ldr	r3, [r7, #4]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e009      	b.n	8003e24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	60ba      	str	r2, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	3301      	adds	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	dbf1      	blt.n	8003e10 <_write+0x12>
	}
	return len;
 8003e2c:	687b      	ldr	r3, [r7, #4]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_close>:

int _close(int file)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_isatty>:

int _isatty(int file)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
	return 1;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
	return 0;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <_sbrk+0x5c>)
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <_sbrk+0x60>)
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <_sbrk+0x64>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <_sbrk+0x64>)
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <_sbrk+0x68>)
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <_sbrk+0x64>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d207      	bcs.n	8003ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ed0:	f009 fd20 	bl	800d914 <__errno>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	220c      	movs	r2, #12
 8003ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e009      	b.n	8003ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <_sbrk+0x64>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <_sbrk+0x64>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <_sbrk+0x64>)
 8003ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	2000a000 	.word	0x2000a000
 8003f00:	00000400 	.word	0x00000400
 8003f04:	20000224 	.word	0x20000224
 8003f08:	20004ce8 	.word	0x20004ce8

08003f0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <SystemInit+0x20>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <SystemInit+0x20>)
 8003f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f34:	480d      	ldr	r0, [pc, #52]	; (8003f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003f36:	490e      	ldr	r1, [pc, #56]	; (8003f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f38:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <LoopForever+0xe>)
  movs r3, #0
 8003f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f3c:	e002      	b.n	8003f44 <LoopCopyDataInit>

08003f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f42:	3304      	adds	r3, #4

08003f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f48:	d3f9      	bcc.n	8003f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f4a:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f4c:	4c0b      	ldr	r4, [pc, #44]	; (8003f7c <LoopForever+0x16>)
  movs r3, #0
 8003f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f50:	e001      	b.n	8003f56 <LoopFillZerobss>

08003f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f54:	3204      	adds	r2, #4

08003f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f58:	d3fb      	bcc.n	8003f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f5a:	f7ff ffd7 	bl	8003f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f5e:	f009 fcdf 	bl	800d920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f62:	f7ff fa01 	bl	8003368 <main>

08003f66 <LoopForever>:

LoopForever:
    b LoopForever
 8003f66:	e7fe      	b.n	8003f66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f68:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f70:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003f74:	08011a5c 	.word	0x08011a5c
  ldr r2, =_sbss
 8003f78:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003f7c:	20004ce8 	.word	0x20004ce8

08003f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f80:	e7fe      	b.n	8003f80 <ADC1_2_IRQHandler>
	...

08003f84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_Init+0x28>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <HAL_Init+0x28>)
 8003f8e:	f043 0310 	orr.w	r3, r3, #16
 8003f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f94:	2003      	movs	r0, #3
 8003f96:	f000 ff9b 	bl	8004ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f9a:	200f      	movs	r0, #15
 8003f9c:	f000 f808 	bl	8003fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fa0:	f7ff fd1a 	bl	80039d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40022000 	.word	0x40022000

08003fb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_InitTick+0x54>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_InitTick+0x58>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 ffb3 	bl	8004f3a <HAL_SYSTICK_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e00e      	b.n	8003ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b0f      	cmp	r3, #15
 8003fe2:	d80a      	bhi.n	8003ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	f000 ff7b 	bl	8004ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ff0:	4a06      	ldr	r2, [pc, #24]	; (800400c <HAL_InitTick+0x5c>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000004 	.word	0x20000004
 8004008:	2000000c 	.word	0x2000000c
 800400c:	20000008 	.word	0x20000008

08004010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_IncTick+0x20>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_IncTick+0x24>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4413      	add	r3, r2
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <HAL_IncTick+0x24>)
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	2000000c 	.word	0x2000000c
 8004034:	20002c70 	.word	0x20002c70

08004038 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return uwTick;  
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_GetTick+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20002c70 	.word	0x20002c70

08004050 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004058:	f7ff ffee 	bl	8004038 <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d005      	beq.n	8004076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <HAL_Delay+0x44>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004076:	bf00      	nop
 8004078:	f7ff ffde 	bl	8004038 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d8f7      	bhi.n	8004078 <HAL_Delay+0x28>
  {
  }
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c

08004098 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0ed      	b.n	8004286 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fcb2 	bl	8003a20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040cc:	f7ff ffb4 	bl	8004038 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040d2:	e012      	b.n	80040fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040d4:	f7ff ffb0 	bl	8004038 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b0a      	cmp	r3, #10
 80040e0:	d90b      	bls.n	80040fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2205      	movs	r2, #5
 80040f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0c5      	b.n	8004286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0e5      	beq.n	80040d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0202 	bic.w	r2, r2, #2
 8004116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004118:	f7ff ff8e 	bl	8004038 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800411e:	e012      	b.n	8004146 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004120:	f7ff ff8a 	bl	8004038 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b0a      	cmp	r3, #10
 800412c:	d90b      	bls.n	8004146 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2205      	movs	r2, #5
 800413e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e09f      	b.n	8004286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7e1b      	ldrb	r3, [r3, #24]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d108      	bne.n	800416e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e007      	b.n	800417e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7e5b      	ldrb	r3, [r3, #25]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d108      	bne.n	8004198 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e007      	b.n	80041a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	7e9b      	ldrb	r3, [r3, #26]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d108      	bne.n	80041c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0220 	orr.w	r2, r2, #32
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e007      	b.n	80041d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0220 	bic.w	r2, r2, #32
 80041d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7edb      	ldrb	r3, [r3, #27]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d108      	bne.n	80041ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0210 	bic.w	r2, r2, #16
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e007      	b.n	80041fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0210 	orr.w	r2, r2, #16
 80041fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7f1b      	ldrb	r3, [r3, #28]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d108      	bne.n	8004216 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0208 	orr.w	r2, r2, #8
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0208 	bic.w	r2, r2, #8
 8004224:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	7f5b      	ldrb	r3, [r3, #29]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d108      	bne.n	8004240 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0204 	orr.w	r2, r2, #4
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e007      	b.n	8004250 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	ea42 0103 	orr.w	r1, r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800428e:	b480      	push	{r7}
 8004290:	b087      	sub	sp, #28
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d003      	beq.n	80042b4 <HAL_CAN_ConfigFilter+0x26>
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	f040 80aa 	bne.w	8004408 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2201      	movs	r2, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43db      	mvns	r3, r3
 80042de:	401a      	ands	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d123      	bne.n	8004336 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	401a      	ands	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004310:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	3248      	adds	r2, #72	; 0x48
 8004316:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800432a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	3348      	adds	r3, #72	; 0x48
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d122      	bne.n	8004384 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	431a      	orrs	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800435e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3248      	adds	r2, #72	; 0x48
 8004364:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004378:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800437a:	6979      	ldr	r1, [r7, #20]
 800437c:	3348      	adds	r3, #72	; 0x48
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	43db      	mvns	r3, r3
 8004396:	401a      	ands	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800439e:	e007      	b.n	80043b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	401a      	ands	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043ca:	e007      	b.n	80043dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043fa:	f023 0201 	bic.w	r2, r3, #1
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e006      	b.n	8004416 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d12e      	bne.n	8004494 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800444e:	f7ff fdf3 	bl	8004038 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004454:	e012      	b.n	800447c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004456:	f7ff fdef 	bl	8004038 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b0a      	cmp	r3, #10
 8004462:	d90b      	bls.n	800447c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2205      	movs	r2, #5
 8004474:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e012      	b.n	80044a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e006      	b.n	80044a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
  }
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b089      	sub	sp, #36	; 0x24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044be:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80044c8:	7ffb      	ldrb	r3, [r7, #31]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d003      	beq.n	80044d6 <HAL_CAN_AddTxMessage+0x2c>
 80044ce:	7ffb      	ldrb	r3, [r7, #31]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f040 80b8 	bne.w	8004646 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a0 	beq.w	8004636 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	0e1b      	lsrs	r3, r3, #24
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d907      	bls.n	8004516 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e09e      	b.n	8004654 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004516:	2201      	movs	r2, #1
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	409a      	lsls	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10d      	bne.n	8004544 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	6809      	ldr	r1, [r1, #0]
 8004536:	431a      	orrs	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3318      	adds	r3, #24
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	440b      	add	r3, r1
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e00f      	b.n	8004564 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800454e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004554:	68f9      	ldr	r1, [r7, #12]
 8004556:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004558:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3318      	adds	r3, #24
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	440b      	add	r3, r1
 8004562:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3318      	adds	r3, #24
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	440b      	add	r3, r1
 8004574:	3304      	adds	r3, #4
 8004576:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	7d1b      	ldrb	r3, [r3, #20]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d111      	bne.n	80045a4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3318      	adds	r3, #24
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	6811      	ldr	r1, [r2, #0]
 8004594:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3318      	adds	r3, #24
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	440b      	add	r3, r1
 80045a0:	3304      	adds	r3, #4
 80045a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3307      	adds	r3, #7
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	061a      	lsls	r2, r3, #24
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3306      	adds	r3, #6
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3305      	adds	r3, #5
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	4313      	orrs	r3, r2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	3204      	adds	r2, #4
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	4610      	mov	r0, r2
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	6811      	ldr	r1, [r2, #0]
 80045cc:	ea43 0200 	orr.w	r2, r3, r0
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	440b      	add	r3, r1
 80045d6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80045da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3303      	adds	r3, #3
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	061a      	lsls	r2, r3, #24
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3302      	adds	r3, #2
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3301      	adds	r3, #1
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	4313      	orrs	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	4610      	mov	r0, r2
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	6811      	ldr	r1, [r2, #0]
 8004602:	ea43 0200 	orr.w	r2, r3, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	440b      	add	r3, r1
 800460c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004610:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3318      	adds	r3, #24
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	4413      	add	r3, r2
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	6811      	ldr	r1, [r2, #0]
 8004624:	f043 0201 	orr.w	r2, r3, #1
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3318      	adds	r3, #24
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	440b      	add	r3, r1
 8004630:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e00e      	b.n	8004654 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e006      	b.n	8004654 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3724      	adds	r7, #36	; 0x24
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004674:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d003      	beq.n	8004684 <HAL_CAN_GetRxMessage+0x24>
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b02      	cmp	r3, #2
 8004680:	f040 80f3 	bne.w	800486a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10e      	bne.n	80046a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d116      	bne.n	80046c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0e7      	b.n	8004878 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d107      	bne.n	80046c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0d8      	b.n	8004878 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	331b      	adds	r3, #27
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0204 	and.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10c      	bne.n	80046fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	331b      	adds	r3, #27
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	4413      	add	r3, r2
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	0d5b      	lsrs	r3, r3, #21
 80046f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e00b      	b.n	8004716 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	331b      	adds	r3, #27
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	4413      	add	r3, r2
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	331b      	adds	r3, #27
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	4413      	add	r3, r2
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0202 	and.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	331b      	adds	r3, #27
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	4413      	add	r3, r2
 8004738:	3304      	adds	r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	331b      	adds	r3, #27
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	4413      	add	r3, r2
 8004750:	3304      	adds	r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	b2da      	uxtb	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	331b      	adds	r3, #27
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	4413      	add	r3, r2
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	b29a      	uxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	4413      	add	r3, r2
 800477e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0a1a      	lsrs	r2, r3, #8
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0c1a      	lsrs	r2, r3, #16
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3302      	adds	r3, #2
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0e1a      	lsrs	r2, r3, #24
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	3303      	adds	r3, #3
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	3304      	adds	r3, #4
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	0a1a      	lsrs	r2, r3, #8
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	3305      	adds	r3, #5
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4413      	add	r3, r2
 8004814:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0c1a      	lsrs	r2, r3, #16
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	3306      	adds	r3, #6
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	4413      	add	r3, r2
 800482e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e1a      	lsrs	r2, r3, #24
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3307      	adds	r3, #7
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0220 	orr.w	r2, r2, #32
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e007      	b.n	8004866 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0220 	orr.w	r2, r2, #32
 8004864:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e006      	b.n	8004878 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004894:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d002      	beq.n	80048a2 <HAL_CAN_ActivateNotification+0x1e>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d109      	bne.n	80048b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6959      	ldr	r1, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e006      	b.n	80048c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
  }
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d07c      	beq.n	8004a10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2201      	movs	r2, #1
 8004926:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f983 	bl	8004c3e <HAL_CAN_TxMailbox0CompleteCallback>
 8004938:	e016      	b.n	8004968 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	e00c      	b.n	8004968 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d004      	beq.n	8004962 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
 8004960:	e002      	b.n	8004968 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f989 	bl	8004c7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d024      	beq.n	80049bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800497a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f963 	bl	8004c52 <HAL_CAN_TxMailbox1CompleteCallback>
 800498c:	e016      	b.n	80049bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	e00c      	b.n	80049bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	e002      	b.n	80049bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f969 	bl	8004c8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d024      	beq.n	8004a10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f943 	bl	8004c66 <HAL_CAN_TxMailbox2CompleteCallback>
 80049e0:	e016      	b.n	8004a10 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
 80049f4:	e00c      	b.n	8004a10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	e002      	b.n	8004a10 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f949 	bl	8004ca2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2210      	movs	r2, #16
 8004a32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f930 	bl	8004cb6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d009      	beq.n	8004a74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fd ffd0 	bl	8002a14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2210      	movs	r2, #16
 8004a96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f912 	bl	8004cde <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8f9 	bl	8004cca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d006      	beq.n	8004afa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2210      	movs	r2, #16
 8004af2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8fc 	bl	8004cf2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d006      	beq.n	8004b1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2208      	movs	r2, #8
 8004b14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8f5 	bl	8004d06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d07b      	beq.n	8004c1e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d072      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	f043 0302 	orr.w	r3, r3, #2
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	f043 0304 	orr.w	r3, r3, #4
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d043      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d03e      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b9e:	2b60      	cmp	r3, #96	; 0x60
 8004ba0:	d02b      	beq.n	8004bfa <HAL_CAN_IRQHandler+0x32a>
 8004ba2:	2b60      	cmp	r3, #96	; 0x60
 8004ba4:	d82e      	bhi.n	8004c04 <HAL_CAN_IRQHandler+0x334>
 8004ba6:	2b50      	cmp	r3, #80	; 0x50
 8004ba8:	d022      	beq.n	8004bf0 <HAL_CAN_IRQHandler+0x320>
 8004baa:	2b50      	cmp	r3, #80	; 0x50
 8004bac:	d82a      	bhi.n	8004c04 <HAL_CAN_IRQHandler+0x334>
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d019      	beq.n	8004be6 <HAL_CAN_IRQHandler+0x316>
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d826      	bhi.n	8004c04 <HAL_CAN_IRQHandler+0x334>
 8004bb6:	2b30      	cmp	r3, #48	; 0x30
 8004bb8:	d010      	beq.n	8004bdc <HAL_CAN_IRQHandler+0x30c>
 8004bba:	2b30      	cmp	r3, #48	; 0x30
 8004bbc:	d822      	bhi.n	8004c04 <HAL_CAN_IRQHandler+0x334>
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d002      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x2f8>
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d005      	beq.n	8004bd2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004bc6:	e01d      	b.n	8004c04 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f043 0308 	orr.w	r3, r3, #8
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bd0:	e019      	b.n	8004c06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	f043 0310 	orr.w	r3, r3, #16
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bda:	e014      	b.n	8004c06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f043 0320 	orr.w	r3, r3, #32
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004be4:	e00f      	b.n	8004c06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bee:	e00a      	b.n	8004c06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bf8:	e005      	b.n	8004c06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c02:	e000      	b.n	8004c06 <HAL_CAN_IRQHandler+0x336>
            break;
 8004c04:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c14:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f872 	bl	8004d1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004c36:	bf00      	nop
 8004c38:	3728      	adds	r7, #40	; 0x28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <__NVIC_SetPriorityGrouping+0x44>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d62:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <__NVIC_SetPriorityGrouping+0x44>)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	60d3      	str	r3, [r2, #12]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <__NVIC_GetPriorityGrouping+0x18>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	f003 0307 	and.w	r3, r3, #7
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	e000ed00 	.word	0xe000ed00

08004d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	db0b      	blt.n	8004dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	f003 021f 	and.w	r2, r3, #31
 8004dac:	4907      	ldr	r1, [pc, #28]	; (8004dcc <__NVIC_EnableIRQ+0x38>)
 8004dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	2001      	movs	r0, #1
 8004db6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	e000e100 	.word	0xe000e100

08004dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	db0a      	blt.n	8004dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	490c      	ldr	r1, [pc, #48]	; (8004e1c <__NVIC_SetPriority+0x4c>)
 8004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dee:	0112      	lsls	r2, r2, #4
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	440b      	add	r3, r1
 8004df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004df8:	e00a      	b.n	8004e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	4908      	ldr	r1, [pc, #32]	; (8004e20 <__NVIC_SetPriority+0x50>)
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	3b04      	subs	r3, #4
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	761a      	strb	r2, [r3, #24]
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	e000e100 	.word	0xe000e100
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f1c3 0307 	rsb	r3, r3, #7
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	bf28      	it	cs
 8004e42:	2304      	movcs	r3, #4
 8004e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d902      	bls.n	8004e54 <NVIC_EncodePriority+0x30>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3b03      	subs	r3, #3
 8004e52:	e000      	b.n	8004e56 <NVIC_EncodePriority+0x32>
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e58:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43da      	mvns	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	401a      	ands	r2, r3
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	43d9      	mvns	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e7c:	4313      	orrs	r3, r2
         );
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3724      	adds	r7, #36	; 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e9c:	d301      	bcc.n	8004ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e00f      	b.n	8004ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <SysTick_Config+0x40>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eaa:	210f      	movs	r1, #15
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	f7ff ff8e 	bl	8004dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <SysTick_Config+0x40>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <SysTick_Config+0x40>)
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	e000e010 	.word	0xe000e010

08004ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff29 	bl	8004d30 <__NVIC_SetPriorityGrouping>
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	4603      	mov	r3, r0
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ef8:	f7ff ff3e 	bl	8004d78 <__NVIC_GetPriorityGrouping>
 8004efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f7ff ff8e 	bl	8004e24 <NVIC_EncodePriority>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ff5d 	bl	8004dd0 <__NVIC_SetPriority>
}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	4603      	mov	r3, r0
 8004f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ff31 	bl	8004d94 <__NVIC_EnableIRQ>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ffa2 	bl	8004e8c <SysTick_Config>
 8004f48:	4603      	mov	r3, r0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d008      	beq.n	8004f76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2204      	movs	r2, #4
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e020      	b.n	8004fb8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 020e 	bic.w	r2, r2, #14
 8004f84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d005      	beq.n	8004fe6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e027      	b.n	8005036 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 020e 	bic.w	r2, r2, #14
 8004ff4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	2101      	movs	r1, #1
 8005010:	fa01 f202 	lsl.w	r2, r1, r2
 8005014:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
    } 
  }
  return status;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800504e:	e154      	b.n	80052fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8146 	beq.w	80052f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d005      	beq.n	8005080 <HAL_GPIO_Init+0x40>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d130      	bne.n	80050e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2203      	movs	r2, #3
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050b6:	2201      	movs	r2, #1
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 0201 	and.w	r2, r3, #1
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d017      	beq.n	800511e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	2203      	movs	r2, #3
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4013      	ands	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d123      	bne.n	8005172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	08da      	lsrs	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3208      	adds	r2, #8
 8005132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	220f      	movs	r2, #15
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4013      	ands	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	6939      	ldr	r1, [r7, #16]
 800516e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2203      	movs	r2, #3
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4013      	ands	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 0203 	and.w	r2, r3, #3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80a0 	beq.w	80052f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b4:	4b58      	ldr	r3, [pc, #352]	; (8005318 <HAL_GPIO_Init+0x2d8>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	4a57      	ldr	r2, [pc, #348]	; (8005318 <HAL_GPIO_Init+0x2d8>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6193      	str	r3, [r2, #24]
 80051c0:	4b55      	ldr	r3, [pc, #340]	; (8005318 <HAL_GPIO_Init+0x2d8>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051cc:	4a53      	ldr	r2, [pc, #332]	; (800531c <HAL_GPIO_Init+0x2dc>)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	3302      	adds	r3, #2
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	220f      	movs	r2, #15
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051f6:	d019      	beq.n	800522c <HAL_GPIO_Init+0x1ec>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a49      	ldr	r2, [pc, #292]	; (8005320 <HAL_GPIO_Init+0x2e0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <HAL_GPIO_Init+0x1e8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a48      	ldr	r2, [pc, #288]	; (8005324 <HAL_GPIO_Init+0x2e4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00d      	beq.n	8005224 <HAL_GPIO_Init+0x1e4>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a47      	ldr	r2, [pc, #284]	; (8005328 <HAL_GPIO_Init+0x2e8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <HAL_GPIO_Init+0x1e0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a46      	ldr	r2, [pc, #280]	; (800532c <HAL_GPIO_Init+0x2ec>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_GPIO_Init+0x1dc>
 8005218:	2304      	movs	r3, #4
 800521a:	e008      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 800521c:	2305      	movs	r3, #5
 800521e:	e006      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 8005220:	2303      	movs	r3, #3
 8005222:	e004      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 8005224:	2302      	movs	r3, #2
 8005226:	e002      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 800522c:	2300      	movs	r3, #0
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	f002 0203 	and.w	r2, r2, #3
 8005234:	0092      	lsls	r2, r2, #2
 8005236:	4093      	lsls	r3, r2
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800523e:	4937      	ldr	r1, [pc, #220]	; (800531c <HAL_GPIO_Init+0x2dc>)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	3302      	adds	r3, #2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800524c:	4b38      	ldr	r3, [pc, #224]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	43db      	mvns	r3, r3
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4013      	ands	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005270:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005276:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	43db      	mvns	r3, r3
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4013      	ands	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800529a:	4a25      	ldr	r2, [pc, #148]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052a0:	4b23      	ldr	r3, [pc, #140]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4013      	ands	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052c4:	4a1a      	ldr	r2, [pc, #104]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4013      	ands	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052ee:	4a10      	ldr	r2, [pc, #64]	; (8005330 <HAL_GPIO_Init+0x2f0>)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3301      	adds	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	f47f aea3 	bne.w	8005050 <HAL_GPIO_Init+0x10>
  }
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40021000 	.word	0x40021000
 800531c:	40010000 	.word	0x40010000
 8005320:	48000400 	.word	0x48000400
 8005324:	48000800 	.word	0x48000800
 8005328:	48000c00 	.word	0x48000c00
 800532c:	48001000 	.word	0x48001000
 8005330:	40010400 	.word	0x40010400

08005334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	887b      	ldrh	r3, [r7, #2]
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	e001      	b.n	8005356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005356:	7bfb      	ldrb	r3, [r7, #15]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]
 8005370:	4613      	mov	r3, r2
 8005372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005374:	787b      	ldrb	r3, [r7, #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800537a:	887a      	ldrh	r2, [r7, #2]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005380:	e002      	b.n	8005388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4013      	ands	r3, r2
 80053ac:	041a      	lsls	r2, r3, #16
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	43d9      	mvns	r1, r3
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	400b      	ands	r3, r1
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	619a      	str	r2, [r3, #24]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053de:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fd fbc4 	bl	8002b74 <HAL_GPIO_EXTI_Callback>
  }
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40010400 	.word	0x40010400

080053f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a04      	ldr	r2, [pc, #16]	; (8005414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005406:	6013      	str	r3, [r2, #0]
}
 8005408:	bf00      	nop
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40007000 	.word	0x40007000

08005418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800541e:	af00      	add	r7, sp, #0
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005424:	1d3b      	adds	r3, r7, #4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f000 bef4 	b.w	800621a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 816a 	beq.w	8005716 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005442:	4bb3      	ldr	r3, [pc, #716]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800544e:	4bb0      	ldr	r3, [pc, #704]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b08      	cmp	r3, #8
 8005458:	d159      	bne.n	800550e <HAL_RCC_OscConfig+0xf6>
 800545a:	4bad      	ldr	r3, [pc, #692]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005466:	d152      	bne.n	800550e <HAL_RCC_OscConfig+0xf6>
 8005468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800546c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005474:	fa93 f3a3 	rbit	r3, r3
 8005478:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800547c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	fab3 f383 	clz	r3, r3
 8005484:	b2db      	uxtb	r3, r3
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d102      	bne.n	800549a <HAL_RCC_OscConfig+0x82>
 8005494:	4b9e      	ldr	r3, [pc, #632]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	e015      	b.n	80054c6 <HAL_RCC_OscConfig+0xae>
 800549a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800549e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80054ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80054b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80054ba:	fa93 f3a3 	rbit	r3, r3
 80054be:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80054c2:	4b93      	ldr	r3, [pc, #588]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054ca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80054ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80054d2:	fa92 f2a2 	rbit	r2, r2
 80054d6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80054da:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 810c 	beq.w	8005714 <HAL_RCC_OscConfig+0x2fc>
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 8106 	bne.w	8005714 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f000 be86 	b.w	800621a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550e:	1d3b      	adds	r3, r7, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005518:	d106      	bne.n	8005528 <HAL_RCC_OscConfig+0x110>
 800551a:	4b7d      	ldr	r3, [pc, #500]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a7c      	ldr	r2, [pc, #496]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e030      	b.n	800558a <HAL_RCC_OscConfig+0x172>
 8005528:	1d3b      	adds	r3, r7, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0x134>
 8005532:	4b77      	ldr	r3, [pc, #476]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a76      	ldr	r2, [pc, #472]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b74      	ldr	r3, [pc, #464]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a73      	ldr	r2, [pc, #460]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e01e      	b.n	800558a <HAL_RCC_OscConfig+0x172>
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005556:	d10c      	bne.n	8005572 <HAL_RCC_OscConfig+0x15a>
 8005558:	4b6d      	ldr	r3, [pc, #436]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a6c      	ldr	r2, [pc, #432]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 800555e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b6a      	ldr	r3, [pc, #424]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a69      	ldr	r2, [pc, #420]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 800556a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e00b      	b.n	800558a <HAL_RCC_OscConfig+0x172>
 8005572:	4b67      	ldr	r3, [pc, #412]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a66      	ldr	r2, [pc, #408]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b64      	ldr	r3, [pc, #400]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a63      	ldr	r2, [pc, #396]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005588:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800558a:	4b61      	ldr	r3, [pc, #388]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f023 020f 	bic.w	r2, r3, #15
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	495d      	ldr	r1, [pc, #372]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 800559a:	4313      	orrs	r3, r2
 800559c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d059      	beq.n	800565c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fe fd46 	bl	8004038 <HAL_GetTick>
 80055ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b2:	f7fe fd41 	bl	8004038 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d902      	bls.n	80055c8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	f000 be29 	b.w	800621a <HAL_RCC_OscConfig+0xe02>
 80055c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80055d4:	fa93 f3a3 	rbit	r3, r3
 80055d8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80055dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_OscConfig+0x1e2>
 80055f4:	4b46      	ldr	r3, [pc, #280]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	e015      	b.n	8005626 <HAL_RCC_OscConfig+0x20e>
 80055fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005606:	fa93 f3a3 	rbit	r3, r3
 800560a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800560e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005612:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005616:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800562a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800562e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005632:	fa92 f2a2 	rbit	r2, r2
 8005636:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800563a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800563e:	fab2 f282 	clz	r2, r2
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	f042 0220 	orr.w	r2, r2, #32
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	f002 021f 	and.w	r2, r2, #31
 800564e:	2101      	movs	r1, #1
 8005650:	fa01 f202 	lsl.w	r2, r1, r2
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0ab      	beq.n	80055b2 <HAL_RCC_OscConfig+0x19a>
 800565a:	e05c      	b.n	8005716 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565c:	f7fe fcec 	bl	8004038 <HAL_GetTick>
 8005660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005664:	e00a      	b.n	800567c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005666:	f7fe fce7 	bl	8004038 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d902      	bls.n	800567c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	f000 bdcf 	b.w	800621a <HAL_RCC_OscConfig+0xe02>
 800567c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005680:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005684:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005688:	fa93 f3a3 	rbit	r3, r3
 800568c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005690:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005694:	fab3 f383 	clz	r3, r3
 8005698:	b2db      	uxtb	r3, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d102      	bne.n	80056ae <HAL_RCC_OscConfig+0x296>
 80056a8:	4b19      	ldr	r3, [pc, #100]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	e015      	b.n	80056da <HAL_RCC_OscConfig+0x2c2>
 80056ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80056ba:	fa93 f3a3 	rbit	r3, r3
 80056be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80056c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80056ca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056ce:	fa93 f3a3 	rbit	r3, r3
 80056d2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80056d6:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <HAL_RCC_OscConfig+0x2f8>)
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80056e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80056e6:	fa92 f2a2 	rbit	r2, r2
 80056ea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80056ee:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80056f2:	fab2 f282 	clz	r2, r2
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	f042 0220 	orr.w	r2, r2, #32
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	f002 021f 	and.w	r2, r2, #31
 8005702:	2101      	movs	r1, #1
 8005704:	fa01 f202 	lsl.w	r2, r1, r2
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1ab      	bne.n	8005666 <HAL_RCC_OscConfig+0x24e>
 800570e:	e002      	b.n	8005716 <HAL_RCC_OscConfig+0x2fe>
 8005710:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 816f 	beq.w	8005a04 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005726:	4bd0      	ldr	r3, [pc, #832]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005732:	4bcd      	ldr	r3, [pc, #820]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b08      	cmp	r3, #8
 800573c:	d16c      	bne.n	8005818 <HAL_RCC_OscConfig+0x400>
 800573e:	4bca      	ldr	r3, [pc, #808]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d166      	bne.n	8005818 <HAL_RCC_OscConfig+0x400>
 800574a:	2302      	movs	r3, #2
 800574c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005750:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800575c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005760:	fab3 f383 	clz	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	d102      	bne.n	800577a <HAL_RCC_OscConfig+0x362>
 8005774:	4bbc      	ldr	r3, [pc, #752]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	e013      	b.n	80057a2 <HAL_RCC_OscConfig+0x38a>
 800577a:	2302      	movs	r3, #2
 800577c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005784:	fa93 f3a3 	rbit	r3, r3
 8005788:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800578c:	2302      	movs	r3, #2
 800578e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005792:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005796:	fa93 f3a3 	rbit	r3, r3
 800579a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800579e:	4bb2      	ldr	r3, [pc, #712]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2202      	movs	r2, #2
 80057a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80057a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80057ac:	fa92 f2a2 	rbit	r2, r2
 80057b0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80057b4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80057b8:	fab2 f282 	clz	r2, r2
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	f042 0220 	orr.w	r2, r2, #32
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	f002 021f 	and.w	r2, r2, #31
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f202 	lsl.w	r2, r1, r2
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_RCC_OscConfig+0x3cc>
 80057d4:	1d3b      	adds	r3, r7, #4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d002      	beq.n	80057e4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f000 bd1b 	b.w	800621a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e4:	4ba0      	ldr	r3, [pc, #640]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	21f8      	movs	r1, #248	; 0xf8
 80057f4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80057fc:	fa91 f1a1 	rbit	r1, r1
 8005800:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005804:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005808:	fab1 f181 	clz	r1, r1
 800580c:	b2c9      	uxtb	r1, r1
 800580e:	408b      	lsls	r3, r1
 8005810:	4995      	ldr	r1, [pc, #596]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	e0f5      	b.n	8005a04 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8085 	beq.w	800592e <HAL_RCC_OscConfig+0x516>
 8005824:	2301      	movs	r3, #1
 8005826:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005836:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800583a:	fab3 f383 	clz	r3, r3
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005844:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	461a      	mov	r2, r3
 800584c:	2301      	movs	r3, #1
 800584e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fe fbf2 	bl	8004038 <HAL_GetTick>
 8005854:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585a:	f7fe fbed 	bl	8004038 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d902      	bls.n	8005870 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	f000 bcd5 	b.w	800621a <HAL_RCC_OscConfig+0xe02>
 8005870:	2302      	movs	r3, #2
 8005872:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800587a:	fa93 f3a3 	rbit	r3, r3
 800587e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005882:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005886:	fab3 f383 	clz	r3, r3
 800588a:	b2db      	uxtb	r3, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d102      	bne.n	80058a0 <HAL_RCC_OscConfig+0x488>
 800589a:	4b73      	ldr	r3, [pc, #460]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	e013      	b.n	80058c8 <HAL_RCC_OscConfig+0x4b0>
 80058a0:	2302      	movs	r3, #2
 80058a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80058aa:	fa93 f3a3 	rbit	r3, r3
 80058ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80058b2:	2302      	movs	r3, #2
 80058b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80058b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80058bc:	fa93 f3a3 	rbit	r3, r3
 80058c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80058c4:	4b68      	ldr	r3, [pc, #416]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2202      	movs	r2, #2
 80058ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80058ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80058d2:	fa92 f2a2 	rbit	r2, r2
 80058d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80058da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80058de:	fab2 f282 	clz	r2, r2
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	f042 0220 	orr.w	r2, r2, #32
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	f002 021f 	and.w	r2, r2, #31
 80058ee:	2101      	movs	r1, #1
 80058f0:	fa01 f202 	lsl.w	r2, r1, r2
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0af      	beq.n	800585a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fa:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005902:	1d3b      	adds	r3, r7, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	21f8      	movs	r1, #248	; 0xf8
 800590a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005912:	fa91 f1a1 	rbit	r1, r1
 8005916:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800591a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800591e:	fab1 f181 	clz	r1, r1
 8005922:	b2c9      	uxtb	r1, r1
 8005924:	408b      	lsls	r3, r1
 8005926:	4950      	ldr	r1, [pc, #320]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 8005928:	4313      	orrs	r3, r2
 800592a:	600b      	str	r3, [r1, #0]
 800592c:	e06a      	b.n	8005a04 <HAL_RCC_OscConfig+0x5ec>
 800592e:	2301      	movs	r3, #1
 8005930:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005934:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005938:	fa93 f3a3 	rbit	r3, r3
 800593c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005940:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005944:	fab3 f383 	clz	r3, r3
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800594e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595a:	f7fe fb6d 	bl	8004038 <HAL_GetTick>
 800595e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005962:	e00a      	b.n	800597a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005964:	f7fe fb68 	bl	8004038 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d902      	bls.n	800597a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	f000 bc50 	b.w	800621a <HAL_RCC_OscConfig+0xe02>
 800597a:	2302      	movs	r3, #2
 800597c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005980:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005984:	fa93 f3a3 	rbit	r3, r3
 8005988:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800598c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d102      	bne.n	80059aa <HAL_RCC_OscConfig+0x592>
 80059a4:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	e013      	b.n	80059d2 <HAL_RCC_OscConfig+0x5ba>
 80059aa:	2302      	movs	r3, #2
 80059ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059bc:	2302      	movs	r3, #2
 80059be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059ce:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <HAL_RCC_OscConfig+0x650>)
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2202      	movs	r2, #2
 80059d4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80059d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80059dc:	fa92 f2a2 	rbit	r2, r2
 80059e0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80059e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80059e8:	fab2 f282 	clz	r2, r2
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	f042 0220 	orr.w	r2, r2, #32
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	f002 021f 	and.w	r2, r2, #31
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f202 	lsl.w	r2, r1, r2
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1af      	bne.n	8005964 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a04:	1d3b      	adds	r3, r7, #4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80da 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a14:	1d3b      	adds	r3, r7, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d069      	beq.n	8005af2 <HAL_RCC_OscConfig+0x6da>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a28:	fa93 f3a3 	rbit	r3, r3
 8005a2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a34:	fab3 f383 	clz	r3, r3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_OscConfig+0x654>)
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	461a      	mov	r2, r3
 8005a44:	2301      	movs	r3, #1
 8005a46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a48:	f7fe faf6 	bl	8004038 <HAL_GetTick>
 8005a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a50:	e00e      	b.n	8005a70 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a52:	f7fe faf1 	bl	8004038 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d906      	bls.n	8005a70 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e3d9      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	10908120 	.word	0x10908120
 8005a70:	2302      	movs	r3, #2
 8005a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a7a:	fa93 f3a3 	rbit	r3, r3
 8005a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a86:	2202      	movs	r2, #2
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	fa93 f2a3 	rbit	r2, r3
 8005a94:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	fa93 f2a3 	rbit	r2, r3
 8005aac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005ab0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab2:	4ba5      	ldr	r3, [pc, #660]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005aba:	2102      	movs	r1, #2
 8005abc:	6019      	str	r1, [r3, #0]
 8005abe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	fa93 f1a3 	rbit	r1, r3
 8005ac8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005acc:	6019      	str	r1, [r3, #0]
  return result;
 8005ace:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	fab3 f383 	clz	r3, r3
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0b0      	beq.n	8005a52 <HAL_RCC_OscConfig+0x63a>
 8005af0:	e06a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x7b0>
 8005af2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	fa93 f2a3 	rbit	r2, r3
 8005b04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b08:	601a      	str	r2, [r3, #0]
  return result;
 8005b0a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b0e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b10:	fab3 f383 	clz	r3, r3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	4b8c      	ldr	r3, [pc, #560]	; (8005d4c <HAL_RCC_OscConfig+0x934>)
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2300      	movs	r3, #0
 8005b22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b24:	f7fe fa88 	bl	8004038 <HAL_GetTick>
 8005b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2c:	e009      	b.n	8005b42 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b2e:	f7fe fa83 	bl	8004038 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e36b      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
 8005b42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b46:	2202      	movs	r2, #2
 8005b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	fa93 f2a3 	rbit	r2, r3
 8005b54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b5e:	2202      	movs	r2, #2
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	fa93 f2a3 	rbit	r2, r3
 8005b6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b76:	2202      	movs	r2, #2
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	fa93 f2a3 	rbit	r2, r3
 8005b84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005b88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b8a:	4b6f      	ldr	r3, [pc, #444]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b92:	2102      	movs	r1, #2
 8005b94:	6019      	str	r1, [r3, #0]
 8005b96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	fa93 f1a3 	rbit	r1, r3
 8005ba0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005ba4:	6019      	str	r1, [r3, #0]
  return result;
 8005ba6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	fab3 f383 	clz	r3, r3
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1b2      	bne.n	8005b2e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8158 	beq.w	8005e88 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bde:	4b5a      	ldr	r3, [pc, #360]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d112      	bne.n	8005c10 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bea:	4b57      	ldr	r3, [pc, #348]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	4a56      	ldr	r2, [pc, #344]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	61d3      	str	r3, [r2, #28]
 8005bf6:	4b54      	ldr	r3, [pc, #336]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005bfe:	f107 0308 	add.w	r3, r7, #8
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	4b4f      	ldr	r3, [pc, #316]	; (8005d50 <HAL_RCC_OscConfig+0x938>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d11a      	bne.n	8005c52 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCC_OscConfig+0x938>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a4b      	ldr	r2, [pc, #300]	; (8005d50 <HAL_RCC_OscConfig+0x938>)
 8005c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c26:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c28:	f7fe fa06 	bl	8004038 <HAL_GetTick>
 8005c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c30:	e009      	b.n	8005c46 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c32:	f7fe fa01 	bl	8004038 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e2e9      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c46:	4b42      	ldr	r3, [pc, #264]	; (8005d50 <HAL_RCC_OscConfig+0x938>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0ef      	beq.n	8005c32 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCC_OscConfig+0x852>
 8005c5c:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	4a39      	ldr	r2, [pc, #228]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	6213      	str	r3, [r2, #32]
 8005c68:	e02f      	b.n	8005cca <HAL_RCC_OscConfig+0x8b2>
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10c      	bne.n	8005c8e <HAL_RCC_OscConfig+0x876>
 8005c74:	4b34      	ldr	r3, [pc, #208]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c7a:	f023 0301 	bic.w	r3, r3, #1
 8005c7e:	6213      	str	r3, [r2, #32]
 8005c80:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	4a30      	ldr	r2, [pc, #192]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c86:	f023 0304 	bic.w	r3, r3, #4
 8005c8a:	6213      	str	r3, [r2, #32]
 8005c8c:	e01d      	b.n	8005cca <HAL_RCC_OscConfig+0x8b2>
 8005c8e:	1d3b      	adds	r3, r7, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2b05      	cmp	r3, #5
 8005c96:	d10c      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x89a>
 8005c98:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	4a2a      	ldr	r2, [pc, #168]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005c9e:	f043 0304 	orr.w	r3, r3, #4
 8005ca2:	6213      	str	r3, [r2, #32]
 8005ca4:	4b28      	ldr	r3, [pc, #160]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	4a27      	ldr	r2, [pc, #156]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6213      	str	r3, [r2, #32]
 8005cb0:	e00b      	b.n	8005cca <HAL_RCC_OscConfig+0x8b2>
 8005cb2:	4b25      	ldr	r3, [pc, #148]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	4a24      	ldr	r2, [pc, #144]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	6213      	str	r3, [r2, #32]
 8005cbe:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
 8005cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d06b      	beq.n	8005dac <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd4:	f7fe f9b0 	bl	8004038 <HAL_GetTick>
 8005cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cdc:	e00b      	b.n	8005cf6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cde:	f7fe f9ab 	bl	8004038 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e291      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
 8005cf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	fa93 f2a3 	rbit	r2, r3
 8005d08:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d12:	2202      	movs	r2, #2
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	fa93 f2a3 	rbit	r2, r3
 8005d20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d24:	601a      	str	r2, [r3, #0]
  return result;
 8005d26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2c:	fab3 f383 	clz	r3, r3
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCC_OscConfig+0x93c>
 8005d40:	4b01      	ldr	r3, [pc, #4]	; (8005d48 <HAL_RCC_OscConfig+0x930>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	e014      	b.n	8005d70 <HAL_RCC_OscConfig+0x958>
 8005d46:	bf00      	nop
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	10908120 	.word	0x10908120
 8005d50:	40007000 	.word	0x40007000
 8005d54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d58:	2202      	movs	r2, #2
 8005d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	fa93 f2a3 	rbit	r2, r3
 8005d66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	4bbb      	ldr	r3, [pc, #748]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d74:	2102      	movs	r1, #2
 8005d76:	6011      	str	r1, [r2, #0]
 8005d78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	fa92 f1a2 	rbit	r1, r2
 8005d82:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d86:	6011      	str	r1, [r2, #0]
  return result;
 8005d88:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	fab2 f282 	clz	r2, r2
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	f002 021f 	and.w	r2, r2, #31
 8005d9e:	2101      	movs	r1, #1
 8005da0:	fa01 f202 	lsl.w	r2, r1, r2
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d099      	beq.n	8005cde <HAL_RCC_OscConfig+0x8c6>
 8005daa:	e063      	b.n	8005e74 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dac:	f7fe f944 	bl	8004038 <HAL_GetTick>
 8005db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db4:	e00b      	b.n	8005dce <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db6:	f7fe f93f 	bl	8004038 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e225      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
 8005dce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	fa93 f2a3 	rbit	r2, r3
 8005de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dea:	2202      	movs	r2, #2
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	fa93 f2a3 	rbit	r2, r3
 8005df8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005dfc:	601a      	str	r2, [r3, #0]
  return result;
 8005dfe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005e02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e04:	fab3 f383 	clz	r3, r3
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f043 0302 	orr.w	r3, r3, #2
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d102      	bne.n	8005e1e <HAL_RCC_OscConfig+0xa06>
 8005e18:	4b90      	ldr	r3, [pc, #576]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	e00d      	b.n	8005e3a <HAL_RCC_OscConfig+0xa22>
 8005e1e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e22:	2202      	movs	r2, #2
 8005e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	fa93 f2a3 	rbit	r2, r3
 8005e30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	4b89      	ldr	r3, [pc, #548]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e3e:	2102      	movs	r1, #2
 8005e40:	6011      	str	r1, [r2, #0]
 8005e42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	fa92 f1a2 	rbit	r1, r2
 8005e4c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e50:	6011      	str	r1, [r2, #0]
  return result;
 8005e52:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	fab2 f282 	clz	r2, r2
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	f002 021f 	and.w	r2, r2, #31
 8005e68:	2101      	movs	r1, #1
 8005e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1a0      	bne.n	8005db6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e74:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d105      	bne.n	8005e88 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e7c:	4b77      	ldr	r3, [pc, #476]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	4a76      	ldr	r2, [pc, #472]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 81c2 	beq.w	8006218 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e94:	4b71      	ldr	r3, [pc, #452]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 030c 	and.w	r3, r3, #12
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	f000 819c 	beq.w	80061da <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	f040 8114 	bne.w	80060d6 <HAL_RCC_OscConfig+0xcbe>
 8005eae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005eb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	fa93 f2a3 	rbit	r2, r3
 8005ec2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ec6:	601a      	str	r2, [r3, #0]
  return result;
 8005ec8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ecc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ece:	fab3 f383 	clz	r3, r3
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ed8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fe f8a8 	bl	8004038 <HAL_GetTick>
 8005ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eec:	e009      	b.n	8005f02 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eee:	f7fe f8a3 	bl	8004038 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e18b      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
 8005f02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	fa93 f2a3 	rbit	r2, r3
 8005f16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f1a:	601a      	str	r2, [r3, #0]
  return result;
 8005f1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d102      	bne.n	8005f3c <HAL_RCC_OscConfig+0xb24>
 8005f36:	4b49      	ldr	r3, [pc, #292]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	e01b      	b.n	8005f74 <HAL_RCC_OscConfig+0xb5c>
 8005f3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	fa93 f2a3 	rbit	r2, r3
 8005f50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	fa93 f2a3 	rbit	r2, r3
 8005f6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	4b3a      	ldr	r3, [pc, #232]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f7c:	6011      	str	r1, [r2, #0]
 8005f7e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	fa92 f1a2 	rbit	r1, r2
 8005f88:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f8c:	6011      	str	r1, [r2, #0]
  return result;
 8005f8e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	fab2 f282 	clz	r2, r2
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	f042 0220 	orr.w	r2, r2, #32
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	f002 021f 	and.w	r2, r2, #31
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d19e      	bne.n	8005eee <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	4925      	ldr	r1, [pc, #148]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	fa93 f2a3 	rbit	r2, r3
 8005fe0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fe4:	601a      	str	r2, [r3, #0]
  return result;
 8005fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fea:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fec:	fab3 f383 	clz	r3, r3
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ff6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2301      	movs	r3, #1
 8006000:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006002:	f7fe f819 	bl	8004038 <HAL_GetTick>
 8006006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800600a:	e009      	b.n	8006020 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600c:	f7fe f814 	bl	8004038 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e0fc      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
 8006020:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	fa93 f2a3 	rbit	r2, r3
 8006034:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006038:	601a      	str	r2, [r3, #0]
  return result;
 800603a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800603e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <HAL_RCC_OscConfig+0xc48>
 8006054:	4b01      	ldr	r3, [pc, #4]	; (800605c <HAL_RCC_OscConfig+0xc44>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	e01e      	b.n	8006098 <HAL_RCC_OscConfig+0xc80>
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	fa93 f2a3 	rbit	r2, r3
 8006074:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800607e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	fa93 f2a3 	rbit	r2, r3
 800608e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	4b63      	ldr	r3, [pc, #396]	; (8006224 <HAL_RCC_OscConfig+0xe0c>)
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800609c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	fa92 f1a2 	rbit	r1, r2
 80060ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80060b0:	6011      	str	r1, [r2, #0]
  return result;
 80060b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	fab2 f282 	clz	r2, r2
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	f042 0220 	orr.w	r2, r2, #32
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	f002 021f 	and.w	r2, r2, #31
 80060c8:	2101      	movs	r1, #1
 80060ca:	fa01 f202 	lsl.w	r2, r1, r2
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d09b      	beq.n	800600c <HAL_RCC_OscConfig+0xbf4>
 80060d4:	e0a0      	b.n	8006218 <HAL_RCC_OscConfig+0xe00>
 80060d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	fa93 f2a3 	rbit	r2, r3
 80060ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060ee:	601a      	str	r2, [r3, #0]
  return result;
 80060f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f6:	fab3 f383 	clz	r3, r3
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	461a      	mov	r2, r3
 8006108:	2300      	movs	r3, #0
 800610a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610c:	f7fd ff94 	bl	8004038 <HAL_GetTick>
 8006110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006114:	e009      	b.n	800612a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006116:	f7fd ff8f 	bl	8004038 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e077      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
 800612a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800612e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	fa93 f2a3 	rbit	r2, r3
 800613e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006142:	601a      	str	r2, [r3, #0]
  return result;
 8006144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006148:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800614a:	fab3 f383 	clz	r3, r3
 800614e:	b2db      	uxtb	r3, r3
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	d102      	bne.n	8006164 <HAL_RCC_OscConfig+0xd4c>
 800615e:	4b31      	ldr	r3, [pc, #196]	; (8006224 <HAL_RCC_OscConfig+0xe0c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	e01b      	b.n	800619c <HAL_RCC_OscConfig+0xd84>
 8006164:	f107 0320 	add.w	r3, r7, #32
 8006168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800616c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616e:	f107 0320 	add.w	r3, r7, #32
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	fa93 f2a3 	rbit	r2, r3
 8006178:	f107 031c 	add.w	r3, r7, #28
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	f107 0318 	add.w	r3, r7, #24
 8006182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f107 0318 	add.w	r3, r7, #24
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	fa93 f2a3 	rbit	r2, r3
 8006192:	f107 0314 	add.w	r3, r7, #20
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <HAL_RCC_OscConfig+0xe0c>)
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	f107 0210 	add.w	r2, r7, #16
 80061a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061a4:	6011      	str	r1, [r2, #0]
 80061a6:	f107 0210 	add.w	r2, r7, #16
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	fa92 f1a2 	rbit	r1, r2
 80061b0:	f107 020c 	add.w	r2, r7, #12
 80061b4:	6011      	str	r1, [r2, #0]
  return result;
 80061b6:	f107 020c 	add.w	r2, r7, #12
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	fab2 f282 	clz	r2, r2
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	f042 0220 	orr.w	r2, r2, #32
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	f002 021f 	and.w	r2, r2, #31
 80061cc:	2101      	movs	r1, #1
 80061ce:	fa01 f202 	lsl.w	r2, r1, r2
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d19e      	bne.n	8006116 <HAL_RCC_OscConfig+0xcfe>
 80061d8:	e01e      	b.n	8006218 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e018      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCC_OscConfig+0xe0c>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061f8:	1d3b      	adds	r3, r7, #4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d108      	bne.n	8006214 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800620a:	1d3b      	adds	r3, r7, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40021000 	.word	0x40021000

08006228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b09e      	sub	sp, #120	; 0x78
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e162      	b.n	8006506 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006240:	4b90      	ldr	r3, [pc, #576]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d910      	bls.n	8006270 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b8d      	ldr	r3, [pc, #564]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 0207 	bic.w	r2, r3, #7
 8006256:	498b      	ldr	r1, [pc, #556]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	4313      	orrs	r3, r2
 800625c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b89      	ldr	r3, [pc, #548]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e14a      	b.n	8006506 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800627c:	4b82      	ldr	r3, [pc, #520]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	497f      	ldr	r1, [pc, #508]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 800628a:	4313      	orrs	r3, r2
 800628c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80dc 	beq.w	8006454 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d13c      	bne.n	800631e <HAL_RCC_ClockConfig+0xf6>
 80062a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ac:	fa93 f3a3 	rbit	r3, r3
 80062b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b4:	fab3 f383 	clz	r3, r3
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <HAL_RCC_ClockConfig+0xa6>
 80062c8:	4b6f      	ldr	r3, [pc, #444]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	e00f      	b.n	80062ee <HAL_RCC_ClockConfig+0xc6>
 80062ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	667b      	str	r3, [r7, #100]	; 0x64
 80062dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062e0:	663b      	str	r3, [r7, #96]	; 0x60
 80062e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e4:	fa93 f3a3 	rbit	r3, r3
 80062e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ea:	4b67      	ldr	r3, [pc, #412]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80062f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062f6:	fa92 f2a2 	rbit	r2, r2
 80062fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80062fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062fe:	fab2 f282 	clz	r2, r2
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	f042 0220 	orr.w	r2, r2, #32
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	f002 021f 	and.w	r2, r2, #31
 800630e:	2101      	movs	r1, #1
 8006310:	fa01 f202 	lsl.w	r2, r1, r2
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d17b      	bne.n	8006412 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e0f3      	b.n	8006506 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d13c      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x178>
 8006326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800632a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632e:	fa93 f3a3 	rbit	r3, r3
 8006332:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006336:	fab3 f383 	clz	r3, r3
 800633a:	b2db      	uxtb	r3, r3
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d102      	bne.n	8006350 <HAL_RCC_ClockConfig+0x128>
 800634a:	4b4f      	ldr	r3, [pc, #316]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	e00f      	b.n	8006370 <HAL_RCC_ClockConfig+0x148>
 8006350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006354:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006358:	fa93 f3a3 	rbit	r3, r3
 800635c:	647b      	str	r3, [r7, #68]	; 0x44
 800635e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006362:	643b      	str	r3, [r7, #64]	; 0x40
 8006364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006366:	fa93 f3a3 	rbit	r3, r3
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800636c:	4b46      	ldr	r3, [pc, #280]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006374:	63ba      	str	r2, [r7, #56]	; 0x38
 8006376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006378:	fa92 f2a2 	rbit	r2, r2
 800637c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800637e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006380:	fab2 f282 	clz	r2, r2
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	f042 0220 	orr.w	r2, r2, #32
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	f002 021f 	and.w	r2, r2, #31
 8006390:	2101      	movs	r1, #1
 8006392:	fa01 f202 	lsl.w	r2, r1, r2
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d13a      	bne.n	8006412 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0b2      	b.n	8006506 <HAL_RCC_ClockConfig+0x2de>
 80063a0:	2302      	movs	r3, #2
 80063a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	fa93 f3a3 	rbit	r3, r3
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ae:	fab3 f383 	clz	r3, r3
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d102      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x1a0>
 80063c2:	4b31      	ldr	r3, [pc, #196]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	e00d      	b.n	80063e4 <HAL_RCC_ClockConfig+0x1bc>
 80063c8:	2302      	movs	r3, #2
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	fa93 f3a3 	rbit	r3, r3
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
 80063d4:	2302      	movs	r3, #2
 80063d6:	623b      	str	r3, [r7, #32]
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	fa93 f3a3 	rbit	r3, r3
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	4b29      	ldr	r3, [pc, #164]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2202      	movs	r2, #2
 80063e6:	61ba      	str	r2, [r7, #24]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	fa92 f2a2 	rbit	r2, r2
 80063ee:	617a      	str	r2, [r7, #20]
  return result;
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	fab2 f282 	clz	r2, r2
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	f042 0220 	orr.w	r2, r2, #32
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	f002 021f 	and.w	r2, r2, #31
 8006402:	2101      	movs	r1, #1
 8006404:	fa01 f202 	lsl.w	r2, r1, r2
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e079      	b.n	8006506 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f023 0203 	bic.w	r2, r3, #3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	491a      	ldr	r1, [pc, #104]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006424:	f7fd fe08 	bl	8004038 <HAL_GetTick>
 8006428:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642a:	e00a      	b.n	8006442 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642c:	f7fd fe04 	bl	8004038 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	; 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e061      	b.n	8006506 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <HAL_RCC_ClockConfig+0x260>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f003 020c 	and.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	429a      	cmp	r2, r3
 8006452:	d1eb      	bne.n	800642c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d214      	bcs.n	800648c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 0207 	bic.w	r2, r3, #7
 800646a:	4906      	ldr	r1, [pc, #24]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	4313      	orrs	r3, r2
 8006470:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	4b04      	ldr	r3, [pc, #16]	; (8006484 <HAL_RCC_ClockConfig+0x25c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d005      	beq.n	800648c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e040      	b.n	8006506 <HAL_RCC_ClockConfig+0x2de>
 8006484:	40022000 	.word	0x40022000
 8006488:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <HAL_RCC_ClockConfig+0x2e8>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	491a      	ldr	r1, [pc, #104]	; (8006510 <HAL_RCC_ClockConfig+0x2e8>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064b6:	4b16      	ldr	r3, [pc, #88]	; (8006510 <HAL_RCC_ClockConfig+0x2e8>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4912      	ldr	r1, [pc, #72]	; (8006510 <HAL_RCC_ClockConfig+0x2e8>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80064ca:	f000 f829 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 80064ce:	4601      	mov	r1, r0
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <HAL_RCC_ClockConfig+0x2e8>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d8:	22f0      	movs	r2, #240	; 0xf0
 80064da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	fa92 f2a2 	rbit	r2, r2
 80064e2:	60fa      	str	r2, [r7, #12]
  return result;
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	fab2 f282 	clz	r2, r2
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	40d3      	lsrs	r3, r2
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <HAL_RCC_ClockConfig+0x2ec>)
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	fa21 f303 	lsr.w	r3, r1, r3
 80064f6:	4a08      	ldr	r2, [pc, #32]	; (8006518 <HAL_RCC_ClockConfig+0x2f0>)
 80064f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <HAL_RCC_ClockConfig+0x2f4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fd fd56 	bl	8003fb0 <HAL_InitTick>
  
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3778      	adds	r7, #120	; 0x78
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40021000 	.word	0x40021000
 8006514:	080110e8 	.word	0x080110e8
 8006518:	20000004 	.word	0x20000004
 800651c:	20000008 	.word	0x20000008

08006520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006520:	b480      	push	{r7}
 8006522:	b08b      	sub	sp, #44	; 0x2c
 8006524:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	2300      	movs	r3, #0
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800653a:	4b29      	ldr	r3, [pc, #164]	; (80065e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b04      	cmp	r3, #4
 8006548:	d002      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x30>
 800654a:	2b08      	cmp	r3, #8
 800654c:	d003      	beq.n	8006556 <HAL_RCC_GetSysClockFreq+0x36>
 800654e:	e03c      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006550:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006552:	623b      	str	r3, [r7, #32]
      break;
 8006554:	e03c      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800655c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006560:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	fa92 f2a2 	rbit	r2, r2
 8006568:	607a      	str	r2, [r7, #4]
  return result;
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	fab2 f282 	clz	r2, r2
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	40d3      	lsrs	r3, r2
 8006574:	4a1c      	ldr	r2, [pc, #112]	; (80065e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006576:	5cd3      	ldrb	r3, [r2, r3]
 8006578:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800657a:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	220f      	movs	r2, #15
 8006584:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	fa92 f2a2 	rbit	r2, r2
 800658c:	60fa      	str	r2, [r7, #12]
  return result;
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	fab2 f282 	clz	r2, r2
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	40d3      	lsrs	r3, r2
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800659a:	5cd3      	ldrb	r3, [r2, r3]
 800659c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d008      	beq.n	80065ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80065a8:	4a0e      	ldr	r2, [pc, #56]	; (80065e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
 80065b8:	e004      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	623b      	str	r3, [r7, #32]
      break;
 80065c8:	e002      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80065cc:	623b      	str	r3, [r7, #32]
      break;
 80065ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065d0:	6a3b      	ldr	r3, [r7, #32]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	372c      	adds	r7, #44	; 0x2c
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000
 80065e4:	007a1200 	.word	0x007a1200
 80065e8:	08011100 	.word	0x08011100
 80065ec:	08011110 	.word	0x08011110
 80065f0:	003d0900 	.word	0x003d0900

080065f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065f8:	4b03      	ldr	r3, [pc, #12]	; (8006608 <HAL_RCC_GetHCLKFreq+0x14>)
 80065fa:	681b      	ldr	r3, [r3, #0]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	20000004 	.word	0x20000004

0800660c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006612:	f7ff ffef 	bl	80065f4 <HAL_RCC_GetHCLKFreq>
 8006616:	4601      	mov	r1, r0
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006620:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006624:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	fa92 f2a2 	rbit	r2, r2
 800662c:	603a      	str	r2, [r7, #0]
  return result;
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	fab2 f282 	clz	r2, r2
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	40d3      	lsrs	r3, r2
 8006638:	4a04      	ldr	r2, [pc, #16]	; (800664c <HAL_RCC_GetPCLK1Freq+0x40>)
 800663a:	5cd3      	ldrb	r3, [r2, r3]
 800663c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40021000 	.word	0x40021000
 800664c:	080110f8 	.word	0x080110f8

08006650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006656:	f7ff ffcd 	bl	80065f4 <HAL_RCC_GetHCLKFreq>
 800665a:	4601      	mov	r1, r0
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006664:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006668:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	fa92 f2a2 	rbit	r2, r2
 8006670:	603a      	str	r2, [r7, #0]
  return result;
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	fab2 f282 	clz	r2, r2
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	40d3      	lsrs	r3, r2
 800667c:	4a04      	ldr	r2, [pc, #16]	; (8006690 <HAL_RCC_GetPCLK2Freq+0x40>)
 800667e:	5cd3      	ldrb	r3, [r2, r3]
 8006680:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000
 8006690:	080110f8 	.word	0x080110f8

08006694 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b092      	sub	sp, #72	; 0x48
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80d4 	beq.w	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066b8:	4b4e      	ldr	r3, [pc, #312]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10e      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066c4:	4b4b      	ldr	r3, [pc, #300]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	4a4a      	ldr	r2, [pc, #296]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ce:	61d3      	str	r3, [r2, #28]
 80066d0:	4b48      	ldr	r3, [pc, #288]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e2:	4b45      	ldr	r3, [pc, #276]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d118      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ee:	4b42      	ldr	r3, [pc, #264]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a41      	ldr	r2, [pc, #260]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066fa:	f7fd fc9d 	bl	8004038 <HAL_GetTick>
 80066fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006700:	e008      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006702:	f7fd fc99 	bl	8004038 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b64      	cmp	r3, #100	; 0x64
 800670e:	d901      	bls.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e169      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006714:	4b38      	ldr	r3, [pc, #224]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006720:	4b34      	ldr	r3, [pc, #208]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8084 	beq.w	800683a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800673c:	429a      	cmp	r2, r3
 800673e:	d07c      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006740:	4b2c      	ldr	r3, [pc, #176]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800674a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	fa93 f3a3 	rbit	r3, r3
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800675a:	fab3 f383 	clz	r3, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	4b26      	ldr	r3, [pc, #152]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	461a      	mov	r2, r3
 800676a:	2301      	movs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	fa93 f3a3 	rbit	r3, r3
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800677e:	fab3 f383 	clz	r3, r3
 8006782:	b2db      	uxtb	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	461a      	mov	r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006792:	4a18      	ldr	r2, [pc, #96]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006796:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d04b      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a2:	f7fd fc49 	bl	8004038 <HAL_GetTick>
 80067a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a8:	e00a      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f7fd fc45 	bl	8004038 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e113      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80067c0:	2302      	movs	r3, #2
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	fa93 f3a3 	rbit	r3, r3
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
 80067cc:	2302      	movs	r3, #2
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	fa93 f3a3 	rbit	r3, r3
 80067d6:	61fb      	str	r3, [r7, #28]
  return result;
 80067d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067da:	fab3 f383 	clz	r3, r3
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f043 0302 	orr.w	r3, r3, #2
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d108      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80067ee:	4b01      	ldr	r3, [pc, #4]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	e00d      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40007000 	.word	0x40007000
 80067fc:	10908100 	.word	0x10908100
 8006800:	2302      	movs	r3, #2
 8006802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	fa93 f3a3 	rbit	r3, r3
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	4b78      	ldr	r3, [pc, #480]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	2202      	movs	r2, #2
 8006812:	613a      	str	r2, [r7, #16]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	fa92 f2a2 	rbit	r2, r2
 800681a:	60fa      	str	r2, [r7, #12]
  return result;
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	fab2 f282 	clz	r2, r2
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	f002 021f 	and.w	r2, r2, #31
 800682e:	2101      	movs	r1, #1
 8006830:	fa01 f202 	lsl.w	r2, r1, r2
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0b7      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800683a:	4b6d      	ldr	r3, [pc, #436]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	496a      	ldr	r1, [pc, #424]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006848:	4313      	orrs	r3, r2
 800684a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800684c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006850:	2b01      	cmp	r3, #1
 8006852:	d105      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006854:	4b66      	ldr	r3, [pc, #408]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	4a65      	ldr	r2, [pc, #404]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800685a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800685e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800686c:	4b60      	ldr	r3, [pc, #384]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	f023 0203 	bic.w	r2, r3, #3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	495d      	ldr	r1, [pc, #372]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800687a:	4313      	orrs	r3, r2
 800687c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800688a:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	4956      	ldr	r1, [pc, #344]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068a8:	4b51      	ldr	r3, [pc, #324]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	494e      	ldr	r1, [pc, #312]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068c6:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	f023 0210 	bic.w	r2, r3, #16
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	4947      	ldr	r1, [pc, #284]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80068e4:	4b42      	ldr	r3, [pc, #264]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	493f      	ldr	r1, [pc, #252]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006902:	4b3b      	ldr	r3, [pc, #236]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	f023 0220 	bic.w	r2, r3, #32
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	4938      	ldr	r1, [pc, #224]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006910:	4313      	orrs	r3, r2
 8006912:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006920:	4b33      	ldr	r3, [pc, #204]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	4930      	ldr	r1, [pc, #192]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800693e:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	4929      	ldr	r1, [pc, #164]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800694c:	4313      	orrs	r3, r2
 800694e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800695c:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	4921      	ldr	r1, [pc, #132]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800696a:	4313      	orrs	r3, r2
 800696c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800697a:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	491a      	ldr	r1, [pc, #104]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006988:	4313      	orrs	r3, r2
 800698a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	4912      	ldr	r1, [pc, #72]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80069b6:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	490b      	ldr	r1, [pc, #44]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	4903      	ldr	r1, [pc, #12]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3748      	adds	r7, #72	; 0x48
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40021000 	.word	0x40021000

080069f4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e083      	b.n	8006b0e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7f5b      	ldrb	r3, [r3, #29]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d105      	bne.n	8006a1c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fd f84e 	bl	8003ab8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	22ca      	movs	r2, #202	; 0xca
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2253      	movs	r2, #83	; 0x53
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 faa8 	bl	8006f88 <RTC_EnterInitMode>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	22ff      	movs	r2, #255	; 0xff
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2204      	movs	r2, #4
 8006a4a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e05e      	b.n	8006b0e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a62:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6899      	ldr	r1, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	68d2      	ldr	r2, [r2, #12]
 8006a8a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6919      	ldr	r1, [r3, #16]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	041a      	lsls	r2, r3, #16
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10e      	bne.n	8006adc <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa3a 	bl	8006f38 <HAL_RTC_WaitForSynchro>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	22ff      	movs	r2, #255	; 0xff
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e018      	b.n	8006b0e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aea:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	22ff      	movs	r2, #255	; 0xff
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
  }
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b16:	b590      	push	{r4, r7, lr}
 8006b18:	b087      	sub	sp, #28
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	7f1b      	ldrb	r3, [r3, #28]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_RTC_SetTime+0x1c>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e0aa      	b.n	8006c88 <HAL_RTC_SetTime+0x172>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d126      	bne.n	8006b92 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2200      	movs	r2, #0
 8006b56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fa3f 	bl	8006fe0 <RTC_ByteToBcd2>
 8006b62:	4603      	mov	r3, r0
 8006b64:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fa38 	bl	8006fe0 <RTC_ByteToBcd2>
 8006b70:	4603      	mov	r3, r0
 8006b72:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b74:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	789b      	ldrb	r3, [r3, #2]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fa30 	bl	8006fe0 <RTC_ByteToBcd2>
 8006b80:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b82:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	78db      	ldrb	r3, [r3, #3]
 8006b8a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e018      	b.n	8006bc4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006bb2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006bb8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	78db      	ldrb	r3, [r3, #3]
 8006bbe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	22ca      	movs	r2, #202	; 0xca
 8006bca:	625a      	str	r2, [r3, #36]	; 0x24
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2253      	movs	r2, #83	; 0x53
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f9d7 	bl	8006f88 <RTC_EnterInitMode>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	22ff      	movs	r2, #255	; 0xff
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2204      	movs	r2, #4
 8006bec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e047      	b.n	8006c88 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c06:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6899      	ldr	r1, [r3, #8]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d111      	bne.n	8006c72 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f972 	bl	8006f38 <HAL_RTC_WaitForSynchro>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	22ff      	movs	r2, #255	; 0xff
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2204      	movs	r2, #4
 8006c66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e00a      	b.n	8006c88 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	22ff      	movs	r2, #255	; 0xff
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006c86:	2300      	movs	r3, #0
  }
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd90      	pop	{r4, r7, pc}

08006c90 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d11a      	bne.n	8006d42 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 f983 	bl	800701c <RTC_Bcd2ToByte>
 8006d16:	4603      	mov	r3, r0
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f97a 	bl	800701c <RTC_Bcd2ToByte>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	789b      	ldrb	r3, [r3, #2]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 f971 	bl	800701c <RTC_Bcd2ToByte>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d4c:	b590      	push	{r4, r7, lr}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	7f1b      	ldrb	r3, [r3, #28]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_RTC_SetDate+0x1c>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e094      	b.n	8006e92 <HAL_RTC_SetDate+0x146>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2202      	movs	r2, #2
 8006d72:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10e      	bne.n	8006d98 <HAL_RTC_SetDate+0x4c>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	f023 0310 	bic.w	r3, r3, #16
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	330a      	adds	r3, #10
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d11c      	bne.n	8006dd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	78db      	ldrb	r3, [r3, #3]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f91c 	bl	8006fe0 <RTC_ByteToBcd2>
 8006da8:	4603      	mov	r3, r0
 8006daa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 f915 	bl	8006fe0 <RTC_ByteToBcd2>
 8006db6:	4603      	mov	r3, r0
 8006db8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006dba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	789b      	ldrb	r3, [r3, #2]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f90d 	bl	8006fe0 <RTC_ByteToBcd2>
 8006dc6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006dc8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	e00e      	b.n	8006df6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	78db      	ldrb	r3, [r3, #3]
 8006ddc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	785b      	ldrb	r3, [r3, #1]
 8006de2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006de4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006dea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	22ca      	movs	r2, #202	; 0xca
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2253      	movs	r2, #83	; 0x53
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f8be 	bl	8006f88 <RTC_EnterInitMode>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	22ff      	movs	r2, #255	; 0xff
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e033      	b.n	8006e92 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e38:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e48:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d111      	bne.n	8006e7c <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f86d 	bl	8006f38 <HAL_RTC_WaitForSynchro>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	22ff      	movs	r2, #255	; 0xff
 8006e6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e00a      	b.n	8006e92 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	22ff      	movs	r2, #255	; 0xff
 8006e82:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
  }
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd90      	pop	{r4, r7, pc}

08006e9a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006eb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	0b5b      	lsrs	r3, r3, #13
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11a      	bne.n	8006f2e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	78db      	ldrb	r3, [r3, #3]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 f88d 	bl	800701c <RTC_Bcd2ToByte>
 8006f02:	4603      	mov	r3, r0
 8006f04:	461a      	mov	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	785b      	ldrb	r3, [r3, #1]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f884 	bl	800701c <RTC_Bcd2ToByte>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	789b      	ldrb	r3, [r3, #2]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f87b 	bl	800701c <RTC_Bcd2ToByte>
 8006f26:	4603      	mov	r3, r0
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f54:	f7fd f870 	bl	8004038 <HAL_GetTick>
 8006f58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006f5a:	e009      	b.n	8006f70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f5c:	f7fd f86c 	bl	8004038 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f6a:	d901      	bls.n	8006f70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e007      	b.n	8006f80 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0ee      	beq.n	8006f5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d119      	bne.n	8006fd6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006faa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fac:	f7fd f844 	bl	8004038 <HAL_GetTick>
 8006fb0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006fb2:	e009      	b.n	8006fc8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fb4:	f7fd f840 	bl	8004038 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fc2:	d901      	bls.n	8006fc8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e007      	b.n	8006fd8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0ee      	beq.n	8006fb4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006fee:	e005      	b.n	8006ffc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	3b0a      	subs	r3, #10
 8006ffa:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d8f6      	bhi.n	8006ff0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	b2da      	uxtb	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	4313      	orrs	r3, r2
 800700e:	b2db      	uxtb	r3, r3
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	091b      	lsrs	r3, r3, #4
 800702e:	b2db      	uxtb	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	4413      	add	r3, r2
 800704a:	b2db      	uxtb	r3, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3350      	adds	r3, #80	; 0x50
 800706e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]
}
 8007080:	bf00      	nop
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3350      	adds	r3, #80	; 0x50
 80070a0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e09d      	b.n	800720a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d108      	bne.n	80070e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070de:	d009      	beq.n	80070f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	61da      	str	r2, [r3, #28]
 80070e6:	e005      	b.n	80070f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fc fcf8 	bl	8003b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800712a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007134:	d902      	bls.n	800713c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e002      	b.n	8007142 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800713c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007140:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800714a:	d007      	beq.n	800715c <HAL_SPI_Init+0xa0>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007154:	d002      	beq.n	800715c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	ea42 0103 	orr.w	r1, r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	0c1b      	lsrs	r3, r3, #16
 80071b8:	f003 0204 	and.w	r2, r3, #4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80071d8:	ea42 0103 	orr.w	r1, r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b088      	sub	sp, #32
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_SPI_Transmit+0x22>
 8007230:	2302      	movs	r3, #2
 8007232:	e158      	b.n	80074e6 <HAL_SPI_Transmit+0x2d4>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800723c:	f7fc fefc 	bl	8004038 <HAL_GetTick>
 8007240:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b01      	cmp	r3, #1
 8007250:	d002      	beq.n	8007258 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007252:	2302      	movs	r3, #2
 8007254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007256:	e13d      	b.n	80074d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_SPI_Transmit+0x52>
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007268:	e134      	b.n	80074d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2203      	movs	r2, #3
 800726e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b4:	d10f      	bne.n	80072d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d007      	beq.n	80072f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072fc:	d94b      	bls.n	8007396 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <HAL_SPI_Transmit+0xfa>
 8007306:	8afb      	ldrh	r3, [r7, #22]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d13e      	bne.n	800738a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	881a      	ldrh	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	1c9a      	adds	r2, r3, #2
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007326:	b29b      	uxth	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007330:	e02b      	b.n	800738a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b02      	cmp	r3, #2
 800733e:	d112      	bne.n	8007366 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	881a      	ldrh	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	1c9a      	adds	r2, r3, #2
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007364:	e011      	b.n	800738a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007366:	f7fc fe67 	bl	8004038 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d803      	bhi.n	800737e <HAL_SPI_Transmit+0x16c>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d102      	bne.n	8007384 <HAL_SPI_Transmit+0x172>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007388:	e0a4      	b.n	80074d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ce      	bne.n	8007332 <HAL_SPI_Transmit+0x120>
 8007394:	e07c      	b.n	8007490 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_SPI_Transmit+0x192>
 800739e:	8afb      	ldrh	r3, [r7, #22]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d170      	bne.n	8007486 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d912      	bls.n	80073d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	881a      	ldrh	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	1c9a      	adds	r2, r3, #2
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b02      	subs	r3, #2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073d2:	e058      	b.n	8007486 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	7812      	ldrb	r2, [r2, #0]
 80073e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80073fa:	e044      	b.n	8007486 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b02      	cmp	r3, #2
 8007408:	d12b      	bne.n	8007462 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d912      	bls.n	800743a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	881a      	ldrh	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	1c9a      	adds	r2, r3, #2
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b02      	subs	r3, #2
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007438:	e025      	b.n	8007486 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	330c      	adds	r3, #12
 8007444:	7812      	ldrb	r2, [r2, #0]
 8007446:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007460:	e011      	b.n	8007486 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007462:	f7fc fde9 	bl	8004038 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d803      	bhi.n	800747a <HAL_SPI_Transmit+0x268>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d102      	bne.n	8007480 <HAL_SPI_Transmit+0x26e>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007484:	e026      	b.n	80074d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1b5      	bne.n	80073fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fb5b 	bl	8007b50 <SPI_EndRxTxTransaction>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074ae:	2300      	movs	r3, #0
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e000      	b.n	80074d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80074d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b08a      	sub	sp, #40	; 0x28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074fc:	2301      	movs	r3, #1
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x26>
 8007510:	2302      	movs	r3, #2
 8007512:	e1fb      	b.n	800790c <HAL_SPI_TransmitReceive+0x41e>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800751c:	f7fc fd8c 	bl	8004038 <HAL_GetTick>
 8007520:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007528:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007530:	887b      	ldrh	r3, [r7, #2]
 8007532:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007534:	887b      	ldrh	r3, [r7, #2]
 8007536:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007538:	7efb      	ldrb	r3, [r7, #27]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d00e      	beq.n	800755c <HAL_SPI_TransmitReceive+0x6e>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007544:	d106      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d102      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x66>
 800754e:	7efb      	ldrb	r3, [r7, #27]
 8007550:	2b04      	cmp	r3, #4
 8007552:	d003      	beq.n	800755c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007554:	2302      	movs	r3, #2
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800755a:	e1cd      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <HAL_SPI_TransmitReceive+0x80>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <HAL_SPI_TransmitReceive+0x80>
 8007568:	887b      	ldrh	r3, [r7, #2]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007574:	e1c0      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b04      	cmp	r3, #4
 8007580:	d003      	beq.n	800758a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2205      	movs	r2, #5
 8007586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	887a      	ldrh	r2, [r7, #2]
 800759a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	887a      	ldrh	r2, [r7, #2]
 80075a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	887a      	ldrh	r2, [r7, #2]
 80075b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	887a      	ldrh	r2, [r7, #2]
 80075b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075cc:	d802      	bhi.n	80075d4 <HAL_SPI_TransmitReceive+0xe6>
 80075ce:	8a3b      	ldrh	r3, [r7, #16]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d908      	bls.n	80075e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075e2:	605a      	str	r2, [r3, #4]
 80075e4:	e007      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b40      	cmp	r3, #64	; 0x40
 8007602:	d007      	beq.n	8007614 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800761c:	d97c      	bls.n	8007718 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_SPI_TransmitReceive+0x13e>
 8007626:	8a7b      	ldrh	r3, [r7, #18]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d169      	bne.n	8007700 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	1c9a      	adds	r2, r3, #2
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007650:	e056      	b.n	8007700 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b02      	cmp	r3, #2
 800765e:	d11b      	bne.n	8007698 <HAL_SPI_TransmitReceive+0x1aa>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d016      	beq.n	8007698 <HAL_SPI_TransmitReceive+0x1aa>
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	2b01      	cmp	r3, #1
 800766e:	d113      	bne.n	8007698 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	1c9a      	adds	r2, r3, #2
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d11c      	bne.n	80076e0 <HAL_SPI_TransmitReceive+0x1f2>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	b292      	uxth	r2, r2
 80076be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	1c9a      	adds	r2, r3, #2
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076dc:	2301      	movs	r3, #1
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076e0:	f7fc fcaa 	bl	8004038 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d807      	bhi.n	8007700 <HAL_SPI_TransmitReceive+0x212>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f6:	d003      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076fe:	e0fb      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1a3      	bne.n	8007652 <HAL_SPI_TransmitReceive+0x164>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d19d      	bne.n	8007652 <HAL_SPI_TransmitReceive+0x164>
 8007716:	e0df      	b.n	80078d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x23a>
 8007720:	8a7b      	ldrh	r3, [r7, #18]
 8007722:	2b01      	cmp	r3, #1
 8007724:	f040 80cb 	bne.w	80078be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	d912      	bls.n	8007758 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b02      	subs	r3, #2
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007756:	e0b2      	b.n	80078be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330c      	adds	r3, #12
 8007762:	7812      	ldrb	r2, [r2, #0]
 8007764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800777e:	e09e      	b.n	80078be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b02      	cmp	r3, #2
 800778c:	d134      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x30a>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d02f      	beq.n	80077f8 <HAL_SPI_TransmitReceive+0x30a>
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	2b01      	cmp	r3, #1
 800779c:	d12c      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d912      	bls.n	80077ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	881a      	ldrh	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	1c9a      	adds	r2, r3, #2
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b02      	subs	r3, #2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077cc:	e012      	b.n	80077f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	7812      	ldrb	r2, [r2, #0]
 80077da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b01      	cmp	r3, #1
 8007804:	d148      	bne.n	8007898 <HAL_SPI_TransmitReceive+0x3aa>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d042      	beq.n	8007898 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	d923      	bls.n	8007866 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007828:	b292      	uxth	r2, r2
 800782a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	1c9a      	adds	r2, r3, #2
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b02      	subs	r3, #2
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	d81f      	bhi.n	8007894 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	e016      	b.n	8007894 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f103 020c 	add.w	r2, r3, #12
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	b2d2      	uxtb	r2, r2
 8007876:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007894:	2301      	movs	r3, #1
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007898:	f7fc fbce 	bl	8004038 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d803      	bhi.n	80078b0 <HAL_SPI_TransmitReceive+0x3c2>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ae:	d102      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0x3c8>
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80078bc:	e01c      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f47f af5b 	bne.w	8007780 <HAL_SPI_TransmitReceive+0x292>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f47f af54 	bne.w	8007780 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f937 	bl	8007b50 <SPI_EndRxTxTransaction>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2220      	movs	r2, #32
 80078f2:	661a      	str	r2, [r3, #96]	; 0x60
 80078f4:	e000      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80078f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800790c:	4618      	mov	r0, r3
 800790e:	3728      	adds	r7, #40	; 0x28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007924:	f7fc fb88 	bl	8004038 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	4413      	add	r3, r2
 8007932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007934:	f7fc fb80 	bl	8004038 <HAL_GetTick>
 8007938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800793a:	4b39      	ldr	r3, [pc, #228]	; (8007a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	015b      	lsls	r3, r3, #5
 8007940:	0d1b      	lsrs	r3, r3, #20
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	fb02 f303 	mul.w	r3, r2, r3
 8007948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800794a:	e054      	b.n	80079f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007952:	d050      	beq.n	80079f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007954:	f7fc fb70 	bl	8004038 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	429a      	cmp	r2, r3
 8007962:	d902      	bls.n	800796a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d13d      	bne.n	80079e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007982:	d111      	bne.n	80079a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800798c:	d004      	beq.n	8007998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007996:	d107      	bne.n	80079a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b0:	d10f      	bne.n	80079d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e017      	b.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4013      	ands	r3, r2
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d19b      	bne.n	800794c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000004 	.word	0x20000004

08007a24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a36:	f7fc faff 	bl	8004038 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	1a9b      	subs	r3, r3, r2
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	4413      	add	r3, r2
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a46:	f7fc faf7 	bl	8004038 <HAL_GetTick>
 8007a4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a54:	4b3d      	ldr	r3, [pc, #244]	; (8007b4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	00da      	lsls	r2, r3, #3
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	0d1b      	lsrs	r3, r3, #20
 8007a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
 8007a6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a6c:	e060      	b.n	8007b30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a74:	d107      	bne.n	8007a86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8c:	d050      	beq.n	8007b30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a8e:	f7fc fad3 	bl	8004038 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d902      	bls.n	8007aa4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d13d      	bne.n	8007b20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ab2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007abc:	d111      	bne.n	8007ae2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac6:	d004      	beq.n	8007ad2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad0:	d107      	bne.n	8007ae2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aea:	d10f      	bne.n	8007b0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e010      	b.n	8007b42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	4013      	ands	r3, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d196      	bne.n	8007a6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3728      	adds	r7, #40	; 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000004 	.word	0x20000004

08007b50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7ff ff5b 	bl	8007a24 <SPI_WaitFifoStateUntilTimeout>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b78:	f043 0220 	orr.w	r2, r3, #32
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e027      	b.n	8007bd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fec0 	bl	8007914 <SPI_WaitFlagStateUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9e:	f043 0220 	orr.w	r2, r3, #32
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e014      	b.n	8007bd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f7ff ff34 	bl	8007a24 <SPI_WaitFifoStateUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e000      	b.n	8007bd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e040      	b.n	8007c70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fb fff6 	bl	8003bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2224      	movs	r2, #36	; 0x24
 8007c08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fc0c 	bl	8008438 <UART_SetConfig>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d101      	bne.n	8007c2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e022      	b.n	8007c70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fdd4 	bl	80087e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fe5b 	bl	8008924 <UART_CheckIdleState>
 8007c6e:	4603      	mov	r3, r0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	f040 8082 	bne.w	8007d96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_UART_Transmit+0x26>
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e07a      	b.n	8007d98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_UART_Transmit+0x38>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e073      	b.n	8007d98 <HAL_UART_Transmit+0x120>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2221      	movs	r2, #33	; 0x21
 8007cc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cc6:	f7fc f9b7 	bl	8004038 <HAL_GetTick>
 8007cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce4:	d108      	bne.n	8007cf8 <HAL_UART_Transmit+0x80>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	e003      	b.n	8007d00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007d08:	e02d      	b.n	8007d66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2200      	movs	r2, #0
 8007d12:	2180      	movs	r1, #128	; 0x80
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fe4e 	bl	80089b6 <UART_WaitOnFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e039      	b.n	8007d98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	881a      	ldrh	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d36:	b292      	uxth	r2, r2
 8007d38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	e008      	b.n	8007d54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	781a      	ldrb	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	b292      	uxth	r2, r2
 8007d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	3301      	adds	r3, #1
 8007d52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1cb      	bne.n	8007d0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2140      	movs	r1, #64	; 0x40
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fe1a 	bl	80089b6 <UART_WaitOnFlagUntilTimeout>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e005      	b.n	8007d98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e000      	b.n	8007d98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007d96:	2302      	movs	r3, #2
  }
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d13d      	bne.n	8007e32 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <HAL_UART_Receive_IT+0x22>
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e036      	b.n	8007e34 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_UART_Receive_IT+0x34>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e02f      	b.n	8007e34 <HAL_UART_Receive_IT+0x94>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d018      	beq.n	8007e22 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	623b      	str	r3, [r7, #32]
 8007e10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	69f9      	ldr	r1, [r7, #28]
 8007e14:	6a3a      	ldr	r2, [r7, #32]
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e6      	bne.n	8007df0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	461a      	mov	r2, r3
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fe89 	bl	8008b40 <UART_Start_Receive_IT>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	e000      	b.n	8007e34 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e32:	2302      	movs	r3, #2
  }
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3728      	adds	r7, #40	; 0x28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b0ba      	sub	sp, #232	; 0xe8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e66:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d115      	bne.n	8007ea4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00f      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 82a3 	beq.w	80083e0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	4798      	blx	r3
      }
      return;
 8007ea2:	e29d      	b.n	80083e0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 8117 	beq.w	80080dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007eba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ebe:	4b85      	ldr	r3, [pc, #532]	; (80080d4 <HAL_UART_IRQHandler+0x298>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 810a 	beq.w	80080dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d011      	beq.n	8007ef8 <HAL_UART_IRQHandler+0xbc>
 8007ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eee:	f043 0201 	orr.w	r2, r3, #1
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d011      	beq.n	8007f28 <HAL_UART_IRQHandler+0xec>
 8007f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2202      	movs	r2, #2
 8007f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1e:	f043 0204 	orr.w	r2, r3, #4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d011      	beq.n	8007f58 <HAL_UART_IRQHandler+0x11c>
 8007f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2204      	movs	r2, #4
 8007f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f4e:	f043 0202 	orr.w	r2, r3, #2
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5c:	f003 0308 	and.w	r3, r3, #8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d017      	beq.n	8007f94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d105      	bne.n	8007f7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2208      	movs	r2, #8
 8007f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8a:	f043 0208 	orr.w	r2, r3, #8
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d012      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x18a>
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00c      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fbc:	f043 0220 	orr.w	r2, r3, #32
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8209 	beq.w	80083e4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00d      	beq.n	8007ffa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d007      	beq.n	8007ffa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800e:	2b40      	cmp	r3, #64	; 0x40
 8008010:	d005      	beq.n	800801e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008016:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800801a:	2b00      	cmp	r3, #0
 800801c:	d04f      	beq.n	80080be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fe26 	bl	8008c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b40      	cmp	r3, #64	; 0x40
 8008030:	d141      	bne.n	80080b6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800804c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3308      	adds	r3, #8
 800805a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800805e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800806a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1d9      	bne.n	8008032 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008082:	2b00      	cmp	r3, #0
 8008084:	d013      	beq.n	80080ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808a:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <HAL_UART_IRQHandler+0x29c>)
 800808c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	4618      	mov	r0, r3
 8008094:	f7fc ff96 	bl	8004fc4 <HAL_DMA_Abort_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d017      	beq.n	80080ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	e00f      	b.n	80080ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f9ac 	bl	800840c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b4:	e00b      	b.n	80080ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f9a8 	bl	800840c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080bc:	e007      	b.n	80080ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f9a4 	bl	800840c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80080cc:	e18a      	b.n	80083e4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ce:	bf00      	nop
    return;
 80080d0:	e188      	b.n	80083e4 <HAL_UART_IRQHandler+0x5a8>
 80080d2:	bf00      	nop
 80080d4:	04000120 	.word	0x04000120
 80080d8:	08008d37 	.word	0x08008d37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	f040 8143 	bne.w	800836c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 813c 	beq.w	800836c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 8135 	beq.w	800836c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2210      	movs	r2, #16
 8008108:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	f040 80b1 	bne.w	800827c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008126:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 815c 	beq.w	80083e8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800813a:	429a      	cmp	r2, r3
 800813c:	f080 8154 	bcs.w	80083e8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	2b20      	cmp	r3, #32
 8008152:	f000 8085 	beq.w	8008260 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800816a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800816e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008184:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800818c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1da      	bne.n	8008156 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e1      	bne.n	80081a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3308      	adds	r3, #8
 80081e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3308      	adds	r3, #8
 80081fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008200:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008202:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008206:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800820e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e3      	bne.n	80081dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800822e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008230:	f023 0310 	bic.w	r3, r3, #16
 8008234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008242:	65bb      	str	r3, [r7, #88]	; 0x58
 8008244:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e4      	bne.n	8008220 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825a:	4618      	mov	r0, r3
 800825c:	f7fc fe79 	bl	8004f52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800826c:	b29b      	uxth	r3, r3
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	b29b      	uxth	r3, r3
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f8d3 	bl	8008420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800827a:	e0b5      	b.n	80083e8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008288:	b29b      	uxth	r3, r3
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80a7 	beq.w	80083ec <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800829e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 80a2 	beq.w	80083ec <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082ca:	647b      	str	r3, [r7, #68]	; 0x44
 80082cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e4      	bne.n	80082a8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	623b      	str	r3, [r7, #32]
   return(result);
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008302:	633a      	str	r2, [r7, #48]	; 0x30
 8008304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e3      	bne.n	80082de <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	60fb      	str	r3, [r7, #12]
   return(result);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f023 0310 	bic.w	r3, r3, #16
 800833c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	69b9      	ldr	r1, [r7, #24]
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	617b      	str	r3, [r7, #20]
   return(result);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e4      	bne.n	8008328 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800835e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f85b 	bl	8008420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800836a:	e03f      	b.n	80083ec <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800836c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00e      	beq.n	8008396 <HAL_UART_IRQHandler+0x55a>
 8008378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800837c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800838c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fe6d 	bl	800906e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008394:	e02d      	b.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00e      	beq.n	80083c0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80083a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01c      	beq.n	80083f0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
    }
    return;
 80083be:	e017      	b.n	80083f0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d012      	beq.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
 80083cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00c      	beq.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fcc2 	bl	8008d62 <UART_EndTransmit_IT>
    return;
 80083de:	e008      	b.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80083e0:	bf00      	nop
 80083e2:	e006      	b.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80083e4:	bf00      	nop
 80083e6:	e004      	b.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80083e8:	bf00      	nop
 80083ea:	e002      	b.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80083ec:	bf00      	nop
 80083ee:	e000      	b.n	80083f2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80083f0:	bf00      	nop
  }

}
 80083f2:	37e8      	adds	r7, #232	; 0xe8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008466:	f023 030c 	bic.w	r3, r3, #12
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6812      	ldr	r2, [r2, #0]
 800846e:	6979      	ldr	r1, [r7, #20]
 8008470:	430b      	orrs	r3, r1
 8008472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4aae      	ldr	r2, [pc, #696]	; (800876c <UART_SetConfig+0x334>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d120      	bne.n	80084fa <UART_SetConfig+0xc2>
 80084b8:	4bad      	ldr	r3, [pc, #692]	; (8008770 <UART_SetConfig+0x338>)
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	f003 0303 	and.w	r3, r3, #3
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d817      	bhi.n	80084f4 <UART_SetConfig+0xbc>
 80084c4:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0x94>)
 80084c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ca:	bf00      	nop
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	080084e9 	.word	0x080084e9
 80084d4:	080084ef 	.word	0x080084ef
 80084d8:	080084e3 	.word	0x080084e3
 80084dc:	2301      	movs	r3, #1
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e0b5      	b.n	800864e <UART_SetConfig+0x216>
 80084e2:	2302      	movs	r3, #2
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e0b2      	b.n	800864e <UART_SetConfig+0x216>
 80084e8:	2304      	movs	r3, #4
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e0af      	b.n	800864e <UART_SetConfig+0x216>
 80084ee:	2308      	movs	r3, #8
 80084f0:	77fb      	strb	r3, [r7, #31]
 80084f2:	e0ac      	b.n	800864e <UART_SetConfig+0x216>
 80084f4:	2310      	movs	r3, #16
 80084f6:	77fb      	strb	r3, [r7, #31]
 80084f8:	e0a9      	b.n	800864e <UART_SetConfig+0x216>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a9d      	ldr	r2, [pc, #628]	; (8008774 <UART_SetConfig+0x33c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d124      	bne.n	800854e <UART_SetConfig+0x116>
 8008504:	4b9a      	ldr	r3, [pc, #616]	; (8008770 <UART_SetConfig+0x338>)
 8008506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800850c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008510:	d011      	beq.n	8008536 <UART_SetConfig+0xfe>
 8008512:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008516:	d817      	bhi.n	8008548 <UART_SetConfig+0x110>
 8008518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800851c:	d011      	beq.n	8008542 <UART_SetConfig+0x10a>
 800851e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008522:	d811      	bhi.n	8008548 <UART_SetConfig+0x110>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <UART_SetConfig+0xf8>
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852c:	d006      	beq.n	800853c <UART_SetConfig+0x104>
 800852e:	e00b      	b.n	8008548 <UART_SetConfig+0x110>
 8008530:	2300      	movs	r3, #0
 8008532:	77fb      	strb	r3, [r7, #31]
 8008534:	e08b      	b.n	800864e <UART_SetConfig+0x216>
 8008536:	2302      	movs	r3, #2
 8008538:	77fb      	strb	r3, [r7, #31]
 800853a:	e088      	b.n	800864e <UART_SetConfig+0x216>
 800853c:	2304      	movs	r3, #4
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e085      	b.n	800864e <UART_SetConfig+0x216>
 8008542:	2308      	movs	r3, #8
 8008544:	77fb      	strb	r3, [r7, #31]
 8008546:	e082      	b.n	800864e <UART_SetConfig+0x216>
 8008548:	2310      	movs	r3, #16
 800854a:	77fb      	strb	r3, [r7, #31]
 800854c:	e07f      	b.n	800864e <UART_SetConfig+0x216>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a89      	ldr	r2, [pc, #548]	; (8008778 <UART_SetConfig+0x340>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d124      	bne.n	80085a2 <UART_SetConfig+0x16a>
 8008558:	4b85      	ldr	r3, [pc, #532]	; (8008770 <UART_SetConfig+0x338>)
 800855a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008560:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008564:	d011      	beq.n	800858a <UART_SetConfig+0x152>
 8008566:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800856a:	d817      	bhi.n	800859c <UART_SetConfig+0x164>
 800856c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008570:	d011      	beq.n	8008596 <UART_SetConfig+0x15e>
 8008572:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008576:	d811      	bhi.n	800859c <UART_SetConfig+0x164>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <UART_SetConfig+0x14c>
 800857c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008580:	d006      	beq.n	8008590 <UART_SetConfig+0x158>
 8008582:	e00b      	b.n	800859c <UART_SetConfig+0x164>
 8008584:	2300      	movs	r3, #0
 8008586:	77fb      	strb	r3, [r7, #31]
 8008588:	e061      	b.n	800864e <UART_SetConfig+0x216>
 800858a:	2302      	movs	r3, #2
 800858c:	77fb      	strb	r3, [r7, #31]
 800858e:	e05e      	b.n	800864e <UART_SetConfig+0x216>
 8008590:	2304      	movs	r3, #4
 8008592:	77fb      	strb	r3, [r7, #31]
 8008594:	e05b      	b.n	800864e <UART_SetConfig+0x216>
 8008596:	2308      	movs	r3, #8
 8008598:	77fb      	strb	r3, [r7, #31]
 800859a:	e058      	b.n	800864e <UART_SetConfig+0x216>
 800859c:	2310      	movs	r3, #16
 800859e:	77fb      	strb	r3, [r7, #31]
 80085a0:	e055      	b.n	800864e <UART_SetConfig+0x216>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a75      	ldr	r2, [pc, #468]	; (800877c <UART_SetConfig+0x344>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d124      	bne.n	80085f6 <UART_SetConfig+0x1be>
 80085ac:	4b70      	ldr	r3, [pc, #448]	; (8008770 <UART_SetConfig+0x338>)
 80085ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80085b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085b8:	d011      	beq.n	80085de <UART_SetConfig+0x1a6>
 80085ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085be:	d817      	bhi.n	80085f0 <UART_SetConfig+0x1b8>
 80085c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085c4:	d011      	beq.n	80085ea <UART_SetConfig+0x1b2>
 80085c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ca:	d811      	bhi.n	80085f0 <UART_SetConfig+0x1b8>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <UART_SetConfig+0x1a0>
 80085d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085d4:	d006      	beq.n	80085e4 <UART_SetConfig+0x1ac>
 80085d6:	e00b      	b.n	80085f0 <UART_SetConfig+0x1b8>
 80085d8:	2300      	movs	r3, #0
 80085da:	77fb      	strb	r3, [r7, #31]
 80085dc:	e037      	b.n	800864e <UART_SetConfig+0x216>
 80085de:	2302      	movs	r3, #2
 80085e0:	77fb      	strb	r3, [r7, #31]
 80085e2:	e034      	b.n	800864e <UART_SetConfig+0x216>
 80085e4:	2304      	movs	r3, #4
 80085e6:	77fb      	strb	r3, [r7, #31]
 80085e8:	e031      	b.n	800864e <UART_SetConfig+0x216>
 80085ea:	2308      	movs	r3, #8
 80085ec:	77fb      	strb	r3, [r7, #31]
 80085ee:	e02e      	b.n	800864e <UART_SetConfig+0x216>
 80085f0:	2310      	movs	r3, #16
 80085f2:	77fb      	strb	r3, [r7, #31]
 80085f4:	e02b      	b.n	800864e <UART_SetConfig+0x216>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a61      	ldr	r2, [pc, #388]	; (8008780 <UART_SetConfig+0x348>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d124      	bne.n	800864a <UART_SetConfig+0x212>
 8008600:	4b5b      	ldr	r3, [pc, #364]	; (8008770 <UART_SetConfig+0x338>)
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800860c:	d011      	beq.n	8008632 <UART_SetConfig+0x1fa>
 800860e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008612:	d817      	bhi.n	8008644 <UART_SetConfig+0x20c>
 8008614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008618:	d011      	beq.n	800863e <UART_SetConfig+0x206>
 800861a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800861e:	d811      	bhi.n	8008644 <UART_SetConfig+0x20c>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <UART_SetConfig+0x1f4>
 8008624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008628:	d006      	beq.n	8008638 <UART_SetConfig+0x200>
 800862a:	e00b      	b.n	8008644 <UART_SetConfig+0x20c>
 800862c:	2300      	movs	r3, #0
 800862e:	77fb      	strb	r3, [r7, #31]
 8008630:	e00d      	b.n	800864e <UART_SetConfig+0x216>
 8008632:	2302      	movs	r3, #2
 8008634:	77fb      	strb	r3, [r7, #31]
 8008636:	e00a      	b.n	800864e <UART_SetConfig+0x216>
 8008638:	2304      	movs	r3, #4
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e007      	b.n	800864e <UART_SetConfig+0x216>
 800863e:	2308      	movs	r3, #8
 8008640:	77fb      	strb	r3, [r7, #31]
 8008642:	e004      	b.n	800864e <UART_SetConfig+0x216>
 8008644:	2310      	movs	r3, #16
 8008646:	77fb      	strb	r3, [r7, #31]
 8008648:	e001      	b.n	800864e <UART_SetConfig+0x216>
 800864a:	2310      	movs	r3, #16
 800864c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008656:	d15c      	bne.n	8008712 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8008658:	7ffb      	ldrb	r3, [r7, #31]
 800865a:	2b08      	cmp	r3, #8
 800865c:	d827      	bhi.n	80086ae <UART_SetConfig+0x276>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <UART_SetConfig+0x22c>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	08008689 	.word	0x08008689
 8008668:	08008691 	.word	0x08008691
 800866c:	08008699 	.word	0x08008699
 8008670:	080086af 	.word	0x080086af
 8008674:	0800869f 	.word	0x0800869f
 8008678:	080086af 	.word	0x080086af
 800867c:	080086af 	.word	0x080086af
 8008680:	080086af 	.word	0x080086af
 8008684:	080086a7 	.word	0x080086a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008688:	f7fd ffc0 	bl	800660c <HAL_RCC_GetPCLK1Freq>
 800868c:	61b8      	str	r0, [r7, #24]
        break;
 800868e:	e013      	b.n	80086b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008690:	f7fd ffde 	bl	8006650 <HAL_RCC_GetPCLK2Freq>
 8008694:	61b8      	str	r0, [r7, #24]
        break;
 8008696:	e00f      	b.n	80086b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008698:	4b3a      	ldr	r3, [pc, #232]	; (8008784 <UART_SetConfig+0x34c>)
 800869a:	61bb      	str	r3, [r7, #24]
        break;
 800869c:	e00c      	b.n	80086b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800869e:	f7fd ff3f 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 80086a2:	61b8      	str	r0, [r7, #24]
        break;
 80086a4:	e008      	b.n	80086b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086aa:	61bb      	str	r3, [r7, #24]
        break;
 80086ac:	e004      	b.n	80086b8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	77bb      	strb	r3, [r7, #30]
        break;
 80086b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 8085 	beq.w	80087ca <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	005a      	lsls	r2, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	441a      	add	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b0f      	cmp	r3, #15
 80086dc:	d916      	bls.n	800870c <UART_SetConfig+0x2d4>
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e4:	d212      	bcs.n	800870c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f023 030f 	bic.w	r3, r3, #15
 80086ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	085b      	lsrs	r3, r3, #1
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	89fb      	ldrh	r3, [r7, #14]
 80086fe:	4313      	orrs	r3, r2
 8008700:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	89fa      	ldrh	r2, [r7, #14]
 8008708:	60da      	str	r2, [r3, #12]
 800870a:	e05e      	b.n	80087ca <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	77bb      	strb	r3, [r7, #30]
 8008710:	e05b      	b.n	80087ca <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008712:	7ffb      	ldrb	r3, [r7, #31]
 8008714:	2b08      	cmp	r3, #8
 8008716:	d837      	bhi.n	8008788 <UART_SetConfig+0x350>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x2e8>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008745 	.word	0x08008745
 8008724:	0800874d 	.word	0x0800874d
 8008728:	08008755 	.word	0x08008755
 800872c:	08008789 	.word	0x08008789
 8008730:	0800875b 	.word	0x0800875b
 8008734:	08008789 	.word	0x08008789
 8008738:	08008789 	.word	0x08008789
 800873c:	08008789 	.word	0x08008789
 8008740:	08008763 	.word	0x08008763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fd ff62 	bl	800660c <HAL_RCC_GetPCLK1Freq>
 8008748:	61b8      	str	r0, [r7, #24]
        break;
 800874a:	e022      	b.n	8008792 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800874c:	f7fd ff80 	bl	8006650 <HAL_RCC_GetPCLK2Freq>
 8008750:	61b8      	str	r0, [r7, #24]
        break;
 8008752:	e01e      	b.n	8008792 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008754:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <UART_SetConfig+0x34c>)
 8008756:	61bb      	str	r3, [r7, #24]
        break;
 8008758:	e01b      	b.n	8008792 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800875a:	f7fd fee1 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 800875e:	61b8      	str	r0, [r7, #24]
        break;
 8008760:	e017      	b.n	8008792 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008766:	61bb      	str	r3, [r7, #24]
        break;
 8008768:	e013      	b.n	8008792 <UART_SetConfig+0x35a>
 800876a:	bf00      	nop
 800876c:	40013800 	.word	0x40013800
 8008770:	40021000 	.word	0x40021000
 8008774:	40004400 	.word	0x40004400
 8008778:	40004800 	.word	0x40004800
 800877c:	40004c00 	.word	0x40004c00
 8008780:	40005000 	.word	0x40005000
 8008784:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	77bb      	strb	r3, [r7, #30]
        break;
 8008790:	bf00      	nop
    }

    if (pclk != 0U)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d018      	beq.n	80087ca <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	085a      	lsrs	r2, r3, #1
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	441a      	add	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b0f      	cmp	r3, #15
 80087b2:	d908      	bls.n	80087c6 <UART_SetConfig+0x38e>
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ba:	d204      	bcs.n	80087c6 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	60da      	str	r2, [r3, #12]
 80087c4:	e001      	b.n	80087ca <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80087d6:	7fbb      	ldrb	r3, [r7, #30]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00a      	beq.n	800880a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00a      	beq.n	8008892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01a      	beq.n	80088f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088de:	d10a      	bne.n	80088f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	605a      	str	r2, [r3, #4]
  }
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af02      	add	r7, sp, #8
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008934:	f7fb fb80 	bl	8004038 <HAL_GetTick>
 8008938:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0308 	and.w	r3, r3, #8
 8008944:	2b08      	cmp	r3, #8
 8008946:	d10e      	bne.n	8008966 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f82d 	bl	80089b6 <UART_WaitOnFlagUntilTimeout>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e023      	b.n	80089ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0304 	and.w	r3, r3, #4
 8008970:	2b04      	cmp	r3, #4
 8008972:	d10e      	bne.n	8008992 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f817 	bl	80089b6 <UART_WaitOnFlagUntilTimeout>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e00d      	b.n	80089ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b09c      	sub	sp, #112	; 0x70
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c6:	e0a5      	b.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ce:	f000 80a1 	beq.w	8008b14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d2:	f7fb fb31 	bl	8004038 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80089e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d13e      	bne.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089fc:	667b      	str	r3, [r7, #100]	; 0x64
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e6      	bne.n	80089e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	663b      	str	r3, [r7, #96]	; 0x60
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e5      	bne.n	8008a1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2220      	movs	r2, #32
 8008a52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2220      	movs	r2, #32
 8008a58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e067      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d04f      	beq.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a82:	d147      	bne.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aac:	637b      	str	r3, [r7, #52]	; 0x34
 8008aae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e6      	bne.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3308      	adds	r3, #8
 8008ade:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ae0:	623a      	str	r2, [r7, #32]
 8008ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	69f9      	ldr	r1, [r7, #28]
 8008ae6:	6a3a      	ldr	r2, [r7, #32]
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e5      	bne.n	8008ac0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2220      	movs	r2, #32
 8008afe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e010      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	69da      	ldr	r2, [r3, #28]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	f43f af4a 	beq.w	80089c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3770      	adds	r7, #112	; 0x70
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b091      	sub	sp, #68	; 0x44
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	88fa      	ldrh	r2, [r7, #6]
 8008b60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b72:	d10e      	bne.n	8008b92 <UART_Start_Receive_IT+0x52>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d105      	bne.n	8008b88 <UART_Start_Receive_IT+0x48>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b86:	e01a      	b.n	8008bbe <UART_Start_Receive_IT+0x7e>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	22ff      	movs	r2, #255	; 0xff
 8008b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b90:	e015      	b.n	8008bbe <UART_Start_Receive_IT+0x7e>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10d      	bne.n	8008bb6 <UART_Start_Receive_IT+0x76>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d104      	bne.n	8008bac <UART_Start_Receive_IT+0x6c>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	22ff      	movs	r2, #255	; 0xff
 8008ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008baa:	e008      	b.n	8008bbe <UART_Start_Receive_IT+0x7e>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	227f      	movs	r2, #127	; 0x7f
 8008bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bb4:	e003      	b.n	8008bbe <UART_Start_Receive_IT+0x7e>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2222      	movs	r2, #34	; 0x22
 8008bca:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	f043 0301 	orr.w	r3, r3, #1
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bec:	637a      	str	r2, [r7, #52]	; 0x34
 8008bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e5      	bne.n	8008bcc <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c08:	d107      	bne.n	8008c1a <UART_Start_Receive_IT+0xda>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <UART_Start_Receive_IT+0x128>)
 8008c16:	665a      	str	r2, [r3, #100]	; 0x64
 8008c18:	e002      	b.n	8008c20 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <UART_Start_Receive_IT+0x12c>)
 8008c1e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	613b      	str	r3, [r7, #16]
   return(result);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	623b      	str	r3, [r7, #32]
 8008c48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	69f9      	ldr	r1, [r7, #28]
 8008c4c:	6a3a      	ldr	r2, [r7, #32]
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e6      	bne.n	8008c28 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3744      	adds	r7, #68	; 0x44
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	08008f13 	.word	0x08008f13
 8008c6c:	08008db7 	.word	0x08008db7

08008c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b095      	sub	sp, #84	; 0x54
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c96:	643b      	str	r3, [r7, #64]	; 0x40
 8008c98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e6      	bne.n	8008c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d118      	bne.n	8008d18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f023 0310 	bic.w	r3, r3, #16
 8008cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6979      	ldr	r1, [r7, #20]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	613b      	str	r3, [r7, #16]
   return(result);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e6      	bne.n	8008ce6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008d2a:	bf00      	nop
 8008d2c:	3754      	adds	r7, #84	; 0x54
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7ff fb59 	bl	800840c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b088      	sub	sp, #32
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	613b      	str	r3, [r7, #16]
   return(result);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e6      	bne.n	8008d6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fb25 	bl	80083f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dae:	bf00      	nop
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b096      	sub	sp, #88	; 0x58
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008dc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dcc:	2b22      	cmp	r3, #34	; 0x22
 8008dce:	f040 8094 	bne.w	8008efa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008dd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ddc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008de0:	b2d9      	uxtb	r1, r3
 8008de2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dec:	400a      	ands	r2, r1
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d177      	bne.n	8008f0a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e38:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e6      	bne.n	8008e1a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3308      	adds	r3, #8
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	f023 0301 	bic.w	r3, r3, #1
 8008e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e5      	bne.n	8008e4c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d12e      	bne.n	8008ef2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0310 	bic.w	r3, r3, #16
 8008eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	69b9      	ldr	r1, [r7, #24]
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e6      	bne.n	8008e9a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	f003 0310 	and.w	r3, r3, #16
 8008ed6:	2b10      	cmp	r3, #16
 8008ed8:	d103      	bne.n	8008ee2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2210      	movs	r2, #16
 8008ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff fa98 	bl	8008420 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ef0:	e00b      	b.n	8008f0a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7f9 fdaa 	bl	8002a4c <HAL_UART_RxCpltCallback>
}
 8008ef8:	e007      	b.n	8008f0a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	699a      	ldr	r2, [r3, #24]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0208 	orr.w	r2, r2, #8
 8008f08:	619a      	str	r2, [r3, #24]
}
 8008f0a:	bf00      	nop
 8008f0c:	3758      	adds	r7, #88	; 0x58
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b096      	sub	sp, #88	; 0x58
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f28:	2b22      	cmp	r3, #34	; 0x22
 8008f2a:	f040 8094 	bne.w	8009056 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008f42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f46:	4013      	ands	r3, r2
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	1c9a      	adds	r2, r3, #2
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d177      	bne.n	8009066 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f94:	643b      	str	r3, [r7, #64]	; 0x40
 8008f96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3308      	adds	r3, #8
 8008fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f023 0301 	bic.w	r3, r3, #1
 8008fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e5      	bne.n	8008fa8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d12e      	bne.n	800904e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	60bb      	str	r3, [r7, #8]
   return(result);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f023 0310 	bic.w	r3, r3, #16
 800900a:	647b      	str	r3, [r7, #68]	; 0x44
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009014:	61bb      	str	r3, [r7, #24]
 8009016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6979      	ldr	r1, [r7, #20]
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	613b      	str	r3, [r7, #16]
   return(result);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e6      	bne.n	8008ff6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	f003 0310 	and.w	r3, r3, #16
 8009032:	2b10      	cmp	r3, #16
 8009034:	d103      	bne.n	800903e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2210      	movs	r2, #16
 800903c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff f9ea 	bl	8008420 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800904c:	e00b      	b.n	8009066 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7f9 fcfc 	bl	8002a4c <HAL_UART_RxCpltCallback>
}
 8009054:	e007      	b.n	8009066 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0208 	orr.w	r2, r2, #8
 8009064:	619a      	str	r2, [r3, #24]
}
 8009066:	bf00      	nop
 8009068:	3758      	adds	r7, #88	; 0x58
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
	...

08009084 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009088:	4904      	ldr	r1, [pc, #16]	; (800909c <MX_FATFS_Init+0x18>)
 800908a:	4805      	ldr	r0, [pc, #20]	; (80090a0 <MX_FATFS_Init+0x1c>)
 800908c:	f004 fbc8 	bl	800d820 <FATFS_LinkDriver>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	4b03      	ldr	r3, [pc, #12]	; (80090a4 <MX_FATFS_Init+0x20>)
 8009096:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009098:	bf00      	nop
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20002c74 	.word	0x20002c74
 80090a0:	20000010 	.word	0x20000010
 80090a4:	20002c78 	.word	0x20002c78

080090a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7f8 ffdd 	bl	8002084 <SD_disk_initialize>
 80090ca:	4603      	mov	r3, r0
 80090cc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	4603      	mov	r3, r0
 80090de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f9 f8ba 	bl	800225c <SD_disk_status>
 80090e8:	4603      	mov	r3, r0
 80090ea:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8009104:	7bf8      	ldrb	r0, [r7, #15]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	f7f9 f8bc 	bl	8002288 <SD_disk_read>
 8009110:	4603      	mov	r3, r0
 8009112:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	607a      	str	r2, [r7, #4]
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800912c:	7bf8      	ldrb	r0, [r7, #15]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	f7f9 f912 	bl	800235c <SD_disk_write>
 8009138:	4603      	mov	r3, r0
 800913a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	603a      	str	r2, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
 8009150:	460b      	mov	r3, r1
 8009152:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	79b9      	ldrb	r1, [r7, #6]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	4618      	mov	r0, r3
 800915c:	f7f9 f982 	bl	8002464 <SD_disk_ioctl>
 8009160:	4603      	mov	r3, r0
 8009162:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	4a08      	ldr	r2, [pc, #32]	; (800919c <disk_status+0x30>)
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	79fa      	ldrb	r2, [r7, #7]
 8009184:	4905      	ldr	r1, [pc, #20]	; (800919c <disk_status+0x30>)
 8009186:	440a      	add	r2, r1
 8009188:	7a12      	ldrb	r2, [r2, #8]
 800918a:	4610      	mov	r0, r2
 800918c:	4798      	blx	r3
 800918e:	4603      	mov	r3, r0
 8009190:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009192:	7bfb      	ldrb	r3, [r7, #15]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20000448 	.word	0x20000448

080091a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	4a0d      	ldr	r2, [pc, #52]	; (80091e8 <disk_initialize+0x48>)
 80091b2:	5cd3      	ldrb	r3, [r2, r3]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d111      	bne.n	80091dc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	4a0b      	ldr	r2, [pc, #44]	; (80091e8 <disk_initialize+0x48>)
 80091bc:	2101      	movs	r1, #1
 80091be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <disk_initialize+0x48>)
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	79fa      	ldrb	r2, [r7, #7]
 80091ce:	4906      	ldr	r1, [pc, #24]	; (80091e8 <disk_initialize+0x48>)
 80091d0:	440a      	add	r2, r1
 80091d2:	7a12      	ldrb	r2, [r2, #8]
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000448 	.word	0x20000448

080091ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	4a0a      	ldr	r2, [pc, #40]	; (8009228 <disk_read+0x3c>)
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	689c      	ldr	r4, [r3, #8]
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	4a07      	ldr	r2, [pc, #28]	; (8009228 <disk_read+0x3c>)
 800920c:	4413      	add	r3, r2
 800920e:	7a18      	ldrb	r0, [r3, #8]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	68b9      	ldr	r1, [r7, #8]
 8009216:	47a0      	blx	r4
 8009218:	4603      	mov	r3, r0
 800921a:	75fb      	strb	r3, [r7, #23]
  return res;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
}
 800921e:	4618      	mov	r0, r3
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	bd90      	pop	{r4, r7, pc}
 8009226:	bf00      	nop
 8009228:	20000448 	.word	0x20000448

0800922c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800922c:	b590      	push	{r4, r7, lr}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	4a0a      	ldr	r2, [pc, #40]	; (8009268 <disk_write+0x3c>)
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	68dc      	ldr	r4, [r3, #12]
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4a07      	ldr	r2, [pc, #28]	; (8009268 <disk_write+0x3c>)
 800924c:	4413      	add	r3, r2
 800924e:	7a18      	ldrb	r0, [r3, #8]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	47a0      	blx	r4
 8009258:	4603      	mov	r3, r0
 800925a:	75fb      	strb	r3, [r7, #23]
  return res;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	bd90      	pop	{r4, r7, pc}
 8009266:	bf00      	nop
 8009268:	20000448 	.word	0x20000448

0800926c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	603a      	str	r2, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
 8009278:	460b      	mov	r3, r1
 800927a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <disk_ioctl+0x38>)
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	79fa      	ldrb	r2, [r7, #7]
 800928a:	4906      	ldr	r1, [pc, #24]	; (80092a4 <disk_ioctl+0x38>)
 800928c:	440a      	add	r2, r1
 800928e:	7a10      	ldrb	r0, [r2, #8]
 8009290:	79b9      	ldrb	r1, [r7, #6]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	4798      	blx	r3
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
  return res;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20000448 	.word	0x20000448

080092a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80092bc:	e007      	b.n	80092ce <mem_cpy+0x26>
		*d++ = *s++;
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	1c53      	adds	r3, r2, #1
 80092c2:	613b      	str	r3, [r7, #16]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	1c59      	adds	r1, r3, #1
 80092c8:	6179      	str	r1, [r7, #20]
 80092ca:	7812      	ldrb	r2, [r2, #0]
 80092cc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	1e5a      	subs	r2, r3, #1
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1f2      	bne.n	80092be <mem_cpy+0x16>
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092e6:	b480      	push	{r7}
 80092e8:	b087      	sub	sp, #28
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80092f6:	e005      	b.n	8009304 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	617a      	str	r2, [r7, #20]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1f4      	bne.n	80092f8 <mem_set+0x12>
}
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	371c      	adds	r7, #28
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800931c:	b480      	push	{r7}
 800931e:	b089      	sub	sp, #36	; 0x24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009334:	bf00      	nop
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	1e5a      	subs	r2, r3, #1
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00d      	beq.n	800935c <mem_cmp+0x40>
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	61fa      	str	r2, [r7, #28]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	61ba      	str	r2, [r7, #24]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	1acb      	subs	r3, r1, r3
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0ec      	beq.n	8009336 <mem_cmp+0x1a>
	return r;
 800935c:	697b      	ldr	r3, [r7, #20]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3724      	adds	r7, #36	; 0x24
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009374:	e002      	b.n	800937c <chk_chr+0x12>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3301      	adds	r3, #1
 800937a:	607b      	str	r3, [r7, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d005      	beq.n	8009390 <chk_chr+0x26>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	4293      	cmp	r3, r2
 800938e:	d1f2      	bne.n	8009376 <chk_chr+0xc>
	return *str;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	781b      	ldrb	r3, [r3, #0]
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093aa:	2300      	movs	r3, #0
 80093ac:	60bb      	str	r3, [r7, #8]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	e03d      	b.n	8009430 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 80093b4:	4932      	ldr	r1, [pc, #200]	; (8009480 <chk_lock+0xe0>)
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	4613      	mov	r3, r2
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d02e      	beq.n	8009426 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80093c8:	492d      	ldr	r1, [pc, #180]	; (8009480 <chk_lock+0xe0>)
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4613      	mov	r3, r2
 80093ce:	005b      	lsls	r3, r3, #1
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d122      	bne.n	800942a <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 80093e4:	4926      	ldr	r1, [pc, #152]	; (8009480 <chk_lock+0xe0>)
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4613      	mov	r3, r2
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	440b      	add	r3, r1
 80093f2:	3304      	adds	r3, #4
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fc:	3308      	adds	r3, #8
 80093fe:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009400:	429a      	cmp	r2, r3
 8009402:	d112      	bne.n	800942a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8009404:	491e      	ldr	r1, [pc, #120]	; (8009480 <chk_lock+0xe0>)
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4613      	mov	r3, r2
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	3308      	adds	r3, #8
 8009414:	881a      	ldrh	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800941c:	3306      	adds	r3, #6
 800941e:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8009420:	429a      	cmp	r2, r3
 8009422:	d102      	bne.n	800942a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8009424:	e007      	b.n	8009436 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8009426:	2301      	movs	r3, #1
 8009428:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d9be      	bls.n	80093b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d109      	bne.n	8009450 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d102      	bne.n	8009448 <chk_lock+0xa8>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b02      	cmp	r3, #2
 8009446:	d101      	bne.n	800944c <chk_lock+0xac>
 8009448:	2300      	movs	r3, #0
 800944a:	e013      	b.n	8009474 <chk_lock+0xd4>
 800944c:	2312      	movs	r3, #18
 800944e:	e011      	b.n	8009474 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10b      	bne.n	800946e <chk_lock+0xce>
 8009456:	490a      	ldr	r1, [pc, #40]	; (8009480 <chk_lock+0xe0>)
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	4613      	mov	r3, r2
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	330a      	adds	r3, #10
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800946c:	d101      	bne.n	8009472 <chk_lock+0xd2>
 800946e:	2310      	movs	r3, #16
 8009470:	e000      	b.n	8009474 <chk_lock+0xd4>
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	20000230 	.word	0x20000230

08009484 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800948a:	2300      	movs	r3, #0
 800948c:	607b      	str	r3, [r7, #4]
 800948e:	e002      	b.n	8009496 <enq_lock+0x12>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3301      	adds	r3, #1
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d809      	bhi.n	80094b0 <enq_lock+0x2c>
 800949c:	490a      	ldr	r1, [pc, #40]	; (80094c8 <enq_lock+0x44>)
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1ef      	bne.n	8009490 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	bf14      	ite	ne
 80094b6:	2301      	movne	r3, #1
 80094b8:	2300      	moveq	r3, #0
 80094ba:	b2db      	uxtb	r3, r3
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	20000230 	.word	0x20000230

080094cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	e030      	b.n	800953e <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 80094dc:	495b      	ldr	r1, [pc, #364]	; (800964c <inc_lock+0x180>)
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	4613      	mov	r3, r2
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d11f      	bne.n	8009538 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 80094f8:	4954      	ldr	r1, [pc, #336]	; (800964c <inc_lock+0x180>)
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4613      	mov	r3, r2
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	3304      	adds	r3, #4
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009510:	3308      	adds	r3, #8
 8009512:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8009514:	429a      	cmp	r2, r3
 8009516:	d10f      	bne.n	8009538 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8009518:	494c      	ldr	r1, [pc, #304]	; (800964c <inc_lock+0x180>)
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4613      	mov	r3, r2
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	3308      	adds	r3, #8
 8009528:	881a      	ldrh	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009530:	3306      	adds	r3, #6
 8009532:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8009534:	429a      	cmp	r2, r3
 8009536:	d006      	beq.n	8009546 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d9cb      	bls.n	80094dc <inc_lock+0x10>
 8009544:	e000      	b.n	8009548 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8009546:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d14a      	bne.n	80095e4 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e002      	b.n	800955a <inc_lock+0x8e>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d809      	bhi.n	8009574 <inc_lock+0xa8>
 8009560:	493a      	ldr	r1, [pc, #232]	; (800964c <inc_lock+0x180>)
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	4613      	mov	r3, r2
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1ef      	bne.n	8009554 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d101      	bne.n	800957e <inc_lock+0xb2>
 800957a:	2300      	movs	r3, #0
 800957c:	e05f      	b.n	800963e <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009584:	6819      	ldr	r1, [r3, #0]
 8009586:	4831      	ldr	r0, [pc, #196]	; (800964c <inc_lock+0x180>)
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4613      	mov	r3, r2
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4403      	add	r3, r0
 8009594:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959c:	3308      	adds	r3, #8
 800959e:	6819      	ldr	r1, [r3, #0]
 80095a0:	482a      	ldr	r0, [pc, #168]	; (800964c <inc_lock+0x180>)
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4613      	mov	r3, r2
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4403      	add	r3, r0
 80095ae:	3304      	adds	r3, #4
 80095b0:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b8:	3306      	adds	r3, #6
 80095ba:	8818      	ldrh	r0, [r3, #0]
 80095bc:	4923      	ldr	r1, [pc, #140]	; (800964c <inc_lock+0x180>)
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	4613      	mov	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	3308      	adds	r3, #8
 80095cc:	4602      	mov	r2, r0
 80095ce:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80095d0:	491e      	ldr	r1, [pc, #120]	; (800964c <inc_lock+0x180>)
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4613      	mov	r3, r2
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	330a      	adds	r3, #10
 80095e0:	2200      	movs	r2, #0
 80095e2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00c      	beq.n	8009604 <inc_lock+0x138>
 80095ea:	4918      	ldr	r1, [pc, #96]	; (800964c <inc_lock+0x180>)
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4613      	mov	r3, r2
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	440b      	add	r3, r1
 80095f8:	330a      	adds	r3, #10
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <inc_lock+0x138>
 8009600:	2300      	movs	r3, #0
 8009602:	e01c      	b.n	800963e <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <inc_lock+0x156>
 800960a:	4910      	ldr	r1, [pc, #64]	; (800964c <inc_lock+0x180>)
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4613      	mov	r3, r2
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	330a      	adds	r3, #10
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	3301      	adds	r3, #1
 800961e:	b299      	uxth	r1, r3
 8009620:	e001      	b.n	8009626 <inc_lock+0x15a>
 8009622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009626:	4809      	ldr	r0, [pc, #36]	; (800964c <inc_lock+0x180>)
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4613      	mov	r3, r2
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4403      	add	r3, r0
 8009634:	330a      	adds	r3, #10
 8009636:	460a      	mov	r2, r1
 8009638:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	20000230 	.word	0x20000230

08009650 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3b01      	subs	r3, #1
 800965c:	607b      	str	r3, [r7, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d82e      	bhi.n	80096c2 <dec_lock+0x72>
		n = Files[i].ctr;
 8009664:	491b      	ldr	r1, [pc, #108]	; (80096d4 <dec_lock+0x84>)
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	330a      	adds	r3, #10
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009678:	89fb      	ldrh	r3, [r7, #14]
 800967a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800967e:	d101      	bne.n	8009684 <dec_lock+0x34>
 8009680:	2300      	movs	r3, #0
 8009682:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009684:	89fb      	ldrh	r3, [r7, #14]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <dec_lock+0x40>
 800968a:	89fb      	ldrh	r3, [r7, #14]
 800968c:	3b01      	subs	r3, #1
 800968e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009690:	4910      	ldr	r1, [pc, #64]	; (80096d4 <dec_lock+0x84>)
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	330a      	adds	r3, #10
 80096a0:	89fa      	ldrh	r2, [r7, #14]
 80096a2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80096a4:	89fb      	ldrh	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d108      	bne.n	80096bc <dec_lock+0x6c>
 80096aa:	490a      	ldr	r1, [pc, #40]	; (80096d4 <dec_lock+0x84>)
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	440b      	add	r3, r1
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	737b      	strb	r3, [r7, #13]
 80096c0:	e001      	b.n	80096c6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80096c2:	2302      	movs	r3, #2
 80096c4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80096c6:	7b7b      	ldrb	r3, [r7, #13]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	20000230 	.word	0x20000230

080096d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	e016      	b.n	8009714 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80096e6:	4910      	ldr	r1, [pc, #64]	; (8009728 <clear_lock+0x50>)
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4613      	mov	r3, r2
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d108      	bne.n	800970e <clear_lock+0x36>
 80096fc:	490a      	ldr	r1, [pc, #40]	; (8009728 <clear_lock+0x50>)
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4613      	mov	r3, r2
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3301      	adds	r3, #1
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d9e5      	bls.n	80096e6 <clear_lock+0xe>
	}
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	20000230 	.word	0x20000230

0800972c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800973e:	3304      	adds	r3, #4
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d047      	beq.n	80097d6 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800974c:	330c      	adds	r3, #12
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009758:	3301      	adds	r3, #1
 800975a:	7818      	ldrb	r0, [r3, #0]
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	2301      	movs	r3, #1
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	f7ff fd63 	bl	800922c <disk_write>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <sync_window+0x46>
			res = FR_DISK_ERR;
 800976c:	2301      	movs	r3, #1
 800976e:	73fb      	strb	r3, [r7, #15]
 8009770:	e031      	b.n	80097d6 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009778:	3304      	adds	r3, #4
 800977a:	2200      	movs	r2, #0
 800977c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	1ad2      	subs	r2, r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009790:	3318      	adds	r3, #24
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d21e      	bcs.n	80097d6 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800979e:	3303      	adds	r3, #3
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	e014      	b.n	80097d0 <sync_window+0xa4>
					wsect += fs->fsize;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ac:	3318      	adds	r3, #24
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4413      	add	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097bc:	3301      	adds	r3, #1
 80097be:	7818      	ldrb	r0, [r3, #0]
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	2301      	movs	r3, #1
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	f7ff fd31 	bl	800922c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d8e7      	bhi.n	80097a6 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80097f4:	330c      	adds	r3, #12
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d01f      	beq.n	800983e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff ff94 	bl	800972c <sync_window>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d117      	bne.n	800983e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009814:	3301      	adds	r3, #1
 8009816:	7818      	ldrb	r0, [r3, #0]
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	2301      	movs	r3, #1
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	f7ff fce5 	bl	80091ec <disk_read>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009828:	f04f 33ff 	mov.w	r3, #4294967295
 800982c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800982e:	2301      	movs	r3, #1
 8009830:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009838:	330c      	adds	r3, #12
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800983e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff ff6b 	bl	800972c <sync_window>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f040 80bd 	bne.w	80099dc <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b03      	cmp	r3, #3
 800986c:	f040 80a7 	bne.w	80099be <sync_fs+0x176>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009876:	3305      	adds	r3, #5
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	2b01      	cmp	r3, #1
 800987c:	f040 809f 	bne.w	80099be <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009888:	330a      	adds	r3, #10
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	2100      	movs	r1, #0
 8009890:	f7ff fd29 	bl	80092e6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2255      	movs	r2, #85	; 0x55
 8009898:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	22aa      	movs	r2, #170	; 0xaa
 80098a0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2252      	movs	r2, #82	; 0x52
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2252      	movs	r2, #82	; 0x52
 80098ae:	705a      	strb	r2, [r3, #1]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2261      	movs	r2, #97	; 0x61
 80098b4:	709a      	strb	r2, [r3, #2]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2241      	movs	r2, #65	; 0x41
 80098ba:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2272      	movs	r2, #114	; 0x72
 80098c0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2272      	movs	r2, #114	; 0x72
 80098c8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2241      	movs	r2, #65	; 0x41
 80098d0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2261      	movs	r2, #97	; 0x61
 80098d8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e2:	3310      	adds	r3, #16
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f4:	3310      	adds	r3, #16
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	0a1b      	lsrs	r3, r3, #8
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990c:	3310      	adds	r3, #16
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	b2da      	uxtb	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009920:	3310      	adds	r3, #16
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	0e1b      	lsrs	r3, r3, #24
 8009926:	b2da      	uxtb	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009934:	330c      	adds	r3, #12
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	b2da      	uxtb	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009946:	330c      	adds	r3, #12
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	0a1b      	lsrs	r3, r3, #8
 800994e:	b29b      	uxth	r3, r3
 8009950:	b2da      	uxtb	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800995e:	330c      	adds	r3, #12
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	0c1b      	lsrs	r3, r3, #16
 8009964:	b2da      	uxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009972:	330c      	adds	r3, #12
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	0e1b      	lsrs	r3, r3, #24
 8009978:	b2da      	uxtb	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009986:	331c      	adds	r3, #28
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009992:	330c      	adds	r3, #12
 8009994:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800999c:	3301      	adds	r3, #1
 800999e:	7818      	ldrb	r0, [r3, #0]
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80099a8:	330c      	adds	r3, #12
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	2301      	movs	r3, #1
 80099ae:	f7ff fc3d 	bl	800922c <disk_write>
			fs->fsi_flag = 0;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b8:	3305      	adds	r3, #5
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c4:	3301      	adds	r3, #1
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2200      	movs	r2, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fc4d 	bl	800926c <disk_ioctl>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <sync_fs+0x194>
			res = FR_DISK_ERR;
 80099d8:	2301      	movs	r3, #1
 80099da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	3b02      	subs	r3, #2
 80099f4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099fc:	3314      	adds	r3, #20
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3b02      	subs	r3, #2
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d301      	bcc.n	8009a0c <clust2sect+0x26>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e00e      	b.n	8009a2a <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a12:	3302      	adds	r3, #2
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	fb03 f202 	mul.w	r2, r3, r2
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009a24:	3308      	adds	r3, #8
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4413      	add	r3, r2
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d907      	bls.n	8009a56 <get_fat+0x20>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4c:	3314      	adds	r3, #20
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d302      	bcc.n	8009a5c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009a56:	2301      	movs	r3, #1
 8009a58:	617b      	str	r3, [r7, #20]
 8009a5a:	e0ec      	b.n	8009c36 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a60:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	f000 809e 	beq.w	8009bac <get_fat+0x176>
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	f300 80d6 	bgt.w	8009c22 <get_fat+0x1ec>
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d002      	beq.n	8009a80 <get_fat+0x4a>
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d063      	beq.n	8009b46 <get_fat+0x110>
 8009a7e:	e0d0      	b.n	8009c22 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	085b      	lsrs	r3, r3, #1
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a9c:	330a      	adds	r3, #10
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009aa8:	4413      	add	r3, r2
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff fe97 	bl	80097e0 <move_window>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 80b7 	bne.w	8009c28 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	60fa      	str	r2, [r7, #12]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ac6:	320a      	adds	r2, #10
 8009ac8:	8812      	ldrh	r2, [r2, #0]
 8009aca:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ace:	fb02 f201 	mul.w	r2, r2, r1
 8009ad2:	1a9b      	subs	r3, r3, r2
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	5cd3      	ldrb	r3, [r2, r3]
 8009ad8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae8:	330a      	adds	r3, #10
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	4619      	mov	r1, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009af4:	4413      	add	r3, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff fe71 	bl	80097e0 <move_window>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 8093 	bne.w	8009c2c <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0c:	330a      	adds	r3, #10
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b18:	fb02 f201 	mul.w	r2, r2, r1
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	5cd3      	ldrb	r3, [r2, r3]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	461a      	mov	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <get_fat+0x106>
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	091b      	lsrs	r3, r3, #4
 8009b3a:	e002      	b.n	8009b42 <get_fat+0x10c>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b42:	617b      	str	r3, [r7, #20]
			break;
 8009b44:	e077      	b.n	8009c36 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b54:	330a      	adds	r3, #10
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	085b      	lsrs	r3, r3, #1
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b64:	4413      	add	r3, r2
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff fe39 	bl	80097e0 <move_window>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d15d      	bne.n	8009c30 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	005a      	lsls	r2, r3, #1
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7e:	330a      	adds	r3, #10
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b86:	fb03 f301 	mul.w	r3, r3, r1
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	4413      	add	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	3301      	adds	r3, #1
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	b21a      	sxth	r2, r3
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	b21b      	sxth	r3, r3
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	b21b      	sxth	r3, r3
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	617b      	str	r3, [r7, #20]
			break;
 8009baa:	e044      	b.n	8009c36 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bba:	330a      	adds	r3, #10
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	089b      	lsrs	r3, r3, #2
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bca:	4413      	add	r3, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff fe06 	bl	80097e0 <move_window>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d12c      	bne.n	8009c34 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	009a      	lsls	r2, r3, #2
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be4:	330a      	adds	r3, #10
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009bec:	fb03 f301 	mul.w	r3, r3, r1
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	3303      	adds	r3, #3
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	061a      	lsls	r2, r3, #24
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	3302      	adds	r3, #2
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	3201      	adds	r2, #1
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	0212      	lsls	r2, r2, #8
 8009c12:	4313      	orrs	r3, r2
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c1e:	617b      	str	r3, [r7, #20]
			break;
 8009c20:	e009      	b.n	8009c36 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8009c22:	2301      	movs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e006      	b.n	8009c36 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c28:	bf00      	nop
 8009c2a:	e004      	b.n	8009c36 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c2c:	bf00      	nop
 8009c2e:	e002      	b.n	8009c36 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009c30:	bf00      	nop
 8009c32:	e000      	b.n	8009c36 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009c34:	bf00      	nop
		}
	}

	return val;
 8009c36:	697b      	ldr	r3, [r7, #20]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d907      	bls.n	8009c62 <put_fat+0x22>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c58:	3314      	adds	r3, #20
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d302      	bcc.n	8009c68 <put_fat+0x28>
		res = FR_INT_ERR;
 8009c62:	2302      	movs	r3, #2
 8009c64:	77fb      	strb	r3, [r7, #31]
 8009c66:	e146      	b.n	8009ef6 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	f000 80d9 	beq.w	8009e28 <put_fat+0x1e8>
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	f300 8133 	bgt.w	8009ee2 <put_fat+0x2a2>
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d003      	beq.n	8009c88 <put_fat+0x48>
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	f000 8095 	beq.w	8009db0 <put_fat+0x170>
 8009c86:	e12c      	b.n	8009ee2 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	085b      	lsrs	r3, r3, #1
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	4413      	add	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca4:	330a      	adds	r3, #10
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7ff fd93 	bl	80097e0 <move_window>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f040 8111 	bne.w	8009ee8 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	617a      	str	r2, [r7, #20]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cd2:	320a      	adds	r2, #10
 8009cd4:	8812      	ldrh	r2, [r2, #0]
 8009cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cda:	fb02 f201 	mul.w	r2, r2, r1
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00d      	beq.n	8009d0c <put_fat+0xcc>
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	b25b      	sxtb	r3, r3
 8009cf6:	f003 030f 	and.w	r3, r3, #15
 8009cfa:	b25a      	sxtb	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	b25b      	sxtb	r3, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b25b      	sxtb	r3, r3
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	e001      	b.n	8009d10 <put_fat+0xd0>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	330a      	adds	r3, #10
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	4619      	mov	r1, r3
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fd4e 	bl	80097e0 <move_window>
 8009d44:	4603      	mov	r3, r0
 8009d46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d48:	7ffb      	ldrb	r3, [r7, #31]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 80ce 	bne.w	8009eec <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d56:	330a      	adds	r3, #10
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d62:	fb02 f201 	mul.w	r2, r2, r1
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <put_fat+0x140>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	091b      	lsrs	r3, r3, #4
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	e00e      	b.n	8009d9e <put_fat+0x15e>
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	b25b      	sxtb	r3, r3
 8009d86:	f023 030f 	bic.w	r3, r3, #15
 8009d8a:	b25a      	sxtb	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	0a1b      	lsrs	r3, r3, #8
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	b25b      	sxtb	r3, r3
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	b25b      	sxtb	r3, r3
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	69ba      	ldr	r2, [r7, #24]
 8009da0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da8:	3304      	adds	r3, #4
 8009daa:	2201      	movs	r2, #1
 8009dac:	701a      	strb	r2, [r3, #0]
			break;
 8009dae:	e0a2      	b.n	8009ef6 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	330a      	adds	r3, #10
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	085b      	lsrs	r3, r3, #1
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dce:	4413      	add	r3, r2
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7ff fd04 	bl	80097e0 <move_window>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ddc:	7ffb      	ldrb	r3, [r7, #31]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f040 8086 	bne.w	8009ef0 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	005a      	lsls	r2, r3, #1
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dee:	330a      	adds	r3, #10
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	fbb2 f1f3 	udiv	r1, r2, r3
 8009df6:	fb03 f301 	mul.w	r3, r3, r1
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	4413      	add	r3, r2
 8009e00:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	0a1b      	lsrs	r3, r3, #8
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	3301      	adds	r3, #1
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e20:	3304      	adds	r3, #4
 8009e22:	2201      	movs	r2, #1
 8009e24:	701a      	strb	r2, [r3, #0]
			break;
 8009e26:	e066      	b.n	8009ef6 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e36:	330a      	adds	r3, #10
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	089b      	lsrs	r3, r3, #2
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4619      	mov	r1, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e46:	4413      	add	r3, r2
 8009e48:	4619      	mov	r1, r3
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff fcc8 	bl	80097e0 <move_window>
 8009e50:	4603      	mov	r3, r0
 8009e52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e54:	7ffb      	ldrb	r3, [r7, #31]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d14c      	bne.n	8009ef4 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	009a      	lsls	r2, r3, #2
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e64:	330a      	adds	r3, #10
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e6c:	fb03 f301 	mul.w	r3, r3, r1
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	4413      	add	r3, r2
 8009e76:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	3303      	adds	r3, #3
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	061a      	lsls	r2, r3, #24
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	3302      	adds	r3, #2
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	041b      	lsls	r3, r3, #16
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	3201      	adds	r2, #1
 8009e8e:	7812      	ldrb	r2, [r2, #0]
 8009e90:	0212      	lsls	r2, r2, #8
 8009e92:	4313      	orrs	r3, r2
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	7812      	ldrb	r2, [r2, #0]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	0a1b      	lsrs	r3, r3, #8
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	b2d2      	uxtb	r2, r2
 8009eba:	701a      	strb	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	0c1a      	lsrs	r2, r3, #16
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	3302      	adds	r3, #2
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	0e1a      	lsrs	r2, r3, #24
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	3303      	adds	r3, #3
 8009ed0:	b2d2      	uxtb	r2, r2
 8009ed2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eda:	3304      	adds	r3, #4
 8009edc:	2201      	movs	r2, #1
 8009ede:	701a      	strb	r2, [r3, #0]
			break;
 8009ee0:	e009      	b.n	8009ef6 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	77fb      	strb	r3, [r7, #31]
 8009ee6:	e006      	b.n	8009ef6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8009ee8:	bf00      	nop
 8009eea:	e004      	b.n	8009ef6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8009eec:	bf00      	nop
 8009eee:	e002      	b.n	8009ef6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8009ef0:	bf00      	nop
 8009ef2:	e000      	b.n	8009ef6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8009ef4:	bf00      	nop
		}
	}

	return res;
 8009ef6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3720      	adds	r7, #32
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d907      	bls.n	8009f20 <remove_chain+0x20>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f16:	3314      	adds	r3, #20
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d302      	bcc.n	8009f26 <remove_chain+0x26>
		res = FR_INT_ERR;
 8009f20:	2302      	movs	r3, #2
 8009f22:	73fb      	strb	r3, [r7, #15]
 8009f24:	e04f      	b.n	8009fc6 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009f2a:	e040      	b.n	8009fae <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff fd81 	bl	8009a36 <get_fat>
 8009f34:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d041      	beq.n	8009fc0 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d102      	bne.n	8009f48 <remove_chain+0x48>
 8009f42:	2302      	movs	r3, #2
 8009f44:	73fb      	strb	r3, [r7, #15]
 8009f46:	e03e      	b.n	8009fc6 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d102      	bne.n	8009f56 <remove_chain+0x56>
 8009f50:	2301      	movs	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	e037      	b.n	8009fc6 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009f56:	2200      	movs	r2, #0
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff fe70 	bl	8009c40 <put_fat>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d12c      	bne.n	8009fc4 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f70:	3310      	adds	r3, #16
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f78:	d017      	beq.n	8009faa <remove_chain+0xaa>
				fs->free_clust++;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f80:	3310      	adds	r3, #16
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8c:	3310      	adds	r3, #16
 8009f8e:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f96:	3305      	adds	r3, #5
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa6:	3305      	adds	r3, #5
 8009fa8:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb4:	3314      	adds	r3, #20
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d3b6      	bcc.n	8009f2c <remove_chain+0x2c>
 8009fbe:	e002      	b.n	8009fc6 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8009fc0:	bf00      	nop
 8009fc2:	e000      	b.n	8009fc6 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8009fc4:	bf00      	nop
		}
	}

	return res;
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d113      	bne.n	800a008 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe6:	330c      	adds	r3, #12
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d007      	beq.n	800a002 <create_chain+0x32>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d31e      	bcc.n	800a040 <create_chain+0x70>
 800a002:	2301      	movs	r3, #1
 800a004:	613b      	str	r3, [r7, #16]
 800a006:	e01b      	b.n	800a040 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff fd13 	bl	8009a36 <get_fat>
 800a010:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d801      	bhi.n	800a01c <create_chain+0x4c>
 800a018:	2301      	movs	r3, #1
 800a01a:	e086      	b.n	800a12a <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a022:	d101      	bne.n	800a028 <create_chain+0x58>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	e080      	b.n	800a12a <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02e:	3314      	adds	r3, #20
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	d201      	bcs.n	800a03c <create_chain+0x6c>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	e076      	b.n	800a12a <create_chain+0x15a>
		scl = clst;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	3301      	adds	r3, #1
 800a048:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a050:	3314      	adds	r3, #20
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	429a      	cmp	r2, r3
 800a058:	d307      	bcc.n	800a06a <create_chain+0x9a>
			ncl = 2;
 800a05a:	2302      	movs	r3, #2
 800a05c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	429a      	cmp	r2, r3
 800a064:	d901      	bls.n	800a06a <create_chain+0x9a>
 800a066:	2300      	movs	r3, #0
 800a068:	e05f      	b.n	800a12a <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a06a:	6979      	ldr	r1, [r7, #20]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff fce2 	bl	8009a36 <get_fat>
 800a072:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00e      	beq.n	800a098 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a080:	d002      	beq.n	800a088 <create_chain+0xb8>
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d101      	bne.n	800a08c <create_chain+0xbc>
			return cs;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	e04e      	b.n	800a12a <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	429a      	cmp	r2, r3
 800a092:	d1d7      	bne.n	800a044 <create_chain+0x74>
 800a094:	2300      	movs	r3, #0
 800a096:	e048      	b.n	800a12a <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800a098:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a09a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a09e:	6979      	ldr	r1, [r7, #20]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff fdcd 	bl	8009c40 <put_fat>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d109      	bne.n	800a0c4 <create_chain+0xf4>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d006      	beq.n	800a0c4 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fdc0 	bl	8009c40 <put_fat>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d126      	bne.n	800a118 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d0:	330c      	adds	r3, #12
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0dc:	3310      	adds	r3, #16
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d020      	beq.n	800a128 <create_chain+0x158>
			fs->free_clust--;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ec:	3310      	adds	r3, #16
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	1e5a      	subs	r2, r3, #1
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f8:	3310      	adds	r3, #16
 800a0fa:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a102:	3305      	adds	r3, #5
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	f043 0301 	orr.w	r3, r3, #1
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a112:	3305      	adds	r3, #5
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e007      	b.n	800a128 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d102      	bne.n	800a124 <create_chain+0x154>
 800a11e:	f04f 33ff 	mov.w	r3, #4294967295
 800a122:	e000      	b.n	800a126 <create_chain+0x156>
 800a124:	2301      	movs	r3, #1
 800a126:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a128:	697b      	ldr	r3, [r7, #20]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a132:	b480      	push	{r7}
 800a134:	b087      	sub	sp, #28
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a142:	3304      	adds	r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3304      	adds	r3, #4
 800a148:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a156:	330a      	adds	r3, #10
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16e:	3302      	adds	r3, #2
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	fbb2 f3f3 	udiv	r3, r2, r3
 800a176:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	1d1a      	adds	r2, r3, #4
 800a17c:	613a      	str	r2, [r7, #16]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <clmt_clust+0x5a>
 800a188:	2300      	movs	r3, #0
 800a18a:	e010      	b.n	800a1ae <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	429a      	cmp	r2, r3
 800a192:	d307      	bcc.n	800a1a4 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1a2:	e7e9      	b.n	800a178 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800a1a4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	4413      	add	r3, r2
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ce:	3306      	adds	r3, #6
 800a1d0:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d8:	3308      	adds	r3, #8
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d00a      	beq.n	800a1fa <dir_sdi+0x40>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f0:	3314      	adds	r3, #20
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d301      	bcc.n	800a1fe <dir_sdi+0x44>
		return FR_INT_ERR;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e0b4      	b.n	800a368 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d111      	bne.n	800a228 <dir_sdi+0x6e>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	2b03      	cmp	r3, #3
 800a214:	d108      	bne.n	800a228 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a222:	3304      	adds	r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d117      	bne.n	800a25e <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a23a:	3308      	adds	r3, #8
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	4293      	cmp	r3, r2
 800a244:	d301      	bcc.n	800a24a <dir_sdi+0x90>
			return FR_INT_ERR;
 800a246:	2302      	movs	r3, #2
 800a248:	e08e      	b.n	800a368 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a256:	3304      	adds	r3, #4
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	e046      	b.n	800a2ec <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26a:	330a      	adds	r3, #10
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	095b      	lsrs	r3, r3, #5
 800a270:	b29b      	uxth	r3, r3
 800a272:	461a      	mov	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a280:	3302      	adds	r3, #2
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	fb03 f302 	mul.w	r3, r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a28a:	e022      	b.n	800a2d2 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6979      	ldr	r1, [r7, #20]
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff fbcd 	bl	8009a36 <get_fat>
 800a29c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a4:	d101      	bne.n	800a2aa <dir_sdi+0xf0>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e05e      	b.n	800a368 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d90a      	bls.n	800a2c6 <dir_sdi+0x10c>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2bc:	3314      	adds	r3, #20
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d301      	bcc.n	800a2ca <dir_sdi+0x110>
				return FR_INT_ERR;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e04e      	b.n	800a368 <dir_sdi+0x1ae>
			idx -= ic;
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d2d8      	bcs.n	800a28c <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6979      	ldr	r1, [r7, #20]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fb7e 	bl	80099e6 <clust2sect>
 800a2ea:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f2:	330c      	adds	r3, #12
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <dir_sdi+0x148>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e032      	b.n	800a368 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30e:	330a      	adds	r3, #10
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	095b      	lsrs	r3, r3, #5
 800a314:	b29b      	uxth	r3, r3
 800a316:	461a      	mov	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	441a      	add	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a328:	3310      	adds	r3, #16
 800a32a:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4618      	mov	r0, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a342:	330a      	adds	r3, #10
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	095b      	lsrs	r3, r3, #5
 800a348:	b29b      	uxth	r3, r3
 800a34a:	461a      	mov	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a352:	fb02 f201 	mul.w	r2, r2, r1
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	015b      	lsls	r3, r3, #5
 800a35a:	18c2      	adds	r2, r0, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a362:	3314      	adds	r3, #20
 800a364:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a380:	3306      	adds	r3, #6
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d006      	beq.n	800a39e <dir_next+0x2e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a396:	3310      	adds	r3, #16
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <dir_next+0x32>
		return FR_NO_FILE;
 800a39e:	2304      	movs	r3, #4
 800a3a0:	e144      	b.n	800a62c <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ae:	330a      	adds	r3, #10
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3be:	fb02 f201 	mul.w	r2, r2, r1
 800a3c2:	1a9b      	subs	r3, r3, r2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f040 810c 	bne.w	800a5e2 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d0:	3310      	adds	r3, #16
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3dc:	3310      	adds	r3, #16
 800a3de:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e6:	330c      	adds	r3, #12
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10e      	bne.n	800a40c <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4293      	cmp	r3, r2
 800a404:	f0c0 80ed 	bcc.w	800a5e2 <dir_next+0x272>
				return FR_NO_FILE;
 800a408:	2304      	movs	r3, #4
 800a40a:	e10f      	b.n	800a62c <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a418:	330a      	adds	r3, #10
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	095b      	lsrs	r3, r3, #5
 800a41e:	b29b      	uxth	r3, r3
 800a420:	461a      	mov	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	fbb3 f2f2 	udiv	r2, r3, r2
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a434:	3302      	adds	r3, #2
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	3b01      	subs	r3, #1
 800a43a:	4013      	ands	r3, r2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f040 80d0 	bne.w	800a5e2 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a450:	330c      	adds	r3, #12
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4619      	mov	r1, r3
 800a456:	4610      	mov	r0, r2
 800a458:	f7ff faed 	bl	8009a36 <get_fat>
 800a45c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d801      	bhi.n	800a468 <dir_next+0xf8>
 800a464:	2302      	movs	r3, #2
 800a466:	e0e1      	b.n	800a62c <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46e:	d101      	bne.n	800a474 <dir_next+0x104>
 800a470:	2301      	movs	r3, #1
 800a472:	e0db      	b.n	800a62c <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a480:	3314      	adds	r3, #20
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	429a      	cmp	r2, r3
 800a488:	f0c0 8097 	bcc.w	800a5ba <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <dir_next+0x126>
 800a492:	2304      	movs	r3, #4
 800a494:	e0ca      	b.n	800a62c <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a4:	330c      	adds	r3, #12
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	f7ff fd90 	bl	8009fd0 <create_chain>
 800a4b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <dir_next+0x14c>
 800a4b8:	2307      	movs	r3, #7
 800a4ba:	e0b7      	b.n	800a62c <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d101      	bne.n	800a4c6 <dir_next+0x156>
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	e0b2      	b.n	800a62c <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4cc:	d101      	bne.n	800a4d2 <dir_next+0x162>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e0ac      	b.n	800a62c <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff f926 	bl	800972c <sync_window>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <dir_next+0x17a>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e0a0      	b.n	800a62c <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a500:	330a      	adds	r3, #10
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	2100      	movs	r1, #0
 800a508:	f7fe feed 	bl	80092e6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51a:	681c      	ldr	r4, [r3, #0]
 800a51c:	6979      	ldr	r1, [r7, #20]
 800a51e:	4610      	mov	r0, r2
 800a520:	f7ff fa61 	bl	80099e6 <clust2sect>
 800a524:	4602      	mov	r2, r0
 800a526:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800a52a:	330c      	adds	r3, #12
 800a52c:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	e024      	b.n	800a57e <dir_next+0x20e>
						dp->fs->wflag = 1;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a540:	3304      	adds	r3, #4
 800a542:	2201      	movs	r2, #1
 800a544:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff f8ec 	bl	800972c <sync_window>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <dir_next+0x1ee>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e066      	b.n	800a62c <dir_next+0x2bc>
						dp->fs->winsect++;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800a56a:	330c      	adds	r3, #12
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	1c59      	adds	r1, r3, #1
 800a570:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800a574:	330c      	adds	r3, #12
 800a576:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	3301      	adds	r3, #1
 800a57c:	613b      	str	r3, [r7, #16]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58a:	3302      	adds	r3, #2
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	4293      	cmp	r3, r2
 800a594:	d3ce      	bcc.n	800a534 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a5a2:	330c      	adds	r3, #12
 800a5a4:	6819      	ldr	r1, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	1a8a      	subs	r2, r1, r2
 800a5b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a5b6:	330c      	adds	r3, #12
 800a5b8:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c0:	330c      	adds	r3, #12
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6979      	ldr	r1, [r7, #20]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff fa08 	bl	80099e6 <clust2sect>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5de:	3310      	adds	r3, #16
 800a5e0:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ec:	3306      	adds	r3, #6
 800a5ee:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a606:	330a      	adds	r3, #10
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	461a      	mov	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	fbb3 f1f2 	udiv	r1, r3, r2
 800a616:	fb02 f201 	mul.w	r2, r2, r1
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	015b      	lsls	r3, r3, #5
 800a61e:	18c2      	adds	r2, r0, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a626:	3314      	adds	r3, #20
 800a628:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	bd90      	pop	{r4, r7, pc}

0800a634 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a63e:	2100      	movs	r1, #0
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff fdba 	bl	800a1ba <dir_sdi>
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d138      	bne.n	800a6c2 <dir_alloc+0x8e>
		n = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a662:	3310      	adds	r3, #16
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f7ff f8b9 	bl	80097e0 <move_window>
 800a66e:	4603      	mov	r3, r0
 800a670:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a672:	7bfb      	ldrb	r3, [r7, #15]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d123      	bne.n	800a6c0 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67e:	3314      	adds	r3, #20
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	2be5      	cmp	r3, #229	; 0xe5
 800a686:	d007      	beq.n	800a698 <dir_alloc+0x64>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68e:	3314      	adds	r3, #20
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d107      	bne.n	800a6a8 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	3301      	adds	r3, #1
 800a69c:	60bb      	str	r3, [r7, #8]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d102      	bne.n	800a6ac <dir_alloc+0x78>
 800a6a6:	e00c      	b.n	800a6c2 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fe5e 	bl	800a370 <dir_next>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0ca      	beq.n	800a654 <dir_alloc+0x20>
 800a6be:	e000      	b.n	800a6c2 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800a6c0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d101      	bne.n	800a6cc <dir_alloc+0x98>
 800a6c8:	2307      	movs	r3, #7
 800a6ca:	73fb      	strb	r3, [r7, #15]
	return res;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b085      	sub	sp, #20
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	331b      	adds	r3, #27
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	b21a      	sxth	r2, r3
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	331a      	adds	r3, #26
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	b21b      	sxth	r3, r3
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	b21b      	sxth	r3, r3
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	2b03      	cmp	r3, #3
 800a704:	d10f      	bne.n	800a726 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	3315      	adds	r3, #21
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	b21a      	sxth	r2, r3
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	3314      	adds	r3, #20
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b21b      	sxth	r3, r3
 800a718:	4313      	orrs	r3, r2
 800a71a:	b21b      	sxth	r3, r3
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4313      	orrs	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]

	return cl;
 800a726:	68fb      	ldr	r3, [r7, #12]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	331a      	adds	r3, #26
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	b2d2      	uxtb	r2, r2
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	0a1b      	lsrs	r3, r3, #8
 800a74e:	b29a      	uxth	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	331b      	adds	r3, #27
 800a754:	b2d2      	uxtb	r2, r2
 800a756:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	0c1a      	lsrs	r2, r3, #16
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3314      	adds	r3, #20
 800a760:	b2d2      	uxtb	r2, r2
 800a762:	701a      	strb	r2, [r3, #0]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	0c1b      	lsrs	r3, r3, #16
 800a768:	b29b      	uxth	r3, r3
 800a76a:	0a1b      	lsrs	r3, r3, #8
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3315      	adds	r3, #21
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
	...

0800a784 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a796:	1e5a      	subs	r2, r3, #1
 800a798:	4613      	mov	r3, r2
 800a79a:	005b      	lsls	r3, r3, #1
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	613b      	str	r3, [r7, #16]
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a7ac:	4a2b      	ldr	r2, [pc, #172]	; (800a85c <cmp_lfn+0xd8>)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	021b      	lsls	r3, r3, #8
 800a7be:	b21a      	sxth	r2, r3
 800a7c0:	4926      	ldr	r1, [pc, #152]	; (800a85c <cmp_lfn+0xd8>)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	440b      	add	r3, r1
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	440b      	add	r3, r1
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	b21b      	sxth	r3, r3
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	b21b      	sxth	r3, r3
 800a7d6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a7d8:	89fb      	ldrh	r3, [r7, #14]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d019      	beq.n	800a812 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a7de:	89bb      	ldrh	r3, [r7, #12]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f003 f869 	bl	800d8b8 <ff_wtoupper>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2bfe      	cmp	r3, #254	; 0xfe
 800a7ee:	d80e      	bhi.n	800a80e <cmp_lfn+0x8a>
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	617a      	str	r2, [r7, #20]
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f003 f85a 	bl	800d8b8 <ff_wtoupper>
 800a804:	4603      	mov	r3, r0
 800a806:	461a      	mov	r2, r3
 800a808:	89fb      	ldrh	r3, [r7, #14]
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d008      	beq.n	800a820 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800a80e:	2300      	movs	r3, #0
 800a810:	e01f      	b.n	800a852 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800a812:	89bb      	ldrh	r3, [r7, #12]
 800a814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a818:	4293      	cmp	r3, r2
 800a81a:	d001      	beq.n	800a820 <cmp_lfn+0x9c>
 800a81c:	2300      	movs	r3, #0
 800a81e:	e018      	b.n	800a852 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	3301      	adds	r3, #1
 800a824:	613b      	str	r3, [r7, #16]
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2b0c      	cmp	r3, #12
 800a82a:	d9bf      	bls.n	800a7ac <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <cmp_lfn+0xcc>
 800a838:	89fb      	ldrh	r3, [r7, #14]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d008      	beq.n	800a850 <cmp_lfn+0xcc>
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <cmp_lfn+0xcc>
		return 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e000      	b.n	800a852 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800a850:	2301      	movs	r3, #1
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	080111a0 	.word	0x080111a0

0800a860 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800a860:	b480      	push	{r7}
 800a862:	b089      	sub	sp, #36	; 0x24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	4611      	mov	r1, r2
 800a86c:	461a      	mov	r2, r3
 800a86e:	460b      	mov	r3, r1
 800a870:	71fb      	strb	r3, [r7, #7]
 800a872:	4613      	mov	r3, r2
 800a874:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	330d      	adds	r3, #13
 800a87a:	79ba      	ldrb	r2, [r7, #6]
 800a87c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	330b      	adds	r3, #11
 800a882:	220f      	movs	r2, #15
 800a884:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	330c      	adds	r3, #12
 800a88a:	2200      	movs	r2, #0
 800a88c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	331a      	adds	r3, #26
 800a892:	2200      	movs	r2, #0
 800a894:	701a      	strb	r2, [r3, #0]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	331b      	adds	r3, #27
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	1e5a      	subs	r2, r3, #1
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	82fb      	strh	r3, [r7, #22]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a8b6:	8afb      	ldrh	r3, [r7, #22]
 800a8b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d007      	beq.n	800a8d0 <fit_lfn+0x70>
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	61fa      	str	r2, [r7, #28]
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a8d0:	4a1d      	ldr	r2, [pc, #116]	; (800a948 <fit_lfn+0xe8>)
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	8afa      	ldrh	r2, [r7, #22]
 800a8e0:	b2d2      	uxtb	r2, r2
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	8afb      	ldrh	r3, [r7, #22]
 800a8e6:	0a1b      	lsrs	r3, r3, #8
 800a8e8:	b299      	uxth	r1, r3
 800a8ea:	4a17      	ldr	r2, [pc, #92]	; (800a948 <fit_lfn+0xe8>)
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	b2ca      	uxtb	r2, r1
 800a8fa:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a8fc:	8afb      	ldrh	r3, [r7, #22]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d102      	bne.n	800a908 <fit_lfn+0xa8>
 800a902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a906:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	3301      	adds	r3, #1
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	2b0c      	cmp	r3, #12
 800a912:	d9d0      	bls.n	800a8b6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a914:	8afb      	ldrh	r3, [r7, #22]
 800a916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d006      	beq.n	800a92c <fit_lfn+0xcc>
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <fit_lfn+0xd4>
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a932:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	79fa      	ldrb	r2, [r7, #7]
 800a938:	701a      	strb	r2, [r3, #0]
}
 800a93a:	bf00      	nop
 800a93c:	3724      	adds	r7, #36	; 0x24
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	080111a0 	.word	0x080111a0

0800a94c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08c      	sub	sp, #48	; 0x30
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a95a:	220b      	movs	r2, #11
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7fe fca2 	bl	80092a8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2b05      	cmp	r3, #5
 800a968:	d92b      	bls.n	800a9c2 <gen_numname+0x76>
		sr = seq;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a96e:	e022      	b.n	800a9b6 <gen_numname+0x6a>
			wc = *lfn++;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	1c9a      	adds	r2, r3, #2
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a97a:	2300      	movs	r3, #0
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a97e:	e017      	b.n	800a9b0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	005a      	lsls	r2, r3, #1
 800a984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	4413      	add	r3, r2
 800a98c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a98e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a990:	085b      	lsrs	r3, r3, #1
 800a992:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <gen_numname+0x5e>
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a9a4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a9a8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	2b0f      	cmp	r3, #15
 800a9b4:	d9e4      	bls.n	800a980 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1d8      	bne.n	800a970 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a9c2:	2307      	movs	r3, #7
 800a9c4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	3330      	adds	r3, #48	; 0x30
 800a9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9da:	2b39      	cmp	r3, #57	; 0x39
 800a9dc:	d904      	bls.n	800a9e8 <gen_numname+0x9c>
 800a9de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9e2:	3307      	adds	r3, #7
 800a9e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	1e5a      	subs	r2, r3, #1
 800a9ec:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a9f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	091b      	lsrs	r3, r3, #4
 800aa00:	603b      	str	r3, [r7, #0]
	} while (seq);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1de      	bne.n	800a9c6 <gen_numname+0x7a>
	ns[i] = '~';
 800aa08:	f107 0214 	add.w	r2, r7, #20
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	4413      	add	r3, r2
 800aa10:	227e      	movs	r2, #126	; 0x7e
 800aa12:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aa14:	2300      	movs	r3, #0
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
 800aa18:	e002      	b.n	800aa20 <gen_numname+0xd4>
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d205      	bcs.n	800aa34 <gen_numname+0xe8>
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	4413      	add	r3, r2
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b20      	cmp	r3, #32
 800aa32:	d1f2      	bne.n	800aa1a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	2b07      	cmp	r3, #7
 800aa38:	d808      	bhi.n	800aa4c <gen_numname+0x100>
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	62ba      	str	r2, [r7, #40]	; 0x28
 800aa40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aa44:	4413      	add	r3, r2
 800aa46:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aa4a:	e000      	b.n	800aa4e <gen_numname+0x102>
 800aa4c:	2120      	movs	r1, #32
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	627a      	str	r2, [r7, #36]	; 0x24
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	460a      	mov	r2, r1
 800aa5a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	2b07      	cmp	r3, #7
 800aa60:	d9e8      	bls.n	800aa34 <gen_numname+0xe8>
}
 800aa62:	bf00      	nop
 800aa64:	bf00      	nop
 800aa66:	3730      	adds	r7, #48	; 0x30
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aa78:	230b      	movs	r3, #11
 800aa7a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	0852      	lsrs	r2, r2, #1
 800aa82:	01db      	lsls	r3, r3, #7
 800aa84:	4313      	orrs	r3, r2
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	1c59      	adds	r1, r3, #1
 800aa8c:	6079      	str	r1, [r7, #4]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	4413      	add	r3, r2
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	60bb      	str	r3, [r7, #8]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1ed      	bne.n	800aa7c <sum_sfn+0x10>
	return sum;
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b086      	sub	sp, #24
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aab6:	2100      	movs	r1, #0
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff fb7e 	bl	800a1ba <dir_sdi>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <dir_find+0x1e>
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	e0c1      	b.n	800ac50 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800aacc:	23ff      	movs	r3, #255	; 0xff
 800aace:	753b      	strb	r3, [r7, #20]
 800aad0:	7d3b      	ldrb	r3, [r7, #20]
 800aad2:	757b      	strb	r3, [r7, #21]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aada:	3304      	adds	r3, #4
 800aadc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aae0:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf0:	3310      	adds	r3, #16
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	f7fe fe72 	bl	80097e0 <move_window>
 800aafc:	4603      	mov	r3, r0
 800aafe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f040 809e 	bne.w	800ac44 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab0e:	3314      	adds	r3, #20
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab1a:	7dbb      	ldrb	r3, [r7, #22]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d102      	bne.n	800ab26 <dir_find+0x78>
 800ab20:	2304      	movs	r3, #4
 800ab22:	75fb      	strb	r3, [r7, #23]
 800ab24:	e093      	b.n	800ac4e <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	330b      	adds	r3, #11
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab30:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ab32:	7dbb      	ldrb	r3, [r7, #22]
 800ab34:	2be5      	cmp	r3, #229	; 0xe5
 800ab36:	d007      	beq.n	800ab48 <dir_find+0x9a>
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	f003 0308 	and.w	r3, r3, #8
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00c      	beq.n	800ab5c <dir_find+0xae>
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	2b0f      	cmp	r3, #15
 800ab46:	d009      	beq.n	800ab5c <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ab48:	23ff      	movs	r3, #255	; 0xff
 800ab4a:	757b      	strb	r3, [r7, #21]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ab52:	3304      	adds	r3, #4
 800ab54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab58:	801a      	strh	r2, [r3, #0]
 800ab5a:	e068      	b.n	800ac2e <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	2b0f      	cmp	r3, #15
 800ab60:	d139      	bne.n	800abd6 <dir_find+0x128>
				if (dp->lfn) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d05f      	beq.n	800ac2e <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ab6e:	7dbb      	ldrb	r3, [r7, #22]
 800ab70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d012      	beq.n	800ab9e <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	7b5b      	ldrb	r3, [r3, #13]
 800ab7c:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ab7e:	7dbb      	ldrb	r3, [r7, #22]
 800ab80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab84:	75bb      	strb	r3, [r7, #22]
 800ab86:	7dbb      	ldrb	r3, [r7, #22]
 800ab88:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab90:	3306      	adds	r3, #6
 800ab92:	881a      	ldrh	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ab9e:	7dba      	ldrb	r2, [r7, #22]
 800aba0:	7d7b      	ldrb	r3, [r7, #21]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d114      	bne.n	800abd0 <dir_find+0x122>
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	330d      	adds	r3, #13
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	7d3a      	ldrb	r2, [r7, #20]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d10e      	bne.n	800abd0 <dir_find+0x122>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6939      	ldr	r1, [r7, #16]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7ff fde1 	bl	800a784 <cmp_lfn>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <dir_find+0x122>
 800abc8:	7d7b      	ldrb	r3, [r7, #21]
 800abca:	3b01      	subs	r3, #1
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	e000      	b.n	800abd2 <dir_find+0x124>
 800abd0:	23ff      	movs	r3, #255	; 0xff
 800abd2:	757b      	strb	r3, [r7, #21]
 800abd4:	e02b      	b.n	800ac2e <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800abd6:	7d7b      	ldrb	r3, [r7, #21]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d107      	bne.n	800abec <dir_find+0x13e>
 800abdc:	6938      	ldr	r0, [r7, #16]
 800abde:	f7ff ff45 	bl	800aa6c <sum_sfn>
 800abe2:	4603      	mov	r3, r0
 800abe4:	461a      	mov	r2, r3
 800abe6:	7d3b      	ldrb	r3, [r7, #20]
 800abe8:	4293      	cmp	r3, r2
 800abea:	d02d      	beq.n	800ac48 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf2:	3318      	adds	r3, #24
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	330b      	adds	r3, #11
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10c      	bne.n	800ac1c <dir_find+0x16e>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac08:	3318      	adds	r3, #24
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	220b      	movs	r2, #11
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6938      	ldr	r0, [r7, #16]
 800ac12:	f7fe fb83 	bl	800931c <mem_cmp>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d017      	beq.n	800ac4c <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ac1c:	23ff      	movs	r3, #255	; 0xff
 800ac1e:	757b      	strb	r3, [r7, #21]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ac26:	3304      	adds	r3, #4
 800ac28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac2c:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ac2e:	2100      	movs	r1, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fb9d 	bl	800a370 <dir_next>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f43f af50 	beq.w	800aae2 <dir_find+0x34>
 800ac42:	e004      	b.n	800ac4e <dir_find+0x1a0>
		if (res != FR_OK) break;
 800ac44:	bf00      	nop
 800ac46:	e002      	b.n	800ac4e <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ac48:	bf00      	nop
 800ac4a:	e000      	b.n	800ac4e <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ac4c:	bf00      	nop

	return res;
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08c      	sub	sp, #48	; 0x30
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac66:	3318      	adds	r3, #24
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	623b      	str	r3, [r7, #32]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800ac76:	f107 030c 	add.w	r3, r7, #12
 800ac7a:	220c      	movs	r2, #12
 800ac7c:	6a39      	ldr	r1, [r7, #32]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fe fb12 	bl	80092a8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d039      	beq.n	800ad02 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	330b      	adds	r3, #11
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800aca0:	2301      	movs	r3, #1
 800aca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800aca4:	e013      	b.n	800acce <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800aca6:	f107 010c 	add.w	r1, r7, #12
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	6a38      	ldr	r0, [r7, #32]
 800acb0:	f7ff fe4c 	bl	800a94c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7ff fefa 	bl	800aaae <dir_find>
 800acba:	4603      	mov	r3, r0
 800acbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800acc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d106      	bne.n	800acd6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	3301      	adds	r3, #1
 800accc:	62bb      	str	r3, [r7, #40]	; 0x28
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	2b63      	cmp	r3, #99	; 0x63
 800acd2:	d9e8      	bls.n	800aca6 <dir_register+0x4e>
 800acd4:	e000      	b.n	800acd8 <dir_register+0x80>
			if (res != FR_OK) break;
 800acd6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	2b64      	cmp	r3, #100	; 0x64
 800acdc:	d101      	bne.n	800ace2 <dir_register+0x8a>
 800acde:	2307      	movs	r3, #7
 800ace0:	e0e3      	b.n	800aeaa <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ace2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	d002      	beq.n	800acf0 <dir_register+0x98>
 800acea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acee:	e0dc      	b.n	800aeaa <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	330b      	adds	r3, #11
 800acf4:	7dfa      	ldrb	r2, [r7, #23]
 800acf6:	701a      	strb	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d014      	beq.n	800ad36 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad10:	e002      	b.n	800ad18 <dir_register+0xc0>
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	3301      	adds	r3, #1
 800ad16:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	4413      	add	r3, r2
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1f5      	bne.n	800ad12 <dir_register+0xba>
		nent = (n + 25) / 13;
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	3319      	adds	r3, #25
 800ad2a:	4a62      	ldr	r2, [pc, #392]	; (800aeb4 <dir_register+0x25c>)
 800ad2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad30:	089b      	lsrs	r3, r3, #2
 800ad32:	627b      	str	r3, [r7, #36]	; 0x24
 800ad34:	e001      	b.n	800ad3a <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ad3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff fc79 	bl	800a634 <dir_alloc>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ad48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d160      	bne.n	800ae12 <dir_register+0x1ba>
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	3b01      	subs	r3, #1
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
 800ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d05a      	beq.n	800ae12 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad62:	3306      	adds	r3, #6
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff fa23 	bl	800a1ba <dir_sdi>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ad7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d147      	bne.n	800ae12 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad88:	3318      	adds	r3, #24
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff fe6d 	bl	800aa6c <sum_sfn>
 800ad92:	4603      	mov	r3, r0
 800ad94:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada4:	3310      	adds	r3, #16
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fe fd18 	bl	80097e0 <move_window>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800adb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d128      	bne.n	800ae10 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adcc:	3314      	adds	r3, #20
 800adce:	6819      	ldr	r1, [r3, #0]
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	b2da      	uxtb	r2, r3
 800add4:	7efb      	ldrb	r3, [r7, #27]
 800add6:	f7ff fd43 	bl	800a860 <fit_lfn>
				dp->fs->wflag = 1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade6:	3304      	adds	r3, #4
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800adec:	2100      	movs	r1, #0
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff fabe 	bl	800a370 <dir_next>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800adfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d107      	bne.n	800ae12 <dir_register+0x1ba>
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	3b01      	subs	r3, #1
 800ae06:	627b      	str	r3, [r7, #36]	; 0x24
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1c3      	bne.n	800ad96 <dir_register+0x13e>
 800ae0e:	e000      	b.n	800ae12 <dir_register+0x1ba>
				if (res != FR_OK) break;
 800ae10:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ae12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d145      	bne.n	800aea6 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae28:	3310      	adds	r3, #16
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f7fe fcd6 	bl	80097e0 <move_window>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ae3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d131      	bne.n	800aea6 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae48:	3314      	adds	r3, #20
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fe fa48 	bl	80092e6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5c:	3314      	adds	r3, #20
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae66:	3318      	adds	r3, #24
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	220b      	movs	r2, #11
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f7fe fa1b 	bl	80092a8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae78:	3318      	adds	r3, #24
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	330b      	adds	r3, #11
 800ae7e:	781a      	ldrb	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae86:	3314      	adds	r3, #20
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	330c      	adds	r3, #12
 800ae8c:	f002 0218 	and.w	r2, r2, #24
 800ae90:	b2d2      	uxtb	r2, r2
 800ae92:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea0:	3304      	adds	r3, #4
 800aea2:	2201      	movs	r2, #1
 800aea4:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800aea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3730      	adds	r7, #48	; 0x30
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	4ec4ec4f 	.word	0x4ec4ec4f

0800aeb8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	; 0x28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	613b      	str	r3, [r7, #16]
 800aec8:	e002      	b.n	800aed0 <create_name+0x18>
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	3301      	adds	r3, #1
 800aece:	613b      	str	r3, [r7, #16]
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b2f      	cmp	r3, #47	; 0x2f
 800aed6:	d0f8      	beq.n	800aeca <create_name+0x12>
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2b5c      	cmp	r3, #92	; 0x5c
 800aede:	d0f4      	beq.n	800aeca <create_name+0x12>
	lfn = dp->lfn;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	61ba      	str	r2, [r7, #24]
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	4413      	add	r3, r2
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800af00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af02:	2b1f      	cmp	r3, #31
 800af04:	d92f      	bls.n	800af66 <create_name+0xae>
 800af06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af08:	2b2f      	cmp	r3, #47	; 0x2f
 800af0a:	d02c      	beq.n	800af66 <create_name+0xae>
 800af0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af0e:	2b5c      	cmp	r3, #92	; 0x5c
 800af10:	d029      	beq.n	800af66 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2bfe      	cmp	r3, #254	; 0xfe
 800af16:	d901      	bls.n	800af1c <create_name+0x64>
			return FR_INVALID_NAME;
 800af18:	2306      	movs	r3, #6
 800af1a:	e18b      	b.n	800b234 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800af1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800af22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af24:	2101      	movs	r1, #1
 800af26:	4618      	mov	r0, r3
 800af28:	f002 fc8a 	bl	800d840 <ff_convert>
 800af2c:	4603      	mov	r3, r0
 800af2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800af30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <create_name+0x82>
 800af36:	2306      	movs	r3, #6
 800af38:	e17c      	b.n	800b234 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800af3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af3c:	2b7f      	cmp	r3, #127	; 0x7f
 800af3e:	d809      	bhi.n	800af54 <create_name+0x9c>
 800af40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af42:	4619      	mov	r1, r3
 800af44:	488f      	ldr	r0, [pc, #572]	; (800b184 <create_name+0x2cc>)
 800af46:	f7fe fa10 	bl	800936a <chk_chr>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <create_name+0x9c>
			return FR_INVALID_NAME;
 800af50:	2306      	movs	r3, #6
 800af52:	e16f      	b.n	800b234 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	617a      	str	r2, [r7, #20]
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800af64:	e7c5      	b.n	800aef2 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	441a      	add	r2, r3
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800af70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af72:	2b1f      	cmp	r3, #31
 800af74:	d801      	bhi.n	800af7a <create_name+0xc2>
 800af76:	2304      	movs	r3, #4
 800af78:	e000      	b.n	800af7c <create_name+0xc4>
 800af7a:	2300      	movs	r3, #0
 800af7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800af80:	e011      	b.n	800afa6 <create_name+0xee>
		w = lfn[di - 1];
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af88:	3b01      	subs	r3, #1
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	4413      	add	r3, r2
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800af94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af96:	2b20      	cmp	r3, #32
 800af98:	d002      	beq.n	800afa0 <create_name+0xe8>
 800af9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af9c:	2b2e      	cmp	r3, #46	; 0x2e
 800af9e:	d106      	bne.n	800afae <create_name+0xf6>
		di--;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1ea      	bne.n	800af82 <create_name+0xca>
 800afac:	e000      	b.n	800afb0 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800afae:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <create_name+0x102>
 800afb6:	2306      	movs	r3, #6
 800afb8:	e13c      	b.n	800b234 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	4413      	add	r3, r2
 800afc2:	2200      	movs	r2, #0
 800afc4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afcc:	3318      	adds	r3, #24
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	220b      	movs	r2, #11
 800afd2:	2120      	movs	r1, #32
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fe f986 	bl	80092e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800afda:	2300      	movs	r3, #0
 800afdc:	61bb      	str	r3, [r7, #24]
 800afde:	e002      	b.n	800afe6 <create_name+0x12e>
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	3301      	adds	r3, #1
 800afe4:	61bb      	str	r3, [r7, #24]
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	005b      	lsls	r3, r3, #1
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4413      	add	r3, r2
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d0f5      	beq.n	800afe0 <create_name+0x128>
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	4413      	add	r3, r2
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	2b2e      	cmp	r3, #46	; 0x2e
 800b000:	d0ee      	beq.n	800afe0 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d009      	beq.n	800b01c <create_name+0x164>
 800b008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b00c:	f043 0303 	orr.w	r3, r3, #3
 800b010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b014:	e002      	b.n	800b01c <create_name+0x164>
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	3b01      	subs	r3, #1
 800b01a:	617b      	str	r3, [r7, #20]
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d009      	beq.n	800b036 <create_name+0x17e>
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b028:	3b01      	subs	r3, #1
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4413      	add	r3, r2
 800b030:	881b      	ldrh	r3, [r3, #0]
 800b032:	2b2e      	cmp	r3, #46	; 0x2e
 800b034:	d1ef      	bne.n	800b016 <create_name+0x15e>

	b = i = 0; ni = 8;
 800b036:	2300      	movs	r3, #0
 800b038:	623b      	str	r3, [r7, #32]
 800b03a:	2300      	movs	r3, #0
 800b03c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b040:	2308      	movs	r3, #8
 800b042:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	61ba      	str	r2, [r7, #24]
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4413      	add	r3, r2
 800b050:	881b      	ldrh	r3, [r3, #0]
 800b052:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 8092 	beq.w	800b180 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b05c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b05e:	2b20      	cmp	r3, #32
 800b060:	d006      	beq.n	800b070 <create_name+0x1b8>
 800b062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b064:	2b2e      	cmp	r3, #46	; 0x2e
 800b066:	d10a      	bne.n	800b07e <create_name+0x1c6>
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d006      	beq.n	800b07e <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800b070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b074:	f043 0303 	orr.w	r3, r3, #3
 800b078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b07c:	e07f      	b.n	800b17e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b07e:	6a3a      	ldr	r2, [r7, #32]
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	429a      	cmp	r2, r3
 800b084:	d203      	bcs.n	800b08e <create_name+0x1d6>
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d123      	bne.n	800b0d6 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	2b0b      	cmp	r3, #11
 800b092:	d106      	bne.n	800b0a2 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800b094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b098:	f043 0303 	orr.w	r3, r3, #3
 800b09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0a0:	e077      	b.n	800b192 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b0a2:	69ba      	ldr	r2, [r7, #24]
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d005      	beq.n	800b0b6 <create_name+0x1fe>
 800b0aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0ae:	f043 0303 	orr.w	r3, r3, #3
 800b0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d868      	bhi.n	800b190 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	61bb      	str	r3, [r7, #24]
 800b0c2:	2308      	movs	r3, #8
 800b0c4:	623b      	str	r3, [r7, #32]
 800b0c6:	230b      	movs	r3, #11
 800b0c8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0d4:	e053      	b.n	800b17e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0d8:	2b7f      	cmp	r3, #127	; 0x7f
 800b0da:	d914      	bls.n	800b106 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0de:	2100      	movs	r1, #0
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f002 fbad 	bl	800d840 <ff_convert>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <create_name+0x242>
 800b0f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0f2:	3b80      	subs	r3, #128	; 0x80
 800b0f4:	4a24      	ldr	r2, [pc, #144]	; (800b188 <create_name+0x2d0>)
 800b0f6:	5cd3      	ldrb	r3, [r2, r3]
 800b0f8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0fe:	f043 0302 	orr.w	r3, r3, #2
 800b102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d007      	beq.n	800b11c <create_name+0x264>
 800b10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b10e:	4619      	mov	r1, r3
 800b110:	481e      	ldr	r0, [pc, #120]	; (800b18c <create_name+0x2d4>)
 800b112:	f7fe f92a 	bl	800936a <chk_chr>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d008      	beq.n	800b12e <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b11c:	235f      	movs	r3, #95	; 0x5f
 800b11e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b124:	f043 0303 	orr.w	r3, r3, #3
 800b128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b12c:	e01b      	b.n	800b166 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b12e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b130:	2b40      	cmp	r3, #64	; 0x40
 800b132:	d909      	bls.n	800b148 <create_name+0x290>
 800b134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b136:	2b5a      	cmp	r3, #90	; 0x5a
 800b138:	d806      	bhi.n	800b148 <create_name+0x290>
					b |= 2;
 800b13a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b13e:	f043 0302 	orr.w	r3, r3, #2
 800b142:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b146:	e00e      	b.n	800b166 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b14a:	2b60      	cmp	r3, #96	; 0x60
 800b14c:	d90b      	bls.n	800b166 <create_name+0x2ae>
 800b14e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b150:	2b7a      	cmp	r3, #122	; 0x7a
 800b152:	d808      	bhi.n	800b166 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800b154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b158:	f043 0301 	orr.w	r3, r3, #1
 800b15c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b162:	3b20      	subs	r3, #32
 800b164:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16c:	3318      	adds	r3, #24
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	1c59      	adds	r1, r3, #1
 800b174:	6239      	str	r1, [r7, #32]
 800b176:	4413      	add	r3, r2
 800b178:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b17e:	e761      	b.n	800b044 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800b180:	bf00      	nop
 800b182:	e006      	b.n	800b192 <create_name+0x2da>
 800b184:	08010ca0 	.word	0x08010ca0
 800b188:	08011120 	.word	0x08011120
 800b18c:	08010cac 	.word	0x08010cac
			if (si > di) break;			/* No extension */
 800b190:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b198:	3318      	adds	r3, #24
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2be5      	cmp	r3, #229	; 0xe5
 800b1a0:	d106      	bne.n	800b1b0 <create_name+0x2f8>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1a8:	3318      	adds	r3, #24
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2205      	movs	r2, #5
 800b1ae:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	2b08      	cmp	r3, #8
 800b1b4:	d104      	bne.n	800b1c0 <create_name+0x308>
 800b1b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b1c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1c4:	f003 030c 	and.w	r3, r3, #12
 800b1c8:	2b0c      	cmp	r3, #12
 800b1ca:	d005      	beq.n	800b1d8 <create_name+0x320>
 800b1cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d105      	bne.n	800b1e4 <create_name+0x32c>
		cf |= NS_LFN;
 800b1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1dc:	f043 0302 	orr.w	r3, r3, #2
 800b1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d117      	bne.n	800b220 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b1f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1f4:	f003 0303 	and.w	r3, r3, #3
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d105      	bne.n	800b208 <create_name+0x350>
 800b1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b200:	f043 0310 	orr.w	r3, r3, #16
 800b204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b20c:	f003 030c 	and.w	r3, r3, #12
 800b210:	2b04      	cmp	r3, #4
 800b212:	d105      	bne.n	800b220 <create_name+0x368>
 800b214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b218:	f043 0308 	orr.w	r3, r3, #8
 800b21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b226:	3318      	adds	r3, #24
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	330b      	adds	r3, #11
 800b22c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b230:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b232:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b234:	4618      	mov	r0, r3
 800b236:	3728      	adds	r7, #40	; 0x28
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b2f      	cmp	r3, #47	; 0x2f
 800b24c:	d003      	beq.n	800b256 <follow_path+0x1a>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2b5c      	cmp	r3, #92	; 0x5c
 800b254:	d102      	bne.n	800b25c <follow_path+0x20>
		path++;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	3301      	adds	r3, #1
 800b25a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b262:	3308      	adds	r3, #8
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	2b1f      	cmp	r3, #31
 800b26e:	d80c      	bhi.n	800b28a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800b270:	2100      	movs	r1, #0
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7fe ffa1 	bl	800a1ba <dir_sdi>
 800b278:	4603      	mov	r3, r0
 800b27a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b282:	3314      	adds	r3, #20
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	e04c      	b.n	800b324 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b28a:	463b      	mov	r3, r7
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff fe12 	bl	800aeb8 <create_name>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d13d      	bne.n	800b31a <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff fc05 	bl	800aaae <dir_find>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ae:	3318      	adds	r3, #24
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	7adb      	ldrb	r3, [r3, #11]
 800b2b4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d12d      	bne.n	800b31e <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d128      	bne.n	800b31e <follow_path+0xe2>
 800b2cc:	2305      	movs	r3, #5
 800b2ce:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b2d0:	e025      	b.n	800b31e <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d122      	bne.n	800b322 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2e2:	3314      	adds	r3, #20
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	330b      	adds	r3, #11
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	f003 0310 	and.w	r3, r3, #16
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d102      	bne.n	800b2fc <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800b2f6:	2305      	movs	r3, #5
 800b2f8:	73fb      	strb	r3, [r7, #15]
 800b2fa:	e013      	b.n	800b324 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff f9e5 	bl	800a6d6 <ld_clust>
 800b30c:	4602      	mov	r2, r0
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b314:	3308      	adds	r3, #8
 800b316:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b318:	e7b7      	b.n	800b28a <follow_path+0x4e>
			if (res != FR_OK) break;
 800b31a:	bf00      	nop
 800b31c:	e002      	b.n	800b324 <follow_path+0xe8>
				break;
 800b31e:	bf00      	nop
 800b320:	e000      	b.n	800b324 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b322:	bf00      	nop
		}
	}

	return res;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b32e:	b480      	push	{r7}
 800b330:	b087      	sub	sp, #28
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b336:	f04f 33ff 	mov.w	r3, #4294967295
 800b33a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d031      	beq.n	800b3a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	617b      	str	r3, [r7, #20]
 800b34a:	e002      	b.n	800b352 <get_ldnumber+0x24>
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	3301      	adds	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	2b1f      	cmp	r3, #31
 800b358:	d903      	bls.n	800b362 <get_ldnumber+0x34>
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b3a      	cmp	r3, #58	; 0x3a
 800b360:	d1f4      	bne.n	800b34c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2b3a      	cmp	r3, #58	; 0x3a
 800b368:	d11c      	bne.n	800b3a4 <get_ldnumber+0x76>
			tp = *path;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	60fa      	str	r2, [r7, #12]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	3b30      	subs	r3, #48	; 0x30
 800b37a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b09      	cmp	r3, #9
 800b380:	d80e      	bhi.n	800b3a0 <get_ldnumber+0x72>
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	429a      	cmp	r2, r3
 800b388:	d10a      	bne.n	800b3a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d107      	bne.n	800b3a0 <get_ldnumber+0x72>
					vol = (int)i;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	3301      	adds	r3, #1
 800b398:	617b      	str	r3, [r7, #20]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	e002      	b.n	800b3aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b3a8:	693b      	ldr	r3, [r7, #16]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b3d4:	330c      	adds	r3, #12
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7fe f9fe 	bl	80097e0 <move_window>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d001      	beq.n	800b3ee <check_fs+0x36>
		return 3;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e04a      	b.n	800b484 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	b21a      	sxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b402:	b21b      	sxth	r3, r3
 800b404:	4313      	orrs	r3, r2
 800b406:	b21b      	sxth	r3, r3
 800b408:	4a20      	ldr	r2, [pc, #128]	; (800b48c <check_fs+0xd4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d001      	beq.n	800b412 <check_fs+0x5a>
		return 2;
 800b40e:	2302      	movs	r3, #2
 800b410:	e038      	b.n	800b484 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3336      	adds	r3, #54	; 0x36
 800b416:	3303      	adds	r3, #3
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	061a      	lsls	r2, r3, #24
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3336      	adds	r3, #54	; 0x36
 800b420:	3302      	adds	r3, #2
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	041b      	lsls	r3, r3, #16
 800b426:	4313      	orrs	r3, r2
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	3236      	adds	r2, #54	; 0x36
 800b42c:	3201      	adds	r2, #1
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	0212      	lsls	r2, r2, #8
 800b432:	4313      	orrs	r3, r2
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b43a:	4313      	orrs	r3, r2
 800b43c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b440:	4a13      	ldr	r2, [pc, #76]	; (800b490 <check_fs+0xd8>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d101      	bne.n	800b44a <check_fs+0x92>
		return 0;
 800b446:	2300      	movs	r3, #0
 800b448:	e01c      	b.n	800b484 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3352      	adds	r3, #82	; 0x52
 800b44e:	3303      	adds	r3, #3
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	061a      	lsls	r2, r3, #24
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3352      	adds	r3, #82	; 0x52
 800b458:	3302      	adds	r3, #2
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	4313      	orrs	r3, r2
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	3252      	adds	r2, #82	; 0x52
 800b464:	3201      	adds	r2, #1
 800b466:	7812      	ldrb	r2, [r2, #0]
 800b468:	0212      	lsls	r2, r2, #8
 800b46a:	4313      	orrs	r3, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b472:	4313      	orrs	r3, r2
 800b474:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b478:	4a05      	ldr	r2, [pc, #20]	; (800b490 <check_fs+0xd8>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d101      	bne.n	800b482 <check_fs+0xca>
		return 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	e000      	b.n	800b484 <check_fs+0xcc>

	return 1;
 800b482:	2301      	movs	r3, #1
}
 800b484:	4618      	mov	r0, r3
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	ffffaa55 	.word	0xffffaa55
 800b490:	00544146 	.word	0x00544146

0800b494 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b096      	sub	sp, #88	; 0x58
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b4a8:	68b8      	ldr	r0, [r7, #8]
 800b4aa:	f7ff ff40 	bl	800b32e <get_ldnumber>
 800b4ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	da01      	bge.n	800b4ba <find_volume+0x26>
 800b4b6:	230b      	movs	r3, #11
 800b4b8:	e33c      	b.n	800bb34 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b4ba:	4ab3      	ldr	r2, [pc, #716]	; (800b788 <find_volume+0x2f4>)
 800b4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <find_volume+0x3a>
 800b4ca:	230c      	movs	r3, #12
 800b4cc:	e332      	b.n	800bb34 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4d2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01d      	beq.n	800b51c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fd fe3e 	bl	800916c <disk_status>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b4f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10c      	bne.n	800b51c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d007      	beq.n	800b518 <find_volume+0x84>
 800b508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800b514:	230a      	movs	r3, #10
 800b516:	e30d      	b.n	800bb34 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800b518:	2300      	movs	r3, #0
 800b51a:	e30b      	b.n	800bb34 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b530:	3301      	adds	r3, #1
 800b532:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b53a:	3301      	adds	r3, #1
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fd fe2e 	bl	80091a0 <disk_initialize>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b54a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b556:	2303      	movs	r3, #3
 800b558:	e2ec      	b.n	800bb34 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d007      	beq.n	800b570 <find_volume+0xdc>
 800b560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800b56c:	230a      	movs	r3, #10
 800b56e:	e2e1      	b.n	800bb34 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b576:	3301      	adds	r3, #1
 800b578:	7818      	ldrb	r0, [r3, #0]
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b580:	330a      	adds	r3, #10
 800b582:	461a      	mov	r2, r3
 800b584:	2102      	movs	r1, #2
 800b586:	f7fd fe71 	bl	800926c <disk_ioctl>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10f      	bne.n	800b5b0 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b596:	330a      	adds	r3, #10
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b59e:	d307      	bcc.n	800b5b0 <find_volume+0x11c>
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a6:	330a      	adds	r3, #10
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ae:	d901      	bls.n	800b5b4 <find_volume+0x120>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e2bf      	b.n	800bb34 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b5b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5bc:	f7ff fefc 	bl	800b3b8 <check_fs>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b5c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d155      	bne.n	800b67a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b5d2:	e029      	b.n	800b628 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b5d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b5de:	4413      	add	r3, r2
 800b5e0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d012      	beq.n	800b612 <find_volume+0x17e>
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ee:	330b      	adds	r3, #11
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	061a      	lsls	r2, r3, #24
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	330a      	adds	r3, #10
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	041b      	lsls	r3, r3, #16
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b600:	3209      	adds	r2, #9
 800b602:	7812      	ldrb	r2, [r2, #0]
 800b604:	0212      	lsls	r2, r2, #8
 800b606:	4313      	orrs	r3, r2
 800b608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60a:	3208      	adds	r2, #8
 800b60c:	7812      	ldrb	r2, [r2, #0]
 800b60e:	431a      	orrs	r2, r3
 800b610:	e000      	b.n	800b614 <find_volume+0x180>
 800b612:	2200      	movs	r2, #0
 800b614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b61c:	440b      	add	r3, r1
 800b61e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b624:	3301      	adds	r3, #1
 800b626:	643b      	str	r3, [r7, #64]	; 0x40
 800b628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d9d2      	bls.n	800b5d4 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b62e:	2300      	movs	r3, #0
 800b630:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <find_volume+0x1aa>
 800b638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63a:	3b01      	subs	r3, #1
 800b63c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b63e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b646:	4413      	add	r3, r2
 800b648:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b64c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b650:	2b00      	cmp	r3, #0
 800b652:	d005      	beq.n	800b660 <find_volume+0x1cc>
 800b654:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b658:	f7ff feae 	bl	800b3b8 <check_fs>
 800b65c:	4603      	mov	r3, r0
 800b65e:	e000      	b.n	800b662 <find_volume+0x1ce>
 800b660:	2302      	movs	r3, #2
 800b662:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b666:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d005      	beq.n	800b67a <find_volume+0x1e6>
 800b66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b670:	3301      	adds	r3, #1
 800b672:	643b      	str	r3, [r7, #64]	; 0x40
 800b674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b676:	2b03      	cmp	r3, #3
 800b678:	d9e1      	bls.n	800b63e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b67a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d101      	bne.n	800b686 <find_volume+0x1f2>
 800b682:	2301      	movs	r3, #1
 800b684:	e256      	b.n	800bb34 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <find_volume+0x1fe>
 800b68e:	230d      	movs	r3, #13
 800b690:	e250      	b.n	800bb34 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	7b1b      	ldrb	r3, [r3, #12]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	b21a      	sxth	r2, r3
 800b69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69c:	7adb      	ldrb	r3, [r3, #11]
 800b69e:	b21b      	sxth	r3, r3
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	b21a      	sxth	r2, r3
 800b6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6aa:	330a      	adds	r3, #10
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	b21b      	sxth	r3, r3
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d001      	beq.n	800b6b8 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800b6b4:	230d      	movs	r3, #13
 800b6b6:	e23d      	b.n	800bb34 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	7ddb      	ldrb	r3, [r3, #23]
 800b6bc:	021b      	lsls	r3, r3, #8
 800b6be:	b21a      	sxth	r2, r3
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c2:	7d9b      	ldrb	r3, [r3, #22]
 800b6c4:	b21b      	sxth	r3, r3
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	b21b      	sxth	r3, r3
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d112      	bne.n	800b6fa <find_volume+0x266>
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b6da:	061a      	lsls	r2, r3, #24
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b6e2:	041b      	lsls	r3, r3, #16
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6e8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b6ec:	0212      	lsls	r2, r2, #8
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6f2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b700:	3318      	adds	r3, #24
 800b702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b704:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	7c1a      	ldrb	r2, [r3, #16]
 800b70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b710:	3303      	adds	r3, #3
 800b712:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71a:	3303      	adds	r3, #3
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d008      	beq.n	800b734 <find_volume+0x2a0>
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b728:	3303      	adds	r3, #3
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d001      	beq.n	800b734 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800b730:	230d      	movs	r3, #13
 800b732:	e1ff      	b.n	800bb34 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b73a:	3303      	adds	r3, #3
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b742:	fb02 f303 	mul.w	r3, r2, r3
 800b746:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	7b5a      	ldrb	r2, [r3, #13]
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b752:	3302      	adds	r3, #2
 800b754:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b75c:	3302      	adds	r3, #2
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00e      	beq.n	800b782 <find_volume+0x2ee>
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b76a:	3302      	adds	r3, #2
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b776:	3302      	adds	r3, #2
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	4013      	ands	r3, r2
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d004      	beq.n	800b78c <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800b782:	230d      	movs	r3, #13
 800b784:	e1d6      	b.n	800bb34 <find_volume+0x6a0>
 800b786:	bf00      	nop
 800b788:	20000228 	.word	0x20000228

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	7c9b      	ldrb	r3, [r3, #18]
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	b21a      	sxth	r2, r3
 800b794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b796:	7c5b      	ldrb	r3, [r3, #17]
 800b798:	b21b      	sxth	r3, r3
 800b79a:	4313      	orrs	r3, r2
 800b79c:	b21b      	sxth	r3, r3
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	881a      	ldrh	r2, [r3, #0]
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ba:	330a      	adds	r3, #10
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	095b      	lsrs	r3, r3, #5
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	fbb2 f1f3 	udiv	r1, r2, r3
 800b7c6:	fb03 f301 	mul.w	r3, r3, r1
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800b7d2:	230d      	movs	r3, #13
 800b7d4:	e1ae      	b.n	800bb34 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	7d1b      	ldrb	r3, [r3, #20]
 800b7da:	021b      	lsls	r3, r3, #8
 800b7dc:	b21a      	sxth	r2, r3
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	7cdb      	ldrb	r3, [r3, #19]
 800b7e2:	b21b      	sxth	r3, r3
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	b21b      	sxth	r3, r3
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b7ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d112      	bne.n	800b818 <find_volume+0x384>
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b7f8:	061a      	lsls	r2, r3, #24
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b800:	041b      	lsls	r3, r3, #16
 800b802:	4313      	orrs	r3, r2
 800b804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b806:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b80a:	0212      	lsls	r2, r2, #8
 800b80c:	4313      	orrs	r3, r2
 800b80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b810:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b814:	4313      	orrs	r3, r2
 800b816:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	7bdb      	ldrb	r3, [r3, #15]
 800b81c:	021b      	lsls	r3, r3, #8
 800b81e:	b21a      	sxth	r2, r3
 800b820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b822:	7b9b      	ldrb	r3, [r3, #14]
 800b824:	b21b      	sxth	r3, r3
 800b826:	4313      	orrs	r3, r2
 800b828:	b21b      	sxth	r3, r3
 800b82a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b82c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d101      	bne.n	800b836 <find_volume+0x3a2>
 800b832:	230d      	movs	r3, #13
 800b834:	e17e      	b.n	800bb34 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b836:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b83a:	441a      	add	r2, r3
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b842:	3308      	adds	r3, #8
 800b844:	8819      	ldrh	r1, [r3, #0]
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b84c:	330a      	adds	r3, #10
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	095b      	lsrs	r3, r3, #5
 800b852:	b29b      	uxth	r3, r3
 800b854:	fbb1 f3f3 	udiv	r3, r1, r3
 800b858:	b29b      	uxth	r3, r3
 800b85a:	4413      	add	r3, r2
 800b85c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b85e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	429a      	cmp	r2, r3
 800b864:	d201      	bcs.n	800b86a <find_volume+0x3d6>
 800b866:	230d      	movs	r3, #13
 800b868:	e164      	b.n	800bb34 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b86a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b876:	3302      	adds	r3, #2
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <find_volume+0x3f6>
 800b886:	230d      	movs	r3, #13
 800b888:	e154      	b.n	800bb34 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800b88a:	2301      	movs	r3, #1
 800b88c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b896:	4293      	cmp	r3, r2
 800b898:	d902      	bls.n	800b8a0 <find_volume+0x40c>
 800b89a:	2302      	movs	r3, #2
 800b89c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d902      	bls.n	800b8b0 <find_volume+0x41c>
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	1c9a      	adds	r2, r3, #2
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ba:	3314      	adds	r3, #20
 800b8bc:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800b8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8c4:	331c      	adds	r3, #28
 800b8c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8c8:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b8ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ce:	441a      	add	r2, r3
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8d6:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800b8d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	441a      	add	r2, r3
 800b8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8e4:	3308      	adds	r3, #8
 800b8e6:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800b8e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8ec:	2b03      	cmp	r3, #3
 800b8ee:	d127      	bne.n	800b940 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <find_volume+0x46e>
 800b8fe:	230d      	movs	r3, #13
 800b900:	e118      	b.n	800bb34 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b908:	061a      	lsls	r2, r3, #24
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b910:	041b      	lsls	r3, r3, #16
 800b912:	4313      	orrs	r3, r2
 800b914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b916:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b91a:	0212      	lsls	r2, r2, #8
 800b91c:	4313      	orrs	r3, r2
 800b91e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b920:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b924:	431a      	orrs	r2, r3
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b92c:	3304      	adds	r3, #4
 800b92e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b936:	3314      	adds	r3, #20
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	647b      	str	r3, [r7, #68]	; 0x44
 800b93e:	e030      	b.n	800b9a2 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b946:	3308      	adds	r3, #8
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <find_volume+0x4be>
 800b94e:	230d      	movs	r3, #13
 800b950:	e0f0      	b.n	800bb34 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95c:	441a      	add	r2, r3
 800b95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b960:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b964:	3304      	adds	r3, #4
 800b966:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d106      	bne.n	800b97e <find_volume+0x4ea>
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b976:	3314      	adds	r3, #20
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	005b      	lsls	r3, r3, #1
 800b97c:	e010      	b.n	800b9a0 <find_volume+0x50c>
 800b97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b984:	3314      	adds	r3, #20
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	4613      	mov	r3, r2
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	4413      	add	r3, r2
 800b98e:	085a      	lsrs	r2, r3, #1
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b996:	3314      	adds	r3, #20
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b9a0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9a8:	3318      	adds	r3, #24
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b2:	330a      	adds	r3, #10
 800b9b4:	881b      	ldrh	r3, [r3, #0]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ba:	440b      	add	r3, r1
 800b9bc:	1e59      	subs	r1, r3, #1
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c4:	330a      	adds	r3, #10
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d201      	bcs.n	800b9d4 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800b9d0:	230d      	movs	r3, #13
 800b9d2:	e0af      	b.n	800bb34 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9da:	3310      	adds	r3, #16
 800b9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9e8:	3310      	adds	r3, #16
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f2:	330c      	adds	r3, #12
 800b9f4:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9fc:	3305      	adds	r3, #5
 800b9fe:	2280      	movs	r2, #128	; 0x80
 800ba00:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800ba02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d17d      	bne.n	800bb06 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba10:	021b      	lsls	r3, r3, #8
 800ba12:	b21a      	sxth	r2, r3
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba1a:	b21b      	sxth	r3, r3
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	b21b      	sxth	r3, r3
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d170      	bne.n	800bb06 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800ba24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba26:	3301      	adds	r3, #1
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba2c:	f7fd fed8 	bl	80097e0 <move_window>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d167      	bne.n	800bb06 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800ba36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba3c:	3305      	adds	r3, #5
 800ba3e:	2200      	movs	r2, #0
 800ba40:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800ba48:	021b      	lsls	r3, r3, #8
 800ba4a:	b21a      	sxth	r2, r3
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ba52:	b21b      	sxth	r3, r3
 800ba54:	4313      	orrs	r3, r2
 800ba56:	b21b      	sxth	r3, r3
 800ba58:	4a38      	ldr	r2, [pc, #224]	; (800bb3c <find_volume+0x6a8>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d153      	bne.n	800bb06 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba60:	78db      	ldrb	r3, [r3, #3]
 800ba62:	061a      	lsls	r2, r3, #24
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	789b      	ldrb	r3, [r3, #2]
 800ba68:	041b      	lsls	r3, r3, #16
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba6e:	7852      	ldrb	r2, [r2, #1]
 800ba70:	0212      	lsls	r2, r2, #8
 800ba72:	4313      	orrs	r3, r2
 800ba74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba76:	7812      	ldrb	r2, [r2, #0]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	4a31      	ldr	r2, [pc, #196]	; (800bb40 <find_volume+0x6ac>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d142      	bne.n	800bb06 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800ba80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba82:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800ba86:	061a      	lsls	r2, r3, #24
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800ba8e:	041b      	lsls	r3, r3, #16
 800ba90:	4313      	orrs	r3, r2
 800ba92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba94:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800ba98:	0212      	lsls	r2, r2, #8
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba9e:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800baa2:	4313      	orrs	r3, r2
 800baa4:	4a27      	ldr	r2, [pc, #156]	; (800bb44 <find_volume+0x6b0>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d12d      	bne.n	800bb06 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800baaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baac:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800bab0:	061a      	lsls	r2, r3, #24
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800bab8:	041b      	lsls	r3, r3, #16
 800baba:	4313      	orrs	r3, r2
 800babc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800babe:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800bac2:	0212      	lsls	r2, r2, #8
 800bac4:	4313      	orrs	r3, r2
 800bac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bac8:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800bacc:	431a      	orrs	r2, r3
 800bace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bad4:	3310      	adds	r3, #16
 800bad6:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800bade:	061a      	lsls	r2, r3, #24
 800bae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800bae6:	041b      	lsls	r3, r3, #16
 800bae8:	4313      	orrs	r3, r2
 800baea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baec:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800baf0:	0212      	lsls	r2, r2, #8
 800baf2:	4313      	orrs	r3, r2
 800baf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baf6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800bafa:	431a      	orrs	r2, r3
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb02:	330c      	adds	r3, #12
 800bb04:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb0c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bb10:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800bb12:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <find_volume+0x6b4>)
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	3301      	adds	r3, #1
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <find_volume+0x6b4>)
 800bb1c:	801a      	strh	r2, [r3, #0]
 800bb1e:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <find_volume+0x6b4>)
 800bb20:	881a      	ldrh	r2, [r3, #0]
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb28:	3306      	adds	r3, #6
 800bb2a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800bb2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb2e:	f7fd fdd3 	bl	80096d8 <clear_lock>
#endif

	return FR_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3758      	adds	r7, #88	; 0x58
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	ffffaa55 	.word	0xffffaa55
 800bb40:	41615252 	.word	0x41615252
 800bb44:	61417272 	.word	0x61417272
 800bb48:	2000022c 	.word	0x2000022c

0800bb4c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d02d      	beq.n	800bbba <validate+0x6e>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d027      	beq.n	800bbba <validate+0x6e>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01e      	beq.n	800bbba <validate+0x6e>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	3306      	adds	r3, #6
 800bb8a:	881a      	ldrh	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb92:	3304      	adds	r3, #4
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d10f      	bne.n	800bbba <validate+0x6e>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba6:	3301      	adds	r3, #1
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fd fade 	bl	800916c <disk_status>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <validate+0x72>
		return FR_INVALID_OBJECT;
 800bbba:	2309      	movs	r3, #9
 800bbbc:	e000      	b.n	800bbc0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800bbda:	f107 0310 	add.w	r3, r7, #16
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fba5 	bl	800b32e <get_ldnumber>
 800bbe4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da01      	bge.n	800bbf0 <f_mount+0x28>
 800bbec:	230b      	movs	r3, #11
 800bbee:	e02f      	b.n	800bc50 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bbf0:	4a19      	ldr	r2, [pc, #100]	; (800bc58 <f_mount+0x90>)
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbf8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d007      	beq.n	800bc10 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800bc00:	69b8      	ldr	r0, [r7, #24]
 800bc02:	f7fd fd69 	bl	80096d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d004      	beq.n	800bc20 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	490d      	ldr	r1, [pc, #52]	; (800bc58 <f_mount+0x90>)
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <f_mount+0x6e>
 800bc30:	79fb      	ldrb	r3, [r7, #7]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d001      	beq.n	800bc3a <f_mount+0x72>
 800bc36:	2300      	movs	r3, #0
 800bc38:	e00a      	b.n	800bc50 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800bc3a:	f107 0108 	add.w	r1, r7, #8
 800bc3e:	f107 030c 	add.w	r3, r7, #12
 800bc42:	2200      	movs	r2, #0
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fc25 	bl	800b494 <find_volume>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3720      	adds	r7, #32
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	20000228 	.word	0x20000228

0800bc5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	f107 0318 	add.w	r3, r7, #24
 800bc6a:	3b0c      	subs	r3, #12
 800bc6c:	6018      	str	r0, [r3, #0]
 800bc6e:	f107 0318 	add.w	r3, r7, #24
 800bc72:	3b10      	subs	r3, #16
 800bc74:	6019      	str	r1, [r3, #0]
 800bc76:	f107 0318 	add.w	r3, r7, #24
 800bc7a:	3b11      	subs	r3, #17
 800bc7c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800bc7e:	f107 0318 	add.w	r3, r7, #24
 800bc82:	3b0c      	subs	r3, #12
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <f_open+0x32>
 800bc8a:	2309      	movs	r3, #9
 800bc8c:	e319      	b.n	800c2c2 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800bc8e:	f107 0318 	add.w	r3, r7, #24
 800bc92:	3b0c      	subs	r3, #12
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bc9e:	f107 0318 	add.w	r3, r7, #24
 800bca2:	3b11      	subs	r3, #17
 800bca4:	f107 0218 	add.w	r2, r7, #24
 800bca8:	3a11      	subs	r2, #17
 800bcaa:	7812      	ldrb	r2, [r2, #0]
 800bcac:	f002 021f 	and.w	r2, r2, #31
 800bcb0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bcb2:	f107 0318 	add.w	r3, r7, #24
 800bcb6:	3b11      	subs	r3, #17
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	f023 0301 	bic.w	r3, r3, #1
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	f107 0118 	add.w	r1, r7, #24
 800bcc4:	3910      	subs	r1, #16
 800bcc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bcca:	3b18      	subs	r3, #24
 800bccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff fbdf 	bl	800b494 <find_volume>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bcdc:	f102 0217 	add.w	r2, r2, #23
 800bce0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bce2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bce6:	f103 0317 	add.w	r3, r3, #23
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f040 82e3 	bne.w	800c2b8 <f_open+0x65c>
		INIT_BUF(dj);
 800bcf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bcf6:	3b18      	subs	r3, #24
 800bcf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfc:	3318      	adds	r3, #24
 800bcfe:	f107 0218 	add.w	r2, r7, #24
 800bd02:	3a04      	subs	r2, #4
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd0a:	3b18      	subs	r3, #24
 800bd0c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bd10:	4ad1      	ldr	r2, [pc, #836]	; (800c058 <f_open+0x3fc>)
 800bd12:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800bd14:	f107 0318 	add.w	r3, r7, #24
 800bd18:	3b10      	subs	r3, #16
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd20:	3b18      	subs	r3, #24
 800bd22:	4611      	mov	r1, r2
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fa89 	bl	800b23c <follow_path>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bd30:	f102 0217 	add.w	r2, r2, #23
 800bd34:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800bd36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd3a:	3b18      	subs	r3, #24
 800bd3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd40:	3314      	adds	r3, #20
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bd48:	f102 0210 	add.w	r2, r2, #16
 800bd4c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bd4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bd52:	f103 0317 	add.w	r3, r3, #23
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d126      	bne.n	800bdaa <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800bd5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bd60:	f103 0310 	add.w	r3, r3, #16
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d106      	bne.n	800bd78 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800bd6a:	2306      	movs	r3, #6
 800bd6c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bd70:	f102 0217 	add.w	r2, r2, #23
 800bd74:	7013      	strb	r3, [r2, #0]
 800bd76:	e018      	b.n	800bdaa <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd78:	f107 0318 	add.w	r3, r7, #24
 800bd7c:	3b11      	subs	r3, #17
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	f023 0301 	bic.w	r3, r3, #1
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bf14      	ite	ne
 800bd88:	2301      	movne	r3, #1
 800bd8a:	2300      	moveq	r3, #0
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd94:	3b18      	subs	r3, #24
 800bd96:	4611      	mov	r1, r2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fd fb01 	bl	80093a0 <chk_lock>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bda4:	f102 0217 	add.w	r2, r2, #23
 800bda8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bdaa:	f107 0318 	add.w	r3, r7, #24
 800bdae:	3b11      	subs	r3, #17
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	f003 031c 	and.w	r3, r3, #28
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 8150 	beq.w	800c05c <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800bdbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bdc0:	f103 0317 	add.w	r3, r3, #23
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d030      	beq.n	800be2c <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800bdca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bdce:	f103 0317 	add.w	r3, r3, #23
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	2b04      	cmp	r3, #4
 800bdd6:	d112      	bne.n	800bdfe <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bdd8:	f7fd fb54 	bl	8009484 <enq_lock>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d007      	beq.n	800bdf2 <f_open+0x196>
 800bde2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bde6:	3b18      	subs	r3, #24
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fe ff35 	bl	800ac58 <dir_register>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	e000      	b.n	800bdf4 <f_open+0x198>
 800bdf2:	2312      	movs	r3, #18
 800bdf4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bdf8:	f102 0217 	add.w	r2, r2, #23
 800bdfc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bdfe:	f107 0318 	add.w	r3, r7, #24
 800be02:	3b11      	subs	r3, #17
 800be04:	f107 0218 	add.w	r2, r7, #24
 800be08:	3a11      	subs	r2, #17
 800be0a:	7812      	ldrb	r2, [r2, #0]
 800be0c:	f042 0208 	orr.w	r2, r2, #8
 800be10:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800be12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be16:	3b18      	subs	r3, #24
 800be18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be1c:	3314      	adds	r3, #20
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800be24:	f102 0210 	add.w	r2, r2, #16
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	e01f      	b.n	800be6c <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be2c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800be30:	f103 0310 	add.w	r3, r3, #16
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	330b      	adds	r3, #11
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	f003 0311 	and.w	r3, r3, #17
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d006      	beq.n	800be50 <f_open+0x1f4>
					res = FR_DENIED;
 800be42:	2307      	movs	r3, #7
 800be44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800be48:	f102 0217 	add.w	r2, r2, #23
 800be4c:	7013      	strb	r3, [r2, #0]
 800be4e:	e00d      	b.n	800be6c <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800be50:	f107 0318 	add.w	r3, r7, #24
 800be54:	3b11      	subs	r3, #17
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <f_open+0x210>
						res = FR_EXIST;
 800be60:	2308      	movs	r3, #8
 800be62:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800be66:	f102 0217 	add.w	r2, r2, #23
 800be6a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800be70:	f103 0317 	add.w	r3, r3, #23
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	f040 8122 	bne.w	800c0c0 <f_open+0x464>
 800be7c:	f107 0318 	add.w	r3, r7, #24
 800be80:	3b11      	subs	r3, #17
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	f003 0308 	and.w	r3, r3, #8
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 8119 	beq.w	800c0c0 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800be8e:	f7fd f90b 	bl	80090a8 <get_fattime>
 800be92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800be96:	f103 030c 	add.w	r3, r3, #12
 800be9a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800be9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bea0:	f103 0310 	add.w	r3, r3, #16
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	330e      	adds	r3, #14
 800bea8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800beac:	f102 020c 	add.w	r2, r2, #12
 800beb0:	6812      	ldr	r2, [r2, #0]
 800beb2:	b2d2      	uxtb	r2, r2
 800beb4:	701a      	strb	r2, [r3, #0]
 800beb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800beba:	f103 030c 	add.w	r3, r3, #12
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	0a1b      	lsrs	r3, r3, #8
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800beca:	f103 0310 	add.w	r3, r3, #16
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	330f      	adds	r3, #15
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800beda:	f103 030c 	add.w	r3, r3, #12
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	0c1a      	lsrs	r2, r3, #16
 800bee2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bee6:	f103 0310 	add.w	r3, r3, #16
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3310      	adds	r3, #16
 800beee:	b2d2      	uxtb	r2, r2
 800bef0:	701a      	strb	r2, [r3, #0]
 800bef2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bef6:	f103 030c 	add.w	r3, r3, #12
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	0e1a      	lsrs	r2, r3, #24
 800befe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf02:	f103 0310 	add.w	r3, r3, #16
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3311      	adds	r3, #17
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bf0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf12:	f103 0310 	add.w	r3, r3, #16
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	330b      	adds	r3, #11
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800bf1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf22:	f103 0310 	add.w	r3, r3, #16
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	331c      	adds	r3, #28
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf32:	f103 0310 	add.w	r3, r3, #16
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	331d      	adds	r3, #29
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	701a      	strb	r2, [r3, #0]
 800bf3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf42:	f103 0310 	add.w	r3, r3, #16
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	331e      	adds	r3, #30
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf52:	f103 0310 	add.w	r3, r3, #16
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	331f      	adds	r3, #31
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800bf5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf62:	3b18      	subs	r3, #24
 800bf64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bf6e:	f102 0210 	add.w	r2, r2, #16
 800bf72:	6811      	ldr	r1, [r2, #0]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fbae 	bl	800a6d6 <ld_clust>
 800bf7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf7e:	f103 0308 	add.w	r3, r3, #8
 800bf82:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800bf84:	2100      	movs	r1, #0
 800bf86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf8a:	f103 0310 	add.w	r3, r3, #16
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	f7fe fbd0 	bl	800a734 <st_clust>
				dj.fs->wflag = 1;
 800bf94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf98:	3b18      	subs	r3, #24
 800bf9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa4:	3304      	adds	r3, #4
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800bfaa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfae:	f103 0308 	add.w	r3, r3, #8
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f000 8083 	beq.w	800c0c0 <f_open+0x464>
					dw = dj.fs->winsect;
 800bfba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bfbe:	3b18      	subs	r3, #24
 800bfc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bfca:	330c      	adds	r3, #12
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bfd2:	f102 020c 	add.w	r2, r2, #12
 800bfd6:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800bfd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bfdc:	3b18      	subs	r3, #24
 800bfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bfe8:	f102 0208 	add.w	r2, r2, #8
 800bfec:	6811      	ldr	r1, [r2, #0]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fd ff86 	bl	8009f00 <remove_chain>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bffa:	f102 0217 	add.w	r2, r2, #23
 800bffe:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800c000:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c004:	f103 0317 	add.w	r3, r3, #23
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d158      	bne.n	800c0c0 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800c00e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c012:	3b18      	subs	r3, #24
 800c014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c01e:	f102 0208 	add.w	r2, r2, #8
 800c022:	6812      	ldr	r2, [r2, #0]
 800c024:	3a01      	subs	r2, #1
 800c026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c02a:	330c      	adds	r3, #12
 800c02c:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800c02e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c032:	3b18      	subs	r3, #24
 800c034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c03e:	f102 020c 	add.w	r2, r2, #12
 800c042:	6811      	ldr	r1, [r2, #0]
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd fbcb 	bl	80097e0 <move_window>
 800c04a:	4603      	mov	r3, r0
 800c04c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c050:	f102 0217 	add.w	r2, r2, #23
 800c054:	7013      	strb	r3, [r2, #0]
 800c056:	e033      	b.n	800c0c0 <f_open+0x464>
 800c058:	20000248 	.word	0x20000248
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800c05c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c060:	f103 0317 	add.w	r3, r3, #23
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d12a      	bne.n	800c0c0 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800c06a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c06e:	f103 0310 	add.w	r3, r3, #16
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	330b      	adds	r3, #11
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	f003 0310 	and.w	r3, r3, #16
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <f_open+0x432>
					res = FR_NO_FILE;
 800c080:	2304      	movs	r3, #4
 800c082:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c086:	f102 0217 	add.w	r2, r2, #23
 800c08a:	7013      	strb	r3, [r2, #0]
 800c08c:	e018      	b.n	800c0c0 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800c08e:	f107 0318 	add.w	r3, r7, #24
 800c092:	3b11      	subs	r3, #17
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	f003 0302 	and.w	r3, r3, #2
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d010      	beq.n	800c0c0 <f_open+0x464>
 800c09e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c0a2:	f103 0310 	add.w	r3, r3, #16
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	330b      	adds	r3, #11
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d005      	beq.n	800c0c0 <f_open+0x464>
						res = FR_DENIED;
 800c0b4:	2307      	movs	r3, #7
 800c0b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c0ba:	f102 0217 	add.w	r2, r2, #23
 800c0be:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800c0c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c0c4:	f103 0317 	add.w	r3, r3, #23
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d15b      	bne.n	800c186 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c0ce:	f107 0318 	add.w	r3, r7, #24
 800c0d2:	3b11      	subs	r3, #17
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	f003 0308 	and.w	r3, r3, #8
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d009      	beq.n	800c0f2 <f_open+0x496>
				mode |= FA__WRITTEN;
 800c0de:	f107 0318 	add.w	r3, r7, #24
 800c0e2:	3b11      	subs	r3, #17
 800c0e4:	f107 0218 	add.w	r2, r7, #24
 800c0e8:	3a11      	subs	r2, #17
 800c0ea:	7812      	ldrb	r2, [r2, #0]
 800c0ec:	f042 0220 	orr.w	r2, r2, #32
 800c0f0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800c0f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c0f6:	3b18      	subs	r3, #24
 800c0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c102:	330c      	adds	r3, #12
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	f107 0318 	add.w	r3, r7, #24
 800c10a:	3b0c      	subs	r3, #12
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c112:	331c      	adds	r3, #28
 800c114:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800c116:	f107 0318 	add.w	r3, r7, #24
 800c11a:	3b0c      	subs	r3, #12
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c122:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c126:	f102 0210 	add.w	r2, r2, #16
 800c12a:	6812      	ldr	r2, [r2, #0]
 800c12c:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c12e:	f107 0318 	add.w	r3, r7, #24
 800c132:	3b11      	subs	r3, #17
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	f023 0301 	bic.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	bf14      	ite	ne
 800c13e:	2301      	movne	r3, #1
 800c140:	2300      	moveq	r3, #0
 800c142:	b2db      	uxtb	r3, r3
 800c144:	461a      	mov	r2, r3
 800c146:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c14a:	3b18      	subs	r3, #24
 800c14c:	4611      	mov	r1, r2
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fd f9bc 	bl	80094cc <inc_lock>
 800c154:	4602      	mov	r2, r0
 800c156:	f107 0318 	add.w	r3, r7, #24
 800c15a:	3b0c      	subs	r3, #12
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c162:	3308      	adds	r3, #8
 800c164:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800c166:	f107 0318 	add.w	r3, r7, #24
 800c16a:	3b0c      	subs	r3, #12
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c172:	3308      	adds	r3, #8
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d105      	bne.n	800c186 <f_open+0x52a>
 800c17a:	2302      	movs	r3, #2
 800c17c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c180:	f102 0217 	add.w	r2, r2, #23
 800c184:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800c186:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c18a:	f103 0317 	add.w	r3, r3, #23
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f040 8091 	bne.w	800c2b8 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800c196:	f107 0318 	add.w	r3, r7, #24
 800c19a:	3b0c      	subs	r3, #12
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a2:	3306      	adds	r3, #6
 800c1a4:	f107 0218 	add.w	r2, r7, #24
 800c1a8:	3a11      	subs	r2, #17
 800c1aa:	7812      	ldrb	r2, [r2, #0]
 800c1ac:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800c1ae:	f107 0318 	add.w	r3, r7, #24
 800c1b2:	3b0c      	subs	r3, #12
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ba:	3307      	adds	r3, #7
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800c1c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c1c4:	3b18      	subs	r3, #24
 800c1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c1d0:	f102 0210 	add.w	r2, r2, #16
 800c1d4:	6811      	ldr	r1, [r2, #0]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe fa7d 	bl	800a6d6 <ld_clust>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	f107 0318 	add.w	r3, r7, #24
 800c1e2:	3b0c      	subs	r3, #12
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ea:	3310      	adds	r3, #16
 800c1ec:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c1ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c1f2:	f103 0310 	add.w	r3, r3, #16
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	331f      	adds	r3, #31
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	061a      	lsls	r2, r3, #24
 800c1fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c202:	f103 0310 	add.w	r3, r3, #16
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	331e      	adds	r3, #30
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	041b      	lsls	r3, r3, #16
 800c20e:	4313      	orrs	r3, r2
 800c210:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c214:	f102 0210 	add.w	r2, r2, #16
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	321d      	adds	r2, #29
 800c21c:	7812      	ldrb	r2, [r2, #0]
 800c21e:	0212      	lsls	r2, r2, #8
 800c220:	4313      	orrs	r3, r2
 800c222:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c226:	f102 0210 	add.w	r2, r2, #16
 800c22a:	6812      	ldr	r2, [r2, #0]
 800c22c:	321c      	adds	r2, #28
 800c22e:	7812      	ldrb	r2, [r2, #0]
 800c230:	431a      	orrs	r2, r3
 800c232:	f107 0318 	add.w	r3, r7, #24
 800c236:	3b0c      	subs	r3, #12
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c23e:	330c      	adds	r3, #12
 800c240:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800c242:	f107 0318 	add.w	r3, r7, #24
 800c246:	3b0c      	subs	r3, #12
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c24e:	3308      	adds	r3, #8
 800c250:	2200      	movs	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800c254:	f107 0318 	add.w	r3, r7, #24
 800c258:	3b0c      	subs	r3, #12
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c260:	3318      	adds	r3, #24
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c266:	f107 0318 	add.w	r3, r7, #24
 800c26a:	3b0c      	subs	r3, #12
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c272:	3304      	adds	r3, #4
 800c274:	2200      	movs	r2, #0
 800c276:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c27c:	3b18      	subs	r3, #24
 800c27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	f107 0318 	add.w	r3, r7, #24
 800c288:	3b0c      	subs	r3, #12
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c290:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800c292:	f107 0318 	add.w	r3, r7, #24
 800c296:	3b0c      	subs	r3, #12
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a4:	3306      	adds	r3, #6
 800c2a6:	881a      	ldrh	r2, [r3, #0]
 800c2a8:	f107 0318 	add.w	r3, r7, #24
 800c2ac:	3b0c      	subs	r3, #12
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800c2b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c2bc:	f103 0317 	add.w	r3, r3, #23
 800c2c0:	781b      	ldrb	r3, [r3, #0]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop

0800c2d0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08c      	sub	sp, #48	; 0x30
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f7ff fc2f 	bl	800bb4c <validate>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c2f2:	7ffb      	ldrb	r3, [r7, #31]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <f_read+0x2c>
 800c2f8:	7ffb      	ldrb	r3, [r7, #31]
 800c2fa:	e1fb      	b.n	800c6f4 <f_read+0x424>
	if (fp->err)								/* Check error */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c302:	3307      	adds	r3, #7
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d005      	beq.n	800c316 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c310:	3307      	adds	r3, #7
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	e1ee      	b.n	800c6f4 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c31c:	3306      	adds	r3, #6
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f003 0301 	and.w	r3, r3, #1
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c328:	2307      	movs	r3, #7
 800c32a:	e1e3      	b.n	800c6f4 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c332:	330c      	adds	r3, #12
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c33c:	3308      	adds	r3, #8
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	429a      	cmp	r2, r3
 800c34a:	f240 81ce 	bls.w	800c6ea <f_read+0x41a>
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c352:	e1ca      	b.n	800c6ea <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c35a:	3308      	adds	r3, #8
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c36a:	330a      	adds	r3, #10
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	fbb2 f1f3 	udiv	r1, r2, r3
 800c372:	fb03 f301 	mul.w	r3, r3, r1
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f040 8160 	bne.w	800c63e <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c384:	3308      	adds	r3, #8
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c394:	330a      	adds	r3, #10
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	fbb2 f3f3 	udiv	r3, r2, r3
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3aa:	3302      	adds	r3, #2
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d14a      	bne.n	800c452 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d0:	3310      	adds	r3, #16
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3d6:	e01f      	b.n	800c418 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c3de:	3304      	adds	r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ec:	3308      	adds	r3, #8
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7fd fe9d 	bl	800a132 <clmt_clust>
 800c3f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c3fa:	e00d      	b.n	800c418 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c40a:	3314      	adds	r3, #20
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f7fd fb10 	bl	8009a36 <get_fat>
 800c416:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800c418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d807      	bhi.n	800c42e <f_read+0x15e>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c424:	3307      	adds	r3, #7
 800c426:	2202      	movs	r2, #2
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	2302      	movs	r3, #2
 800c42c:	e162      	b.n	800c6f4 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c434:	d107      	bne.n	800c446 <f_read+0x176>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c43c:	3307      	adds	r3, #7
 800c43e:	2201      	movs	r2, #1
 800c440:	701a      	strb	r2, [r3, #0]
 800c442:	2301      	movs	r3, #1
 800c444:	e156      	b.n	800c6f4 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c44c:	3314      	adds	r3, #20
 800c44e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c450:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c460:	3314      	adds	r3, #20
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4619      	mov	r1, r3
 800c466:	4610      	mov	r0, r2
 800c468:	f7fd fabd 	bl	80099e6 <clust2sect>
 800c46c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d107      	bne.n	800c484 <f_read+0x1b4>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47a:	3307      	adds	r3, #7
 800c47c:	2202      	movs	r2, #2
 800c47e:	701a      	strb	r2, [r3, #0]
 800c480:	2302      	movs	r3, #2
 800c482:	e137      	b.n	800c6f4 <f_read+0x424>
			sect += csect;
 800c484:	7dfb      	ldrb	r3, [r7, #23]
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	4413      	add	r3, r2
 800c48a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c498:	330a      	adds	r3, #10
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	461a      	mov	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d070      	beq.n	800c58e <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c4ac:	7dfa      	ldrb	r2, [r7, #23]
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	441a      	add	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4be:	3302      	adds	r3, #2
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d90b      	bls.n	800c4de <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d2:	3302      	adds	r3, #2
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	7818      	ldrb	r0, [r3, #0]
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	693a      	ldr	r2, [r7, #16]
 800c4f2:	6a39      	ldr	r1, [r7, #32]
 800c4f4:	f7fc fe7a 	bl	80091ec <disk_read>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d007      	beq.n	800c50e <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c504:	3307      	adds	r3, #7
 800c506:	2201      	movs	r2, #1
 800c508:	701a      	strb	r2, [r3, #0]
 800c50a:	2301      	movs	r3, #1
 800c50c:	e0f2      	b.n	800c6f4 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c514:	3306      	adds	r3, #6
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d028      	beq.n	800c572 <f_read+0x2a2>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c526:	3318      	adds	r3, #24
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c530:	429a      	cmp	r2, r3
 800c532:	d91e      	bls.n	800c572 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c53a:	3318      	adds	r3, #24
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	1ad2      	subs	r2, r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c54e:	330a      	adds	r3, #10
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	fb03 f302 	mul.w	r3, r3, r2
 800c556:	6a3a      	ldr	r2, [r7, #32]
 800c558:	18d0      	adds	r0, r2, r3
 800c55a:	68f9      	ldr	r1, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c568:	330a      	adds	r3, #10
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	461a      	mov	r2, r3
 800c56e:	f7fc fe9b 	bl	80092a8 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c57e:	330a      	adds	r3, #10
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	fb02 f303 	mul.w	r3, r2, r3
 800c58a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800c58c:	e093      	b.n	800c6b6 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c594:	3318      	adds	r3, #24
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d049      	beq.n	800c632 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a4:	3306      	adds	r3, #6
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d028      	beq.n	800c602 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5bc:	3301      	adds	r3, #1
 800c5be:	7818      	ldrb	r0, [r3, #0]
 800c5c0:	68f9      	ldr	r1, [r7, #12]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5c8:	3318      	adds	r3, #24
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f7fc fe2d 	bl	800922c <disk_write>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d007      	beq.n	800c5e8 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5de:	3307      	adds	r3, #7
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	701a      	strb	r2, [r3, #0]
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e085      	b.n	800c6f4 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ee:	3306      	adds	r3, #6
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fe:	3306      	adds	r3, #6
 800c600:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c60e:	3301      	adds	r3, #1
 800c610:	7818      	ldrb	r0, [r3, #0]
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	2301      	movs	r3, #1
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	f7fc fde8 	bl	80091ec <disk_read>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d007      	beq.n	800c632 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c628:	3307      	adds	r3, #7
 800c62a:	2201      	movs	r2, #1
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	2301      	movs	r3, #1
 800c630:	e060      	b.n	800c6f4 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c638:	3318      	adds	r3, #24
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c64a:	330a      	adds	r3, #10
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c656:	3308      	adds	r3, #8
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c666:	330a      	adds	r3, #10
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	fbb2 f1f3 	udiv	r1, r2, r3
 800c66e:	fb03 f301 	mul.w	r3, r3, r1
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	1ac3      	subs	r3, r0, r3
 800c676:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800c678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d901      	bls.n	800c684 <f_read+0x3b4>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c68a:	3308      	adds	r3, #8
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c69a:	330a      	adds	r3, #10
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	fbb2 f1f3 	udiv	r1, r2, r3
 800c6a2:	fb03 f301 	mul.w	r3, r3, r1
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6a38      	ldr	r0, [r7, #32]
 800c6b2:	f7fc fdf9 	bl	80092a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c6b6:	6a3a      	ldr	r2, [r7, #32]
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	4413      	add	r3, r2
 800c6bc:	623b      	str	r3, [r7, #32]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c4:	3308      	adds	r3, #8
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ca:	441a      	add	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d2:	3308      	adds	r3, #8
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	441a      	add	r2, r3
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	601a      	str	r2, [r3, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f47f ae31 	bne.w	800c354 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3730      	adds	r7, #48	; 0x30
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08a      	sub	sp, #40	; 0x28
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff fa19 	bl	800bb4c <validate>
 800c71a:	4603      	mov	r3, r0
 800c71c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <f_write+0x2c>
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	e258      	b.n	800cbda <f_write+0x4de>
	if (fp->err)							/* Check error */
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c72e:	3307      	adds	r3, #7
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d005      	beq.n	800c742 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73c:	3307      	adds	r3, #7
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	e24b      	b.n	800cbda <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c748:	3306      	adds	r3, #6
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	f003 0302 	and.w	r3, r3, #2
 800c750:	2b00      	cmp	r3, #0
 800c752:	d101      	bne.n	800c758 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c754:	2307      	movs	r3, #7
 800c756:	e240      	b.n	800cbda <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c75e:	3308      	adds	r3, #8
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	441a      	add	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76c:	3308      	adds	r3, #8
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	f080 8208 	bcs.w	800cb86 <f_write+0x48a>
 800c776:	2300      	movs	r3, #0
 800c778:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c77a:	e204      	b.n	800cb86 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c782:	3308      	adds	r3, #8
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c792:	330a      	adds	r3, #10
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	fbb2 f1f3 	udiv	r1, r2, r3
 800c79a:	fb03 f301 	mul.w	r3, r3, r1
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f040 818d 	bne.w	800cac0 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ac:	3308      	adds	r3, #8
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7bc:	330a      	adds	r3, #10
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d2:	3302      	adds	r3, #2
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	4013      	ands	r3, r2
 800c7dc:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c7de:	7dbb      	ldrb	r3, [r7, #22]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d167      	bne.n	800c8b4 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d112      	bne.n	800c818 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f8:	3310      	adds	r3, #16
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	2b00      	cmp	r3, #0
 800c802:	d129      	bne.n	800c858 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2100      	movs	r1, #0
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fd fbde 	bl	8009fd0 <create_chain>
 800c814:	6278      	str	r0, [r7, #36]	; 0x24
 800c816:	e01f      	b.n	800c858 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c81e:	3304      	adds	r3, #4
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00a      	beq.n	800c83c <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c82c:	3308      	adds	r3, #8
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4619      	mov	r1, r3
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7fd fc7d 	bl	800a132 <clmt_clust>
 800c838:	6278      	str	r0, [r7, #36]	; 0x24
 800c83a:	e00d      	b.n	800c858 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c84a:	3314      	adds	r3, #20
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7fd fbbd 	bl	8009fd0 <create_chain>
 800c856:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 8198 	beq.w	800cb90 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	2b01      	cmp	r3, #1
 800c864:	d107      	bne.n	800c876 <f_write+0x17a>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c86c:	3307      	adds	r3, #7
 800c86e:	2202      	movs	r2, #2
 800c870:	701a      	strb	r2, [r3, #0]
 800c872:	2302      	movs	r3, #2
 800c874:	e1b1      	b.n	800cbda <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87c:	d107      	bne.n	800c88e <f_write+0x192>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c884:	3307      	adds	r3, #7
 800c886:	2201      	movs	r2, #1
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	2301      	movs	r3, #1
 800c88c:	e1a5      	b.n	800cbda <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c894:	3314      	adds	r3, #20
 800c896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c898:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8a0:	3310      	adds	r3, #16
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d105      	bne.n	800c8b4 <f_write+0x1b8>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ae:	3310      	adds	r3, #16
 800c8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b2:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ba:	3306      	adds	r3, #6
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d028      	beq.n	800c918 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	7818      	ldrb	r0, [r3, #0]
 800c8d6:	68f9      	ldr	r1, [r7, #12]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8de:	3318      	adds	r3, #24
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	f7fc fca2 	bl	800922c <disk_write>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d007      	beq.n	800c8fe <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8f4:	3307      	adds	r3, #7
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e16d      	b.n	800cbda <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c904:	3306      	adds	r3, #6
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c914:	3306      	adds	r3, #6
 800c916:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c926:	3314      	adds	r3, #20
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4619      	mov	r1, r3
 800c92c:	4610      	mov	r0, r2
 800c92e:	f7fd f85a 	bl	80099e6 <clust2sect>
 800c932:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d107      	bne.n	800c94a <f_write+0x24e>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c940:	3307      	adds	r3, #7
 800c942:	2202      	movs	r2, #2
 800c944:	701a      	strb	r2, [r3, #0]
 800c946:	2302      	movs	r3, #2
 800c948:	e147      	b.n	800cbda <f_write+0x4de>
			sect += csect;
 800c94a:	7dbb      	ldrb	r3, [r7, #22]
 800c94c:	693a      	ldr	r2, [r7, #16]
 800c94e:	4413      	add	r3, r2
 800c950:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c95e:	330a      	adds	r3, #10
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	fbb3 f3f2 	udiv	r3, r3, r2
 800c96a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d074      	beq.n	800ca5c <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c972:	7dba      	ldrb	r2, [r7, #22]
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	441a      	add	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c984:	3302      	adds	r3, #2
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d90b      	bls.n	800c9a4 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c998:	3302      	adds	r3, #2
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	7dbb      	ldrb	r3, [r7, #22]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	7818      	ldrb	r0, [r3, #0]
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	69b9      	ldr	r1, [r7, #24]
 800c9ba:	f7fc fc37 	bl	800922c <disk_write>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d007      	beq.n	800c9d4 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ca:	3307      	adds	r3, #7
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	701a      	strb	r2, [r3, #0]
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e102      	b.n	800cbda <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9da:	3318      	adds	r3, #24
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	69fa      	ldr	r2, [r7, #28]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d92b      	bls.n	800ca40 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f0:	3318      	adds	r3, #24
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	1ad2      	subs	r2, r2, r3
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca04:	330a      	adds	r3, #10
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	fb03 f302 	mul.w	r3, r3, r2
 800ca0c:	69ba      	ldr	r2, [r7, #24]
 800ca0e:	18d1      	adds	r1, r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca1c:	330a      	adds	r3, #10
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	f7fc fc41 	bl	80092a8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca2c:	3306      	adds	r3, #6
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca3c:	3306      	adds	r3, #6
 800ca3e:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca4c:	330a      	adds	r3, #10
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	461a      	mov	r2, r3
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	fb02 f303 	mul.w	r3, r2, r3
 800ca58:	623b      	str	r3, [r7, #32]
				continue;
 800ca5a:	e07a      	b.n	800cb52 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca62:	3318      	adds	r3, #24
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d023      	beq.n	800cab4 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca72:	3308      	adds	r3, #8
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca7c:	330c      	adds	r3, #12
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d217      	bcs.n	800cab4 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca90:	3301      	adds	r3, #1
 800ca92:	7818      	ldrb	r0, [r3, #0]
 800ca94:	68f9      	ldr	r1, [r7, #12]
 800ca96:	2301      	movs	r3, #1
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	f7fc fba7 	bl	80091ec <disk_read>
 800ca9e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d007      	beq.n	800cab4 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caaa:	3307      	adds	r3, #7
 800caac:	2201      	movs	r2, #1
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	2301      	movs	r3, #1
 800cab2:	e092      	b.n	800cbda <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caba:	3318      	adds	r3, #24
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cacc:	330a      	adds	r3, #10
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	4618      	mov	r0, r3
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cad8:	3308      	adds	r3, #8
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cae8:	330a      	adds	r3, #10
 800caea:	881b      	ldrh	r3, [r3, #0]
 800caec:	fbb2 f1f3 	udiv	r1, r2, r3
 800caf0:	fb03 f301 	mul.w	r3, r3, r1
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	1ac3      	subs	r3, r0, r3
 800caf8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800cafa:	6a3a      	ldr	r2, [r7, #32]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d901      	bls.n	800cb06 <f_write+0x40a>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb1c:	330a      	adds	r3, #10
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb24:	fb03 f301 	mul.w	r3, r3, r1
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	6a3a      	ldr	r2, [r7, #32]
 800cb30:	69b9      	ldr	r1, [r7, #24]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fc fbb8 	bl	80092a8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb3e:	3306      	adds	r3, #6
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb4e:	3306      	adds	r3, #6
 800cb50:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	4413      	add	r3, r2
 800cb58:	61bb      	str	r3, [r7, #24]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb60:	3308      	adds	r3, #8
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	441a      	add	r2, r3
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb6e:	3308      	adds	r3, #8
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	441a      	add	r2, r3
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	601a      	str	r2, [r3, #0]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	6a3b      	ldr	r3, [r7, #32]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f47f adf7 	bne.w	800c77c <f_write+0x80>
 800cb8e:	e000      	b.n	800cb92 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb90:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb98:	3308      	adds	r3, #8
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba2:	330c      	adds	r3, #12
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d909      	bls.n	800cbbe <f_write+0x4c2>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbba:	330c      	adds	r3, #12
 800cbbc:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbc4:	3306      	adds	r3, #6
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	f043 0320 	orr.w	r3, r3, #32
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd4:	3306      	adds	r3, #6
 800cbd6:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3728      	adds	r7, #40	; 0x28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b086      	sub	sp, #24
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7fe ffae 	bl	800bb4c <validate>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cbf4:	7dfb      	ldrb	r3, [r7, #23]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f040 80cc 	bne.w	800cd94 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc02:	3306      	adds	r3, #6
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	f003 0320 	and.w	r3, r3, #32
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 80c2 	beq.w	800cd94 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc16:	3306      	adds	r3, #6
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d022      	beq.n	800cc68 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc2e:	3301      	adds	r3, #1
 800cc30:	7818      	ldrb	r0, [r3, #0]
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc3a:	3318      	adds	r3, #24
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	2301      	movs	r3, #1
 800cc40:	f7fc faf4 	bl	800922c <disk_write>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e0a3      	b.n	800cd96 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc54:	3306      	adds	r3, #6
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc64:	3306      	adds	r3, #6
 800cc66:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc76:	331c      	adds	r3, #28
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	f7fc fdaf 	bl	80097e0 <move_window>
 800cc82:	4603      	mov	r3, r0
 800cc84:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f040 8083 	bne.w	800cd94 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	330b      	adds	r3, #11
 800cc9c:	781a      	ldrb	r2, [r3, #0]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	330b      	adds	r3, #11
 800cca2:	f042 0220 	orr.w	r2, r2, #32
 800cca6:	b2d2      	uxtb	r2, r2
 800cca8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccb0:	330c      	adds	r3, #12
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	331c      	adds	r3, #28
 800ccb8:	b2d2      	uxtb	r2, r2
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccc2:	330c      	adds	r3, #12
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	0a1b      	lsrs	r3, r3, #8
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	331d      	adds	r3, #29
 800ccd0:	b2d2      	uxtb	r2, r2
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccda:	330c      	adds	r3, #12
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	0c1a      	lsrs	r2, r3, #16
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	331e      	adds	r3, #30
 800cce4:	b2d2      	uxtb	r2, r2
 800cce6:	701a      	strb	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccee:	330c      	adds	r3, #12
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	0e1a      	lsrs	r2, r3, #24
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	331f      	adds	r3, #31
 800ccf8:	b2d2      	uxtb	r2, r2
 800ccfa:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd02:	3310      	adds	r3, #16
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4619      	mov	r1, r3
 800cd08:	6938      	ldr	r0, [r7, #16]
 800cd0a:	f7fd fd13 	bl	800a734 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800cd0e:	f7fc f9cb 	bl	80090a8 <get_fattime>
 800cd12:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	3316      	adds	r3, #22
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	0a1b      	lsrs	r3, r3, #8
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	3317      	adds	r3, #23
 800cd2a:	b2d2      	uxtb	r2, r2
 800cd2c:	701a      	strb	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	0c1a      	lsrs	r2, r3, #16
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	3318      	adds	r3, #24
 800cd36:	b2d2      	uxtb	r2, r2
 800cd38:	701a      	strb	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	0e1a      	lsrs	r2, r3, #24
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	3319      	adds	r3, #25
 800cd42:	b2d2      	uxtb	r2, r2
 800cd44:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	3312      	adds	r3, #18
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	701a      	strb	r2, [r3, #0]
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	3313      	adds	r3, #19
 800cd52:	2200      	movs	r2, #0
 800cd54:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd5c:	3306      	adds	r3, #6
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	f023 0320 	bic.w	r3, r3, #32
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd6c:	3306      	adds	r3, #6
 800cd6e:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	2201      	movs	r2, #1
 800cd80:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fc fd5c 	bl	8009848 <sync_fs>
 800cd90:	4603      	mov	r3, r0
 800cd92:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b084      	sub	sp, #16
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7ff ff1b 	bl	800cbe2 <f_sync>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d119      	bne.n	800cdea <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7fe fec8 	bl	800bb4c <validate>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cdc0:	7bfb      	ldrb	r3, [r7, #15]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d111      	bne.n	800cdea <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cdcc:	3308      	adds	r3, #8
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fc fc3d 	bl	8009650 <dec_lock>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d104      	bne.n	800cdea <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cde6:	2200      	movs	r2, #0
 800cde8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b090      	sub	sp, #64	; 0x40
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7fe fea4 	bl	800bb4c <validate>
 800ce04:	4603      	mov	r3, r0
 800ce06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ce0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d002      	beq.n	800ce18 <f_lseek+0x24>
 800ce12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce16:	e31d      	b.n	800d454 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce1e:	3307      	adds	r3, #7
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce2c:	3307      	adds	r3, #7
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	e310      	b.n	800d454 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ce38:	3304      	adds	r3, #4
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 813c 	beq.w	800d0ba <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce48:	d172      	bne.n	800cf30 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ce50:	3304      	adds	r3, #4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	1d1a      	adds	r2, r3, #4
 800ce5a:	627a      	str	r2, [r7, #36]	; 0x24
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	617b      	str	r3, [r7, #20]
 800ce60:	2302      	movs	r3, #2
 800ce62:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6a:	3310      	adds	r3, #16
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d049      	beq.n	800cf0a <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	613b      	str	r3, [r7, #16]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	3302      	adds	r3, #2
 800ce82:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fc fdcc 	bl	8009a36 <get_fat>
 800ce9e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800cea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d807      	bhi.n	800ceb6 <f_lseek+0xc2>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceac:	3307      	adds	r3, #7
 800ceae:	2202      	movs	r2, #2
 800ceb0:	701a      	strb	r2, [r3, #0]
 800ceb2:	2302      	movs	r3, #2
 800ceb4:	e2ce      	b.n	800d454 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cebc:	d107      	bne.n	800cece <f_lseek+0xda>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec4:	3307      	adds	r3, #7
 800cec6:	2201      	movs	r2, #1
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	2301      	movs	r3, #1
 800cecc:	e2c2      	b.n	800d454 <f_lseek+0x660>
					} while (cl == pcl + 1);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	3301      	adds	r3, #1
 800ced2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d0d5      	beq.n	800ce84 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ced8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d809      	bhi.n	800cef4 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	1d1a      	adds	r2, r3, #4
 800cee4:	627a      	str	r2, [r7, #36]	; 0x24
 800cee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee8:	601a      	str	r2, [r3, #0]
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	1d1a      	adds	r2, r3, #4
 800ceee:	627a      	str	r2, [r7, #36]	; 0x24
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf00:	3314      	adds	r3, #20
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d3b5      	bcc.n	800ce76 <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cf10:	3304      	adds	r3, #4
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf16:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800cf18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d803      	bhi.n	800cf28 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	2200      	movs	r2, #0
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	e293      	b.n	800d450 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cf28:	2311      	movs	r3, #17
 800cf2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cf2e:	e28f      	b.n	800d450 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf36:	330c      	adds	r3, #12
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d905      	bls.n	800cf4c <f_lseek+0x158>
				ofs = fp->fsize;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf46:	330c      	adds	r3, #12
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf52:	3308      	adds	r3, #8
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	601a      	str	r2, [r3, #0]
			if (ofs) {
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 8278 	beq.w	800d450 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7fd f8e3 	bl	800a132 <clmt_clust>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf74:	3314      	adds	r3, #20
 800cf76:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf86:	3314      	adds	r3, #20
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	f7fc fd2a 	bl	80099e6 <clust2sect>
 800cf92:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d107      	bne.n	800cfaa <f_lseek+0x1b6>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfa0:	3307      	adds	r3, #7
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	701a      	strb	r2, [r3, #0]
 800cfa6:	2302      	movs	r3, #2
 800cfa8:	e254      	b.n	800d454 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	1e5a      	subs	r2, r3, #1
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfba:	330a      	adds	r3, #10
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfce:	3302      	adds	r3, #2
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	69ba      	ldr	r2, [r7, #24]
 800cfd8:	4413      	add	r3, r2
 800cfda:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff2:	330a      	adds	r3, #10
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	fbb2 f1f3 	udiv	r1, r2, r3
 800cffa:	fb03 f301 	mul.w	r3, r3, r1
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 8225 	beq.w	800d450 <f_lseek+0x65c>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d00c:	3318      	adds	r3, #24
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	69ba      	ldr	r2, [r7, #24]
 800d012:	429a      	cmp	r2, r3
 800d014:	f000 821c 	beq.w	800d450 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d01e:	3306      	adds	r3, #6
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d026:	2b00      	cmp	r3, #0
 800d028:	d028      	beq.n	800d07c <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d036:	3301      	adds	r3, #1
 800d038:	7818      	ldrb	r0, [r3, #0]
 800d03a:	6879      	ldr	r1, [r7, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d042:	3318      	adds	r3, #24
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	2301      	movs	r3, #1
 800d048:	f7fc f8f0 	bl	800922c <disk_write>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d058:	3307      	adds	r3, #7
 800d05a:	2201      	movs	r2, #1
 800d05c:	701a      	strb	r2, [r3, #0]
 800d05e:	2301      	movs	r3, #1
 800d060:	e1f8      	b.n	800d454 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d068:	3306      	adds	r3, #6
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d070:	b2da      	uxtb	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d078:	3306      	adds	r3, #6
 800d07a:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d088:	3301      	adds	r3, #1
 800d08a:	7818      	ldrb	r0, [r3, #0]
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	2301      	movs	r3, #1
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	f7fc f8ab 	bl	80091ec <disk_read>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d007      	beq.n	800d0ac <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a2:	3307      	adds	r3, #7
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	701a      	strb	r2, [r3, #0]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e1d3      	b.n	800d454 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0b2:	3318      	adds	r3, #24
 800d0b4:	69ba      	ldr	r2, [r7, #24]
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	e1ca      	b.n	800d450 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0c0:	330c      	adds	r3, #12
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	683a      	ldr	r2, [r7, #0]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d90e      	bls.n	800d0e8 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0d0:	3306      	adds	r3, #6
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	f003 0302 	and.w	r3, r3, #2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d105      	bne.n	800d0e8 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e2:	330c      	adds	r3, #12
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0fe:	3308      	adds	r3, #8
 800d100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d102:	601a      	str	r2, [r3, #0]
		if (ofs) {
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 8113 	beq.w	800d332 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d118:	3302      	adds	r3, #2
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	461a      	mov	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d12a:	330a      	adds	r3, #10
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	fb03 f302 	mul.w	r3, r3, r2
 800d132:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d024      	beq.n	800d184 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	1e5a      	subs	r2, r3, #1
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	fbb2 f2f3 	udiv	r2, r2, r3
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	1e59      	subs	r1, r3, #1
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d14e:	429a      	cmp	r2, r3
 800d150:	d318      	bcc.n	800d184 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	1e5a      	subs	r2, r3, #1
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	425b      	negs	r3, r3
 800d15a:	401a      	ands	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d162:	3308      	adds	r3, #8
 800d164:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d16c:	3308      	adds	r3, #8
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	683a      	ldr	r2, [r7, #0]
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d17c:	3314      	adds	r3, #20
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	63bb      	str	r3, [r7, #56]	; 0x38
 800d182:	e034      	b.n	800d1ee <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d18a:	3310      	adds	r3, #16
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	2b00      	cmp	r3, #0
 800d194:	d125      	bne.n	800d1e2 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2100      	movs	r1, #0
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fc ff15 	bl	8009fd0 <create_chain>
 800d1a6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d107      	bne.n	800d1be <f_lseek+0x3ca>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b4:	3307      	adds	r3, #7
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	701a      	strb	r2, [r3, #0]
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	e14a      	b.n	800d454 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c4:	d107      	bne.n	800d1d6 <f_lseek+0x3e2>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1cc:	3307      	adds	r3, #7
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e13e      	b.n	800d454 <f_lseek+0x660>
					fp->sclust = clst;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1dc:	3310      	adds	r3, #16
 800d1de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1e0:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1e8:	3314      	adds	r3, #20
 800d1ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1ec:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 809e 	beq.w	800d332 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800d1f6:	e058      	b.n	800d2aa <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fe:	3306      	adds	r3, #6
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 0302 	and.w	r3, r3, #2
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00e      	beq.n	800d228 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d214:	4618      	mov	r0, r3
 800d216:	f7fc fedb 	bl	8009fd0 <create_chain>
 800d21a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10b      	bne.n	800d23a <f_lseek+0x446>
							ofs = bcs; break;
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	603b      	str	r3, [r7, #0]
 800d226:	e044      	b.n	800d2b2 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d232:	4618      	mov	r0, r3
 800d234:	f7fc fbff 	bl	8009a36 <get_fat>
 800d238:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d240:	d107      	bne.n	800d252 <f_lseek+0x45e>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d248:	3307      	adds	r3, #7
 800d24a:	2201      	movs	r2, #1
 800d24c:	701a      	strb	r2, [r3, #0]
 800d24e:	2301      	movs	r3, #1
 800d250:	e100      	b.n	800d454 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800d252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d254:	2b01      	cmp	r3, #1
 800d256:	d90a      	bls.n	800d26e <f_lseek+0x47a>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d264:	3314      	adds	r3, #20
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d307      	bcc.n	800d27e <f_lseek+0x48a>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d274:	3307      	adds	r3, #7
 800d276:	2202      	movs	r2, #2
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	2302      	movs	r3, #2
 800d27c:	e0ea      	b.n	800d454 <f_lseek+0x660>
					fp->clust = clst;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d284:	3314      	adds	r3, #20
 800d286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d288:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d290:	3308      	adds	r3, #8
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	441a      	add	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d29e:	3308      	adds	r3, #8
 800d2a0:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d8a2      	bhi.n	800d1f8 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	441a      	add	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2c6:	3308      	adds	r3, #8
 800d2c8:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d6:	330a      	adds	r3, #10
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2e2:	fb02 f201 	mul.w	r2, r2, r1
 800d2e6:	1a9b      	subs	r3, r3, r2
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d022      	beq.n	800d332 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fc fb75 	bl	80099e6 <clust2sect>
 800d2fc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800d2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d300:	2b00      	cmp	r3, #0
 800d302:	d107      	bne.n	800d314 <f_lseek+0x520>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d30a:	3307      	adds	r3, #7
 800d30c:	2202      	movs	r2, #2
 800d30e:	701a      	strb	r2, [r3, #0]
 800d310:	2302      	movs	r3, #2
 800d312:	e09f      	b.n	800d454 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d320:	330a      	adds	r3, #10
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	461a      	mov	r2, r3
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	fbb3 f3f2 	udiv	r3, r3, r2
 800d32c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d32e:	4413      	add	r3, r2
 800d330:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d338:	3308      	adds	r3, #8
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d348:	330a      	adds	r3, #10
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d350:	fb03 f301 	mul.w	r3, r3, r1
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d057      	beq.n	800d40a <f_lseek+0x616>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d360:	3318      	adds	r3, #24
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d366:	429a      	cmp	r2, r3
 800d368:	d04f      	beq.n	800d40a <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d370:	3306      	adds	r3, #6
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d028      	beq.n	800d3ce <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d388:	3301      	adds	r3, #1
 800d38a:	7818      	ldrb	r0, [r3, #0]
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d394:	3318      	adds	r3, #24
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	2301      	movs	r3, #1
 800d39a:	f7fb ff47 	bl	800922c <disk_write>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3aa:	3307      	adds	r3, #7
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	701a      	strb	r2, [r3, #0]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e04f      	b.n	800d454 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ba:	3306      	adds	r3, #6
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ca:	3306      	adds	r3, #6
 800d3cc:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3da:	3301      	adds	r3, #1
 800d3dc:	7818      	ldrb	r0, [r3, #0]
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3e4:	f7fb ff02 	bl	80091ec <disk_read>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d007      	beq.n	800d3fe <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f4:	3307      	adds	r3, #7
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e02a      	b.n	800d454 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d404:	3318      	adds	r3, #24
 800d406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d408:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d410:	3308      	adds	r3, #8
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41a:	330c      	adds	r3, #12
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d916      	bls.n	800d450 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d428:	3308      	adds	r3, #8
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d432:	330c      	adds	r3, #12
 800d434:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43c:	3306      	adds	r3, #6
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	f043 0320 	orr.w	r3, r3, #32
 800d444:	b2da      	uxtb	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d44c:	3306      	adds	r3, #6
 800d44e:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800d450:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d454:	4618      	mov	r0, r3
 800d456:	3740      	adds	r7, #64	; 0x40
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08e      	sub	sp, #56	; 0x38
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800d468:	f107 030c 	add.w	r3, r7, #12
 800d46c:	2200      	movs	r2, #0
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7fe f80f 	bl	800b494 <find_volume>
 800d476:	4603      	mov	r3, r0
 800d478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800d482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d486:	2b00      	cmp	r3, #0
 800d488:	f040 80c4 	bne.w	800d614 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	3310      	adds	r3, #16
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49c:	3314      	adds	r3, #20
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3b02      	subs	r3, #2
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d807      	bhi.n	800d4b6 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ac:	3310      	adds	r3, #16
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	e0ae      	b.n	800d614 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800d4c4:	7efb      	ldrb	r3, [r7, #27]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d127      	bne.n	800d51a <f_getfree+0xbe>
				clst = 2;
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800d4ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4d0:	69f8      	ldr	r0, [r7, #28]
 800d4d2:	f7fc fab0 	bl	8009a36 <get_fat>
 800d4d6:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4de:	d103      	bne.n	800d4e8 <f_getfree+0x8c>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d4e6:	e07f      	b.n	800d5e8 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d103      	bne.n	800d4f6 <f_getfree+0x9a>
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d4f4:	e078      	b.n	800d5e8 <f_getfree+0x18c>
					if (stat == 0) n++;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d102      	bne.n	800d502 <f_getfree+0xa6>
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	3301      	adds	r3, #1
 800d500:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800d502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d504:	3301      	adds	r3, #1
 800d506:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d50e:	3314      	adds	r3, #20
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d514:	429a      	cmp	r2, r3
 800d516:	d3da      	bcc.n	800d4ce <f_getfree+0x72>
 800d518:	e066      	b.n	800d5e8 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d520:	3314      	adds	r3, #20
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	627b      	str	r3, [r7, #36]	; 0x24
 800d534:	2300      	movs	r3, #0
 800d536:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d115      	bne.n	800d56a <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800d53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	62ba      	str	r2, [r7, #40]	; 0x28
 800d544:	4619      	mov	r1, r3
 800d546:	69f8      	ldr	r0, [r7, #28]
 800d548:	f7fc f94a 	bl	80097e0 <move_window>
 800d54c:	4603      	mov	r3, r0
 800d54e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800d552:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d556:	2b00      	cmp	r3, #0
 800d558:	d145      	bne.n	800d5e6 <f_getfree+0x18a>
						p = fs->win.d8;
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d564:	330a      	adds	r3, #10
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800d56a:	7efb      	ldrb	r3, [r7, #27]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d115      	bne.n	800d59c <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	3301      	adds	r3, #1
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	021b      	lsls	r3, r3, #8
 800d578:	b21a      	sxth	r2, r3
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	b21b      	sxth	r3, r3
 800d580:	4313      	orrs	r3, r2
 800d582:	b21b      	sxth	r3, r3
 800d584:	2b00      	cmp	r3, #0
 800d586:	d102      	bne.n	800d58e <f_getfree+0x132>
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	3301      	adds	r3, #1
 800d58c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800d58e:	6a3b      	ldr	r3, [r7, #32]
 800d590:	3302      	adds	r3, #2
 800d592:	623b      	str	r3, [r7, #32]
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	3b02      	subs	r3, #2
 800d598:	627b      	str	r3, [r7, #36]	; 0x24
 800d59a:	e01d      	b.n	800d5d8 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	3303      	adds	r3, #3
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	061a      	lsls	r2, r3, #24
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	3302      	adds	r3, #2
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	041b      	lsls	r3, r3, #16
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	6a3a      	ldr	r2, [r7, #32]
 800d5b0:	3201      	adds	r2, #1
 800d5b2:	7812      	ldrb	r2, [r2, #0]
 800d5b4:	0212      	lsls	r2, r2, #8
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	6a3a      	ldr	r2, [r7, #32]
 800d5ba:	7812      	ldrb	r2, [r2, #0]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d102      	bne.n	800d5cc <f_getfree+0x170>
 800d5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	623b      	str	r3, [r7, #32]
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	3b04      	subs	r3, #4
 800d5d6:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1a9      	bne.n	800d538 <f_getfree+0xdc>
 800d5e4:	e000      	b.n	800d5e8 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800d5e6:	bf00      	nop
			}
			fs->free_clust = n;
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ee:	3310      	adds	r3, #16
 800d5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5f2:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fa:	3305      	adds	r3, #5
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	f043 0301 	orr.w	r3, r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d60a:	3305      	adds	r3, #5
 800d60c:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d612:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800d614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3738      	adds	r7, #56	; 0x38
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d634:	e01b      	b.n	800d66e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d636:	f107 0310 	add.w	r3, r7, #16
 800d63a:	f107 0114 	add.w	r1, r7, #20
 800d63e:	2201      	movs	r2, #1
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7fe fe45 	bl	800c2d0 <f_read>
		if (rc != 1) break;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d116      	bne.n	800d67a <f_gets+0x5a>
		c = s[0];
 800d64c:	7d3b      	ldrb	r3, [r7, #20]
 800d64e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d650:	7dfb      	ldrb	r3, [r7, #23]
 800d652:	2b0d      	cmp	r3, #13
 800d654:	d100      	bne.n	800d658 <f_gets+0x38>
 800d656:	e00a      	b.n	800d66e <f_gets+0x4e>
		*p++ = c;
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	61ba      	str	r2, [r7, #24]
 800d65e:	7dfa      	ldrb	r2, [r7, #23]
 800d660:	701a      	strb	r2, [r3, #0]
		n++;
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	3301      	adds	r3, #1
 800d666:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d668:	7dfb      	ldrb	r3, [r7, #23]
 800d66a:	2b0a      	cmp	r3, #10
 800d66c:	d007      	beq.n	800d67e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	3b01      	subs	r3, #1
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	429a      	cmp	r2, r3
 800d676:	dbde      	blt.n	800d636 <f_gets+0x16>
 800d678:	e002      	b.n	800d680 <f_gets+0x60>
		if (rc != 1) break;
 800d67a:	bf00      	nop
 800d67c:	e000      	b.n	800d680 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800d67e:	bf00      	nop
	}
	*p = 0;
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	2200      	movs	r2, #0
 800d684:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <f_gets+0x70>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	e000      	b.n	800d692 <f_gets+0x72>
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3720      	adds	r7, #32
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b084      	sub	sp, #16
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800d6a6:	78fb      	ldrb	r3, [r7, #3]
 800d6a8:	2b0a      	cmp	r3, #10
 800d6aa:	d103      	bne.n	800d6b4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d6ac:	210d      	movs	r1, #13
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fff3 	bl	800d69a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	db25      	blt.n	800d70c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	60fa      	str	r2, [r7, #12]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	78fa      	ldrb	r2, [r7, #3]
 800d6cc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2b3c      	cmp	r3, #60	; 0x3c
 800d6d2:	dd12      	ble.n	800d6fa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f103 010c 	add.w	r1, r3, #12
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	f107 0308 	add.w	r3, r7, #8
 800d6e4:	f7ff f80a 	bl	800c6fc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d101      	bne.n	800d6f4 <putc_bfd+0x5a>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e001      	b.n	800d6f8 <putc_bfd+0x5e>
 800d6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	68fa      	ldr	r2, [r7, #12]
 800d6fe:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	1c5a      	adds	r2, r3, #1
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	609a      	str	r2, [r3, #8]
 800d70a:	e000      	b.n	800d70e <putc_bfd+0x74>
	if (i < 0) return;
 800d70c:	bf00      	nop
}
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d714:	b590      	push	{r4, r7, lr}
 800d716:	b097      	sub	sp, #92	; 0x5c
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	613b      	str	r3, [r7, #16]
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800d72a:	e009      	b.n	800d740 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	1c5a      	adds	r2, r3, #1
 800d730:	607a      	str	r2, [r7, #4]
 800d732:	781a      	ldrb	r2, [r3, #0]
 800d734:	f107 030c 	add.w	r3, r7, #12
 800d738:	4611      	mov	r1, r2
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff ffad 	bl	800d69a <putc_bfd>
	while (*str)			/* Put the string */
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1f1      	bne.n	800d72c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	db15      	blt.n	800d77a <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	461c      	mov	r4, r3
 800d754:	f107 0208 	add.w	r2, r7, #8
 800d758:	f107 030c 	add.w	r3, r7, #12
 800d75c:	f103 010c 	add.w	r1, r3, #12
 800d760:	4613      	mov	r3, r2
 800d762:	4622      	mov	r2, r4
 800d764:	f7fe ffca 	bl	800c6fc <f_write>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d105      	bne.n	800d77a <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	68ba      	ldr	r2, [r7, #8]
 800d772:	4293      	cmp	r3, r2
 800d774:	d101      	bne.n	800d77a <f_puts+0x66>
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	e001      	b.n	800d77e <f_puts+0x6a>
	return EOF;
 800d77a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d77e:	4618      	mov	r0, r3
 800d780:	375c      	adds	r7, #92	; 0x5c
 800d782:	46bd      	mov	sp, r7
 800d784:	bd90      	pop	{r4, r7, pc}
	...

0800d788 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d788:	b480      	push	{r7}
 800d78a:	b087      	sub	sp, #28
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	4613      	mov	r3, r2
 800d794:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d796:	2301      	movs	r3, #1
 800d798:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800d79e:	4b1f      	ldr	r3, [pc, #124]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7a0:	7a5b      	ldrb	r3, [r3, #9]
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d831      	bhi.n	800d80c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7a8:	4b1c      	ldr	r3, [pc, #112]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7aa:	7a5b      	ldrb	r3, [r3, #9]
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	4b1a      	ldr	r3, [pc, #104]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800d7b6:	4b19      	ldr	r3, [pc, #100]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7b8:	7a5b      	ldrb	r3, [r3, #9]
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	4a17      	ldr	r2, [pc, #92]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800d7c6:	4b15      	ldr	r3, [pc, #84]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7c8:	7a5b      	ldrb	r3, [r3, #9]
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	4b13      	ldr	r3, [pc, #76]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7d0:	4413      	add	r3, r2
 800d7d2:	79fa      	ldrb	r2, [r7, #7]
 800d7d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d7d6:	4b11      	ldr	r3, [pc, #68]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7d8:	7a5b      	ldrb	r3, [r3, #9]
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	b2d1      	uxtb	r1, r2
 800d7e0:	4a0e      	ldr	r2, [pc, #56]	; (800d81c <FATFS_LinkDriverEx+0x94>)
 800d7e2:	7251      	strb	r1, [r2, #9]
 800d7e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7e6:	7dbb      	ldrb	r3, [r7, #22]
 800d7e8:	3330      	adds	r3, #48	; 0x30
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	223a      	movs	r2, #58	; 0x3a
 800d7f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	3302      	adds	r3, #2
 800d7fc:	222f      	movs	r2, #47	; 0x2f
 800d7fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	3303      	adds	r3, #3
 800d804:	2200      	movs	r2, #0
 800d806:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800d80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	371c      	adds	r7, #28
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	20000448 	.word	0x20000448

0800d820 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d82a:	2200      	movs	r2, #0
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff ffaa 	bl	800d788 <FATFS_LinkDriverEx>
 800d834:	4603      	mov	r3, r0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	6039      	str	r1, [r7, #0]
 800d84a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d84c:	88fb      	ldrh	r3, [r7, #6]
 800d84e:	2b7f      	cmp	r3, #127	; 0x7f
 800d850:	d802      	bhi.n	800d858 <ff_convert+0x18>
		c = chr;
 800d852:	88fb      	ldrh	r3, [r7, #6]
 800d854:	81fb      	strh	r3, [r7, #14]
 800d856:	e025      	b.n	800d8a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00b      	beq.n	800d876 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d85e:	88fb      	ldrh	r3, [r7, #6]
 800d860:	2bff      	cmp	r3, #255	; 0xff
 800d862:	d805      	bhi.n	800d870 <ff_convert+0x30>
 800d864:	88fb      	ldrh	r3, [r7, #6]
 800d866:	3b80      	subs	r3, #128	; 0x80
 800d868:	4a12      	ldr	r2, [pc, #72]	; (800d8b4 <ff_convert+0x74>)
 800d86a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d86e:	e000      	b.n	800d872 <ff_convert+0x32>
 800d870:	2300      	movs	r3, #0
 800d872:	81fb      	strh	r3, [r7, #14]
 800d874:	e016      	b.n	800d8a4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800d876:	2300      	movs	r3, #0
 800d878:	81fb      	strh	r3, [r7, #14]
 800d87a:	e009      	b.n	800d890 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d87c:	89fb      	ldrh	r3, [r7, #14]
 800d87e:	4a0d      	ldr	r2, [pc, #52]	; (800d8b4 <ff_convert+0x74>)
 800d880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d884:	88fa      	ldrh	r2, [r7, #6]
 800d886:	429a      	cmp	r2, r3
 800d888:	d006      	beq.n	800d898 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d88a:	89fb      	ldrh	r3, [r7, #14]
 800d88c:	3301      	adds	r3, #1
 800d88e:	81fb      	strh	r3, [r7, #14]
 800d890:	89fb      	ldrh	r3, [r7, #14]
 800d892:	2b7f      	cmp	r3, #127	; 0x7f
 800d894:	d9f2      	bls.n	800d87c <ff_convert+0x3c>
 800d896:	e000      	b.n	800d89a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d898:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d89a:	89fb      	ldrh	r3, [r7, #14]
 800d89c:	3380      	adds	r3, #128	; 0x80
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d8a4:	89fb      	ldrh	r3, [r7, #14]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	080111b0 	.word	0x080111b0

0800d8b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60fb      	str	r3, [r7, #12]
 800d8c6:	e002      	b.n	800d8ce <ff_wtoupper+0x16>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	60fb      	str	r3, [r7, #12]
 800d8ce:	4a0f      	ldr	r2, [pc, #60]	; (800d90c <ff_wtoupper+0x54>)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d006      	beq.n	800d8e8 <ff_wtoupper+0x30>
 800d8da:	4a0c      	ldr	r2, [pc, #48]	; (800d90c <ff_wtoupper+0x54>)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8e2:	88fa      	ldrh	r2, [r7, #6]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d1ef      	bne.n	800d8c8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800d8e8:	4a08      	ldr	r2, [pc, #32]	; (800d90c <ff_wtoupper+0x54>)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d004      	beq.n	800d8fe <ff_wtoupper+0x46>
 800d8f4:	4a06      	ldr	r2, [pc, #24]	; (800d910 <ff_wtoupper+0x58>)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8fc:	e000      	b.n	800d900 <ff_wtoupper+0x48>
 800d8fe:	88fb      	ldrh	r3, [r7, #6]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	080112b0 	.word	0x080112b0
 800d910:	08011490 	.word	0x08011490

0800d914 <__errno>:
 800d914:	4b01      	ldr	r3, [pc, #4]	; (800d91c <__errno+0x8>)
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	20000024 	.word	0x20000024

0800d920 <__libc_init_array>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	4d0d      	ldr	r5, [pc, #52]	; (800d958 <__libc_init_array+0x38>)
 800d924:	4c0d      	ldr	r4, [pc, #52]	; (800d95c <__libc_init_array+0x3c>)
 800d926:	1b64      	subs	r4, r4, r5
 800d928:	10a4      	asrs	r4, r4, #2
 800d92a:	2600      	movs	r6, #0
 800d92c:	42a6      	cmp	r6, r4
 800d92e:	d109      	bne.n	800d944 <__libc_init_array+0x24>
 800d930:	4d0b      	ldr	r5, [pc, #44]	; (800d960 <__libc_init_array+0x40>)
 800d932:	4c0c      	ldr	r4, [pc, #48]	; (800d964 <__libc_init_array+0x44>)
 800d934:	f002 febc 	bl	80106b0 <_init>
 800d938:	1b64      	subs	r4, r4, r5
 800d93a:	10a4      	asrs	r4, r4, #2
 800d93c:	2600      	movs	r6, #0
 800d93e:	42a6      	cmp	r6, r4
 800d940:	d105      	bne.n	800d94e <__libc_init_array+0x2e>
 800d942:	bd70      	pop	{r4, r5, r6, pc}
 800d944:	f855 3b04 	ldr.w	r3, [r5], #4
 800d948:	4798      	blx	r3
 800d94a:	3601      	adds	r6, #1
 800d94c:	e7ee      	b.n	800d92c <__libc_init_array+0xc>
 800d94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d952:	4798      	blx	r3
 800d954:	3601      	adds	r6, #1
 800d956:	e7f2      	b.n	800d93e <__libc_init_array+0x1e>
 800d958:	08011a54 	.word	0x08011a54
 800d95c:	08011a54 	.word	0x08011a54
 800d960:	08011a54 	.word	0x08011a54
 800d964:	08011a58 	.word	0x08011a58

0800d968 <malloc>:
 800d968:	4b02      	ldr	r3, [pc, #8]	; (800d974 <malloc+0xc>)
 800d96a:	4601      	mov	r1, r0
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	f000 b871 	b.w	800da54 <_malloc_r>
 800d972:	bf00      	nop
 800d974:	20000024 	.word	0x20000024

0800d978 <free>:
 800d978:	4b02      	ldr	r3, [pc, #8]	; (800d984 <free+0xc>)
 800d97a:	4601      	mov	r1, r0
 800d97c:	6818      	ldr	r0, [r3, #0]
 800d97e:	f000 b819 	b.w	800d9b4 <_free_r>
 800d982:	bf00      	nop
 800d984:	20000024 	.word	0x20000024

0800d988 <memcpy>:
 800d988:	440a      	add	r2, r1
 800d98a:	4291      	cmp	r1, r2
 800d98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d990:	d100      	bne.n	800d994 <memcpy+0xc>
 800d992:	4770      	bx	lr
 800d994:	b510      	push	{r4, lr}
 800d996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d99e:	4291      	cmp	r1, r2
 800d9a0:	d1f9      	bne.n	800d996 <memcpy+0xe>
 800d9a2:	bd10      	pop	{r4, pc}

0800d9a4 <memset>:
 800d9a4:	4402      	add	r2, r0
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d100      	bne.n	800d9ae <memset+0xa>
 800d9ac:	4770      	bx	lr
 800d9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d9b2:	e7f9      	b.n	800d9a8 <memset+0x4>

0800d9b4 <_free_r>:
 800d9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	d048      	beq.n	800da4c <_free_r+0x98>
 800d9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9be:	9001      	str	r0, [sp, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f1a1 0404 	sub.w	r4, r1, #4
 800d9c6:	bfb8      	it	lt
 800d9c8:	18e4      	addlt	r4, r4, r3
 800d9ca:	f001 fbb5 	bl	800f138 <__malloc_lock>
 800d9ce:	4a20      	ldr	r2, [pc, #128]	; (800da50 <_free_r+0x9c>)
 800d9d0:	9801      	ldr	r0, [sp, #4]
 800d9d2:	6813      	ldr	r3, [r2, #0]
 800d9d4:	4615      	mov	r5, r2
 800d9d6:	b933      	cbnz	r3, 800d9e6 <_free_r+0x32>
 800d9d8:	6063      	str	r3, [r4, #4]
 800d9da:	6014      	str	r4, [r2, #0]
 800d9dc:	b003      	add	sp, #12
 800d9de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9e2:	f001 bbaf 	b.w	800f144 <__malloc_unlock>
 800d9e6:	42a3      	cmp	r3, r4
 800d9e8:	d90b      	bls.n	800da02 <_free_r+0x4e>
 800d9ea:	6821      	ldr	r1, [r4, #0]
 800d9ec:	1862      	adds	r2, r4, r1
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	bf04      	itt	eq
 800d9f2:	681a      	ldreq	r2, [r3, #0]
 800d9f4:	685b      	ldreq	r3, [r3, #4]
 800d9f6:	6063      	str	r3, [r4, #4]
 800d9f8:	bf04      	itt	eq
 800d9fa:	1852      	addeq	r2, r2, r1
 800d9fc:	6022      	streq	r2, [r4, #0]
 800d9fe:	602c      	str	r4, [r5, #0]
 800da00:	e7ec      	b.n	800d9dc <_free_r+0x28>
 800da02:	461a      	mov	r2, r3
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	b10b      	cbz	r3, 800da0c <_free_r+0x58>
 800da08:	42a3      	cmp	r3, r4
 800da0a:	d9fa      	bls.n	800da02 <_free_r+0x4e>
 800da0c:	6811      	ldr	r1, [r2, #0]
 800da0e:	1855      	adds	r5, r2, r1
 800da10:	42a5      	cmp	r5, r4
 800da12:	d10b      	bne.n	800da2c <_free_r+0x78>
 800da14:	6824      	ldr	r4, [r4, #0]
 800da16:	4421      	add	r1, r4
 800da18:	1854      	adds	r4, r2, r1
 800da1a:	42a3      	cmp	r3, r4
 800da1c:	6011      	str	r1, [r2, #0]
 800da1e:	d1dd      	bne.n	800d9dc <_free_r+0x28>
 800da20:	681c      	ldr	r4, [r3, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	6053      	str	r3, [r2, #4]
 800da26:	4421      	add	r1, r4
 800da28:	6011      	str	r1, [r2, #0]
 800da2a:	e7d7      	b.n	800d9dc <_free_r+0x28>
 800da2c:	d902      	bls.n	800da34 <_free_r+0x80>
 800da2e:	230c      	movs	r3, #12
 800da30:	6003      	str	r3, [r0, #0]
 800da32:	e7d3      	b.n	800d9dc <_free_r+0x28>
 800da34:	6825      	ldr	r5, [r4, #0]
 800da36:	1961      	adds	r1, r4, r5
 800da38:	428b      	cmp	r3, r1
 800da3a:	bf04      	itt	eq
 800da3c:	6819      	ldreq	r1, [r3, #0]
 800da3e:	685b      	ldreq	r3, [r3, #4]
 800da40:	6063      	str	r3, [r4, #4]
 800da42:	bf04      	itt	eq
 800da44:	1949      	addeq	r1, r1, r5
 800da46:	6021      	streq	r1, [r4, #0]
 800da48:	6054      	str	r4, [r2, #4]
 800da4a:	e7c7      	b.n	800d9dc <_free_r+0x28>
 800da4c:	b003      	add	sp, #12
 800da4e:	bd30      	pop	{r4, r5, pc}
 800da50:	20000454 	.word	0x20000454

0800da54 <_malloc_r>:
 800da54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da56:	1ccd      	adds	r5, r1, #3
 800da58:	f025 0503 	bic.w	r5, r5, #3
 800da5c:	3508      	adds	r5, #8
 800da5e:	2d0c      	cmp	r5, #12
 800da60:	bf38      	it	cc
 800da62:	250c      	movcc	r5, #12
 800da64:	2d00      	cmp	r5, #0
 800da66:	4606      	mov	r6, r0
 800da68:	db01      	blt.n	800da6e <_malloc_r+0x1a>
 800da6a:	42a9      	cmp	r1, r5
 800da6c:	d903      	bls.n	800da76 <_malloc_r+0x22>
 800da6e:	230c      	movs	r3, #12
 800da70:	6033      	str	r3, [r6, #0]
 800da72:	2000      	movs	r0, #0
 800da74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da76:	f001 fb5f 	bl	800f138 <__malloc_lock>
 800da7a:	4921      	ldr	r1, [pc, #132]	; (800db00 <_malloc_r+0xac>)
 800da7c:	680a      	ldr	r2, [r1, #0]
 800da7e:	4614      	mov	r4, r2
 800da80:	b99c      	cbnz	r4, 800daaa <_malloc_r+0x56>
 800da82:	4f20      	ldr	r7, [pc, #128]	; (800db04 <_malloc_r+0xb0>)
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	b923      	cbnz	r3, 800da92 <_malloc_r+0x3e>
 800da88:	4621      	mov	r1, r4
 800da8a:	4630      	mov	r0, r6
 800da8c:	f000 fca6 	bl	800e3dc <_sbrk_r>
 800da90:	6038      	str	r0, [r7, #0]
 800da92:	4629      	mov	r1, r5
 800da94:	4630      	mov	r0, r6
 800da96:	f000 fca1 	bl	800e3dc <_sbrk_r>
 800da9a:	1c43      	adds	r3, r0, #1
 800da9c:	d123      	bne.n	800dae6 <_malloc_r+0x92>
 800da9e:	230c      	movs	r3, #12
 800daa0:	6033      	str	r3, [r6, #0]
 800daa2:	4630      	mov	r0, r6
 800daa4:	f001 fb4e 	bl	800f144 <__malloc_unlock>
 800daa8:	e7e3      	b.n	800da72 <_malloc_r+0x1e>
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	1b5b      	subs	r3, r3, r5
 800daae:	d417      	bmi.n	800dae0 <_malloc_r+0x8c>
 800dab0:	2b0b      	cmp	r3, #11
 800dab2:	d903      	bls.n	800dabc <_malloc_r+0x68>
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	441c      	add	r4, r3
 800dab8:	6025      	str	r5, [r4, #0]
 800daba:	e004      	b.n	800dac6 <_malloc_r+0x72>
 800dabc:	6863      	ldr	r3, [r4, #4]
 800dabe:	42a2      	cmp	r2, r4
 800dac0:	bf0c      	ite	eq
 800dac2:	600b      	streq	r3, [r1, #0]
 800dac4:	6053      	strne	r3, [r2, #4]
 800dac6:	4630      	mov	r0, r6
 800dac8:	f001 fb3c 	bl	800f144 <__malloc_unlock>
 800dacc:	f104 000b 	add.w	r0, r4, #11
 800dad0:	1d23      	adds	r3, r4, #4
 800dad2:	f020 0007 	bic.w	r0, r0, #7
 800dad6:	1ac2      	subs	r2, r0, r3
 800dad8:	d0cc      	beq.n	800da74 <_malloc_r+0x20>
 800dada:	1a1b      	subs	r3, r3, r0
 800dadc:	50a3      	str	r3, [r4, r2]
 800dade:	e7c9      	b.n	800da74 <_malloc_r+0x20>
 800dae0:	4622      	mov	r2, r4
 800dae2:	6864      	ldr	r4, [r4, #4]
 800dae4:	e7cc      	b.n	800da80 <_malloc_r+0x2c>
 800dae6:	1cc4      	adds	r4, r0, #3
 800dae8:	f024 0403 	bic.w	r4, r4, #3
 800daec:	42a0      	cmp	r0, r4
 800daee:	d0e3      	beq.n	800dab8 <_malloc_r+0x64>
 800daf0:	1a21      	subs	r1, r4, r0
 800daf2:	4630      	mov	r0, r6
 800daf4:	f000 fc72 	bl	800e3dc <_sbrk_r>
 800daf8:	3001      	adds	r0, #1
 800dafa:	d1dd      	bne.n	800dab8 <_malloc_r+0x64>
 800dafc:	e7cf      	b.n	800da9e <_malloc_r+0x4a>
 800dafe:	bf00      	nop
 800db00:	20000454 	.word	0x20000454
 800db04:	20000458 	.word	0x20000458

0800db08 <__cvt>:
 800db08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db0c:	ec55 4b10 	vmov	r4, r5, d0
 800db10:	2d00      	cmp	r5, #0
 800db12:	460e      	mov	r6, r1
 800db14:	4619      	mov	r1, r3
 800db16:	462b      	mov	r3, r5
 800db18:	bfbb      	ittet	lt
 800db1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800db1e:	461d      	movlt	r5, r3
 800db20:	2300      	movge	r3, #0
 800db22:	232d      	movlt	r3, #45	; 0x2d
 800db24:	700b      	strb	r3, [r1, #0]
 800db26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db2c:	4691      	mov	r9, r2
 800db2e:	f023 0820 	bic.w	r8, r3, #32
 800db32:	bfbc      	itt	lt
 800db34:	4622      	movlt	r2, r4
 800db36:	4614      	movlt	r4, r2
 800db38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db3c:	d005      	beq.n	800db4a <__cvt+0x42>
 800db3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db42:	d100      	bne.n	800db46 <__cvt+0x3e>
 800db44:	3601      	adds	r6, #1
 800db46:	2102      	movs	r1, #2
 800db48:	e000      	b.n	800db4c <__cvt+0x44>
 800db4a:	2103      	movs	r1, #3
 800db4c:	ab03      	add	r3, sp, #12
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	ab02      	add	r3, sp, #8
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	ec45 4b10 	vmov	d0, r4, r5
 800db58:	4653      	mov	r3, sl
 800db5a:	4632      	mov	r2, r6
 800db5c:	f000 fcfc 	bl	800e558 <_dtoa_r>
 800db60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db64:	4607      	mov	r7, r0
 800db66:	d102      	bne.n	800db6e <__cvt+0x66>
 800db68:	f019 0f01 	tst.w	r9, #1
 800db6c:	d022      	beq.n	800dbb4 <__cvt+0xac>
 800db6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db72:	eb07 0906 	add.w	r9, r7, r6
 800db76:	d110      	bne.n	800db9a <__cvt+0x92>
 800db78:	783b      	ldrb	r3, [r7, #0]
 800db7a:	2b30      	cmp	r3, #48	; 0x30
 800db7c:	d10a      	bne.n	800db94 <__cvt+0x8c>
 800db7e:	2200      	movs	r2, #0
 800db80:	2300      	movs	r3, #0
 800db82:	4620      	mov	r0, r4
 800db84:	4629      	mov	r1, r5
 800db86:	f7f2 ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800db8a:	b918      	cbnz	r0, 800db94 <__cvt+0x8c>
 800db8c:	f1c6 0601 	rsb	r6, r6, #1
 800db90:	f8ca 6000 	str.w	r6, [sl]
 800db94:	f8da 3000 	ldr.w	r3, [sl]
 800db98:	4499      	add	r9, r3
 800db9a:	2200      	movs	r2, #0
 800db9c:	2300      	movs	r3, #0
 800db9e:	4620      	mov	r0, r4
 800dba0:	4629      	mov	r1, r5
 800dba2:	f7f2 ff91 	bl	8000ac8 <__aeabi_dcmpeq>
 800dba6:	b108      	cbz	r0, 800dbac <__cvt+0xa4>
 800dba8:	f8cd 900c 	str.w	r9, [sp, #12]
 800dbac:	2230      	movs	r2, #48	; 0x30
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	454b      	cmp	r3, r9
 800dbb2:	d307      	bcc.n	800dbc4 <__cvt+0xbc>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbb8:	1bdb      	subs	r3, r3, r7
 800dbba:	4638      	mov	r0, r7
 800dbbc:	6013      	str	r3, [r2, #0]
 800dbbe:	b004      	add	sp, #16
 800dbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc4:	1c59      	adds	r1, r3, #1
 800dbc6:	9103      	str	r1, [sp, #12]
 800dbc8:	701a      	strb	r2, [r3, #0]
 800dbca:	e7f0      	b.n	800dbae <__cvt+0xa6>

0800dbcc <__exponent>:
 800dbcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2900      	cmp	r1, #0
 800dbd2:	bfb8      	it	lt
 800dbd4:	4249      	neglt	r1, r1
 800dbd6:	f803 2b02 	strb.w	r2, [r3], #2
 800dbda:	bfb4      	ite	lt
 800dbdc:	222d      	movlt	r2, #45	; 0x2d
 800dbde:	222b      	movge	r2, #43	; 0x2b
 800dbe0:	2909      	cmp	r1, #9
 800dbe2:	7042      	strb	r2, [r0, #1]
 800dbe4:	dd2a      	ble.n	800dc3c <__exponent+0x70>
 800dbe6:	f10d 0407 	add.w	r4, sp, #7
 800dbea:	46a4      	mov	ip, r4
 800dbec:	270a      	movs	r7, #10
 800dbee:	46a6      	mov	lr, r4
 800dbf0:	460a      	mov	r2, r1
 800dbf2:	fb91 f6f7 	sdiv	r6, r1, r7
 800dbf6:	fb07 1516 	mls	r5, r7, r6, r1
 800dbfa:	3530      	adds	r5, #48	; 0x30
 800dbfc:	2a63      	cmp	r2, #99	; 0x63
 800dbfe:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dc06:	4631      	mov	r1, r6
 800dc08:	dcf1      	bgt.n	800dbee <__exponent+0x22>
 800dc0a:	3130      	adds	r1, #48	; 0x30
 800dc0c:	f1ae 0502 	sub.w	r5, lr, #2
 800dc10:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dc14:	1c44      	adds	r4, r0, #1
 800dc16:	4629      	mov	r1, r5
 800dc18:	4561      	cmp	r1, ip
 800dc1a:	d30a      	bcc.n	800dc32 <__exponent+0x66>
 800dc1c:	f10d 0209 	add.w	r2, sp, #9
 800dc20:	eba2 020e 	sub.w	r2, r2, lr
 800dc24:	4565      	cmp	r5, ip
 800dc26:	bf88      	it	hi
 800dc28:	2200      	movhi	r2, #0
 800dc2a:	4413      	add	r3, r2
 800dc2c:	1a18      	subs	r0, r3, r0
 800dc2e:	b003      	add	sp, #12
 800dc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc36:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dc3a:	e7ed      	b.n	800dc18 <__exponent+0x4c>
 800dc3c:	2330      	movs	r3, #48	; 0x30
 800dc3e:	3130      	adds	r1, #48	; 0x30
 800dc40:	7083      	strb	r3, [r0, #2]
 800dc42:	70c1      	strb	r1, [r0, #3]
 800dc44:	1d03      	adds	r3, r0, #4
 800dc46:	e7f1      	b.n	800dc2c <__exponent+0x60>

0800dc48 <_printf_float>:
 800dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	ed2d 8b02 	vpush	{d8}
 800dc50:	b08d      	sub	sp, #52	; 0x34
 800dc52:	460c      	mov	r4, r1
 800dc54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc58:	4616      	mov	r6, r2
 800dc5a:	461f      	mov	r7, r3
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	f001 fa67 	bl	800f130 <_localeconv_r>
 800dc62:	f8d0 a000 	ldr.w	sl, [r0]
 800dc66:	4650      	mov	r0, sl
 800dc68:	f7f2 fab2 	bl	80001d0 <strlen>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	9305      	str	r3, [sp, #20]
 800dc74:	f8d8 3000 	ldr.w	r3, [r8]
 800dc78:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dc7c:	3307      	adds	r3, #7
 800dc7e:	f023 0307 	bic.w	r3, r3, #7
 800dc82:	f103 0208 	add.w	r2, r3, #8
 800dc86:	f8c8 2000 	str.w	r2, [r8]
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dc92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dc96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc9a:	9307      	str	r3, [sp, #28]
 800dc9c:	f8cd 8018 	str.w	r8, [sp, #24]
 800dca0:	ee08 0a10 	vmov	s16, r0
 800dca4:	4b9f      	ldr	r3, [pc, #636]	; (800df24 <_printf_float+0x2dc>)
 800dca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcaa:	f04f 32ff 	mov.w	r2, #4294967295
 800dcae:	f7f2 ff3d 	bl	8000b2c <__aeabi_dcmpun>
 800dcb2:	bb88      	cbnz	r0, 800dd18 <_printf_float+0xd0>
 800dcb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcb8:	4b9a      	ldr	r3, [pc, #616]	; (800df24 <_printf_float+0x2dc>)
 800dcba:	f04f 32ff 	mov.w	r2, #4294967295
 800dcbe:	f7f2 ff17 	bl	8000af0 <__aeabi_dcmple>
 800dcc2:	bb48      	cbnz	r0, 800dd18 <_printf_float+0xd0>
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	4640      	mov	r0, r8
 800dcca:	4649      	mov	r1, r9
 800dccc:	f7f2 ff06 	bl	8000adc <__aeabi_dcmplt>
 800dcd0:	b110      	cbz	r0, 800dcd8 <_printf_float+0x90>
 800dcd2:	232d      	movs	r3, #45	; 0x2d
 800dcd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd8:	4b93      	ldr	r3, [pc, #588]	; (800df28 <_printf_float+0x2e0>)
 800dcda:	4894      	ldr	r0, [pc, #592]	; (800df2c <_printf_float+0x2e4>)
 800dcdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dce0:	bf94      	ite	ls
 800dce2:	4698      	movls	r8, r3
 800dce4:	4680      	movhi	r8, r0
 800dce6:	2303      	movs	r3, #3
 800dce8:	6123      	str	r3, [r4, #16]
 800dcea:	9b05      	ldr	r3, [sp, #20]
 800dcec:	f023 0204 	bic.w	r2, r3, #4
 800dcf0:	6022      	str	r2, [r4, #0]
 800dcf2:	f04f 0900 	mov.w	r9, #0
 800dcf6:	9700      	str	r7, [sp, #0]
 800dcf8:	4633      	mov	r3, r6
 800dcfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800dcfc:	4621      	mov	r1, r4
 800dcfe:	4628      	mov	r0, r5
 800dd00:	f000 f9d8 	bl	800e0b4 <_printf_common>
 800dd04:	3001      	adds	r0, #1
 800dd06:	f040 8090 	bne.w	800de2a <_printf_float+0x1e2>
 800dd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0e:	b00d      	add	sp, #52	; 0x34
 800dd10:	ecbd 8b02 	vpop	{d8}
 800dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd18:	4642      	mov	r2, r8
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	4649      	mov	r1, r9
 800dd20:	f7f2 ff04 	bl	8000b2c <__aeabi_dcmpun>
 800dd24:	b140      	cbz	r0, 800dd38 <_printf_float+0xf0>
 800dd26:	464b      	mov	r3, r9
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	bfbc      	itt	lt
 800dd2c:	232d      	movlt	r3, #45	; 0x2d
 800dd2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd32:	487f      	ldr	r0, [pc, #508]	; (800df30 <_printf_float+0x2e8>)
 800dd34:	4b7f      	ldr	r3, [pc, #508]	; (800df34 <_printf_float+0x2ec>)
 800dd36:	e7d1      	b.n	800dcdc <_printf_float+0x94>
 800dd38:	6863      	ldr	r3, [r4, #4]
 800dd3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dd3e:	9206      	str	r2, [sp, #24]
 800dd40:	1c5a      	adds	r2, r3, #1
 800dd42:	d13f      	bne.n	800ddc4 <_printf_float+0x17c>
 800dd44:	2306      	movs	r3, #6
 800dd46:	6063      	str	r3, [r4, #4]
 800dd48:	9b05      	ldr	r3, [sp, #20]
 800dd4a:	6861      	ldr	r1, [r4, #4]
 800dd4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd50:	2300      	movs	r3, #0
 800dd52:	9303      	str	r3, [sp, #12]
 800dd54:	ab0a      	add	r3, sp, #40	; 0x28
 800dd56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dd5a:	ab09      	add	r3, sp, #36	; 0x24
 800dd5c:	ec49 8b10 	vmov	d0, r8, r9
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	6022      	str	r2, [r4, #0]
 800dd64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f7ff fecd 	bl	800db08 <__cvt>
 800dd6e:	9b06      	ldr	r3, [sp, #24]
 800dd70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd72:	2b47      	cmp	r3, #71	; 0x47
 800dd74:	4680      	mov	r8, r0
 800dd76:	d108      	bne.n	800dd8a <_printf_float+0x142>
 800dd78:	1cc8      	adds	r0, r1, #3
 800dd7a:	db02      	blt.n	800dd82 <_printf_float+0x13a>
 800dd7c:	6863      	ldr	r3, [r4, #4]
 800dd7e:	4299      	cmp	r1, r3
 800dd80:	dd41      	ble.n	800de06 <_printf_float+0x1be>
 800dd82:	f1ab 0b02 	sub.w	fp, fp, #2
 800dd86:	fa5f fb8b 	uxtb.w	fp, fp
 800dd8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd8e:	d820      	bhi.n	800ddd2 <_printf_float+0x18a>
 800dd90:	3901      	subs	r1, #1
 800dd92:	465a      	mov	r2, fp
 800dd94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd98:	9109      	str	r1, [sp, #36]	; 0x24
 800dd9a:	f7ff ff17 	bl	800dbcc <__exponent>
 800dd9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dda0:	1813      	adds	r3, r2, r0
 800dda2:	2a01      	cmp	r2, #1
 800dda4:	4681      	mov	r9, r0
 800dda6:	6123      	str	r3, [r4, #16]
 800dda8:	dc02      	bgt.n	800ddb0 <_printf_float+0x168>
 800ddaa:	6822      	ldr	r2, [r4, #0]
 800ddac:	07d2      	lsls	r2, r2, #31
 800ddae:	d501      	bpl.n	800ddb4 <_printf_float+0x16c>
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	6123      	str	r3, [r4, #16]
 800ddb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d09c      	beq.n	800dcf6 <_printf_float+0xae>
 800ddbc:	232d      	movs	r3, #45	; 0x2d
 800ddbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddc2:	e798      	b.n	800dcf6 <_printf_float+0xae>
 800ddc4:	9a06      	ldr	r2, [sp, #24]
 800ddc6:	2a47      	cmp	r2, #71	; 0x47
 800ddc8:	d1be      	bne.n	800dd48 <_printf_float+0x100>
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1bc      	bne.n	800dd48 <_printf_float+0x100>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e7b9      	b.n	800dd46 <_printf_float+0xfe>
 800ddd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ddd6:	d118      	bne.n	800de0a <_printf_float+0x1c2>
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	6863      	ldr	r3, [r4, #4]
 800dddc:	dd0b      	ble.n	800ddf6 <_printf_float+0x1ae>
 800ddde:	6121      	str	r1, [r4, #16]
 800dde0:	b913      	cbnz	r3, 800dde8 <_printf_float+0x1a0>
 800dde2:	6822      	ldr	r2, [r4, #0]
 800dde4:	07d0      	lsls	r0, r2, #31
 800dde6:	d502      	bpl.n	800ddee <_printf_float+0x1a6>
 800dde8:	3301      	adds	r3, #1
 800ddea:	440b      	add	r3, r1
 800ddec:	6123      	str	r3, [r4, #16]
 800ddee:	65a1      	str	r1, [r4, #88]	; 0x58
 800ddf0:	f04f 0900 	mov.w	r9, #0
 800ddf4:	e7de      	b.n	800ddb4 <_printf_float+0x16c>
 800ddf6:	b913      	cbnz	r3, 800ddfe <_printf_float+0x1b6>
 800ddf8:	6822      	ldr	r2, [r4, #0]
 800ddfa:	07d2      	lsls	r2, r2, #31
 800ddfc:	d501      	bpl.n	800de02 <_printf_float+0x1ba>
 800ddfe:	3302      	adds	r3, #2
 800de00:	e7f4      	b.n	800ddec <_printf_float+0x1a4>
 800de02:	2301      	movs	r3, #1
 800de04:	e7f2      	b.n	800ddec <_printf_float+0x1a4>
 800de06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800de0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de0c:	4299      	cmp	r1, r3
 800de0e:	db05      	blt.n	800de1c <_printf_float+0x1d4>
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	6121      	str	r1, [r4, #16]
 800de14:	07d8      	lsls	r0, r3, #31
 800de16:	d5ea      	bpl.n	800ddee <_printf_float+0x1a6>
 800de18:	1c4b      	adds	r3, r1, #1
 800de1a:	e7e7      	b.n	800ddec <_printf_float+0x1a4>
 800de1c:	2900      	cmp	r1, #0
 800de1e:	bfd4      	ite	le
 800de20:	f1c1 0202 	rsble	r2, r1, #2
 800de24:	2201      	movgt	r2, #1
 800de26:	4413      	add	r3, r2
 800de28:	e7e0      	b.n	800ddec <_printf_float+0x1a4>
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	055a      	lsls	r2, r3, #21
 800de2e:	d407      	bmi.n	800de40 <_printf_float+0x1f8>
 800de30:	6923      	ldr	r3, [r4, #16]
 800de32:	4642      	mov	r2, r8
 800de34:	4631      	mov	r1, r6
 800de36:	4628      	mov	r0, r5
 800de38:	47b8      	blx	r7
 800de3a:	3001      	adds	r0, #1
 800de3c:	d12c      	bne.n	800de98 <_printf_float+0x250>
 800de3e:	e764      	b.n	800dd0a <_printf_float+0xc2>
 800de40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de44:	f240 80e0 	bls.w	800e008 <_printf_float+0x3c0>
 800de48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de4c:	2200      	movs	r2, #0
 800de4e:	2300      	movs	r3, #0
 800de50:	f7f2 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800de54:	2800      	cmp	r0, #0
 800de56:	d034      	beq.n	800dec2 <_printf_float+0x27a>
 800de58:	4a37      	ldr	r2, [pc, #220]	; (800df38 <_printf_float+0x2f0>)
 800de5a:	2301      	movs	r3, #1
 800de5c:	4631      	mov	r1, r6
 800de5e:	4628      	mov	r0, r5
 800de60:	47b8      	blx	r7
 800de62:	3001      	adds	r0, #1
 800de64:	f43f af51 	beq.w	800dd0a <_printf_float+0xc2>
 800de68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de6c:	429a      	cmp	r2, r3
 800de6e:	db02      	blt.n	800de76 <_printf_float+0x22e>
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	07d8      	lsls	r0, r3, #31
 800de74:	d510      	bpl.n	800de98 <_printf_float+0x250>
 800de76:	ee18 3a10 	vmov	r3, s16
 800de7a:	4652      	mov	r2, sl
 800de7c:	4631      	mov	r1, r6
 800de7e:	4628      	mov	r0, r5
 800de80:	47b8      	blx	r7
 800de82:	3001      	adds	r0, #1
 800de84:	f43f af41 	beq.w	800dd0a <_printf_float+0xc2>
 800de88:	f04f 0800 	mov.w	r8, #0
 800de8c:	f104 091a 	add.w	r9, r4, #26
 800de90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de92:	3b01      	subs	r3, #1
 800de94:	4543      	cmp	r3, r8
 800de96:	dc09      	bgt.n	800deac <_printf_float+0x264>
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	079b      	lsls	r3, r3, #30
 800de9c:	f100 8105 	bmi.w	800e0aa <_printf_float+0x462>
 800dea0:	68e0      	ldr	r0, [r4, #12]
 800dea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dea4:	4298      	cmp	r0, r3
 800dea6:	bfb8      	it	lt
 800dea8:	4618      	movlt	r0, r3
 800deaa:	e730      	b.n	800dd0e <_printf_float+0xc6>
 800deac:	2301      	movs	r3, #1
 800deae:	464a      	mov	r2, r9
 800deb0:	4631      	mov	r1, r6
 800deb2:	4628      	mov	r0, r5
 800deb4:	47b8      	blx	r7
 800deb6:	3001      	adds	r0, #1
 800deb8:	f43f af27 	beq.w	800dd0a <_printf_float+0xc2>
 800debc:	f108 0801 	add.w	r8, r8, #1
 800dec0:	e7e6      	b.n	800de90 <_printf_float+0x248>
 800dec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dc39      	bgt.n	800df3c <_printf_float+0x2f4>
 800dec8:	4a1b      	ldr	r2, [pc, #108]	; (800df38 <_printf_float+0x2f0>)
 800deca:	2301      	movs	r3, #1
 800decc:	4631      	mov	r1, r6
 800dece:	4628      	mov	r0, r5
 800ded0:	47b8      	blx	r7
 800ded2:	3001      	adds	r0, #1
 800ded4:	f43f af19 	beq.w	800dd0a <_printf_float+0xc2>
 800ded8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dedc:	4313      	orrs	r3, r2
 800dede:	d102      	bne.n	800dee6 <_printf_float+0x29e>
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	07d9      	lsls	r1, r3, #31
 800dee4:	d5d8      	bpl.n	800de98 <_printf_float+0x250>
 800dee6:	ee18 3a10 	vmov	r3, s16
 800deea:	4652      	mov	r2, sl
 800deec:	4631      	mov	r1, r6
 800deee:	4628      	mov	r0, r5
 800def0:	47b8      	blx	r7
 800def2:	3001      	adds	r0, #1
 800def4:	f43f af09 	beq.w	800dd0a <_printf_float+0xc2>
 800def8:	f04f 0900 	mov.w	r9, #0
 800defc:	f104 0a1a 	add.w	sl, r4, #26
 800df00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df02:	425b      	negs	r3, r3
 800df04:	454b      	cmp	r3, r9
 800df06:	dc01      	bgt.n	800df0c <_printf_float+0x2c4>
 800df08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df0a:	e792      	b.n	800de32 <_printf_float+0x1ea>
 800df0c:	2301      	movs	r3, #1
 800df0e:	4652      	mov	r2, sl
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	47b8      	blx	r7
 800df16:	3001      	adds	r0, #1
 800df18:	f43f aef7 	beq.w	800dd0a <_printf_float+0xc2>
 800df1c:	f109 0901 	add.w	r9, r9, #1
 800df20:	e7ee      	b.n	800df00 <_printf_float+0x2b8>
 800df22:	bf00      	nop
 800df24:	7fefffff 	.word	0x7fefffff
 800df28:	08011674 	.word	0x08011674
 800df2c:	08011678 	.word	0x08011678
 800df30:	08011680 	.word	0x08011680
 800df34:	0801167c 	.word	0x0801167c
 800df38:	08011684 	.word	0x08011684
 800df3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df40:	429a      	cmp	r2, r3
 800df42:	bfa8      	it	ge
 800df44:	461a      	movge	r2, r3
 800df46:	2a00      	cmp	r2, #0
 800df48:	4691      	mov	r9, r2
 800df4a:	dc37      	bgt.n	800dfbc <_printf_float+0x374>
 800df4c:	f04f 0b00 	mov.w	fp, #0
 800df50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df54:	f104 021a 	add.w	r2, r4, #26
 800df58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df5a:	9305      	str	r3, [sp, #20]
 800df5c:	eba3 0309 	sub.w	r3, r3, r9
 800df60:	455b      	cmp	r3, fp
 800df62:	dc33      	bgt.n	800dfcc <_printf_float+0x384>
 800df64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df68:	429a      	cmp	r2, r3
 800df6a:	db3b      	blt.n	800dfe4 <_printf_float+0x39c>
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	07da      	lsls	r2, r3, #31
 800df70:	d438      	bmi.n	800dfe4 <_printf_float+0x39c>
 800df72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df74:	9b05      	ldr	r3, [sp, #20]
 800df76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	eba2 0901 	sub.w	r9, r2, r1
 800df7e:	4599      	cmp	r9, r3
 800df80:	bfa8      	it	ge
 800df82:	4699      	movge	r9, r3
 800df84:	f1b9 0f00 	cmp.w	r9, #0
 800df88:	dc35      	bgt.n	800dff6 <_printf_float+0x3ae>
 800df8a:	f04f 0800 	mov.w	r8, #0
 800df8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df92:	f104 0a1a 	add.w	sl, r4, #26
 800df96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df9a:	1a9b      	subs	r3, r3, r2
 800df9c:	eba3 0309 	sub.w	r3, r3, r9
 800dfa0:	4543      	cmp	r3, r8
 800dfa2:	f77f af79 	ble.w	800de98 <_printf_float+0x250>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	4652      	mov	r2, sl
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4628      	mov	r0, r5
 800dfae:	47b8      	blx	r7
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	f43f aeaa 	beq.w	800dd0a <_printf_float+0xc2>
 800dfb6:	f108 0801 	add.w	r8, r8, #1
 800dfba:	e7ec      	b.n	800df96 <_printf_float+0x34e>
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	4631      	mov	r1, r6
 800dfc0:	4642      	mov	r2, r8
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	47b8      	blx	r7
 800dfc6:	3001      	adds	r0, #1
 800dfc8:	d1c0      	bne.n	800df4c <_printf_float+0x304>
 800dfca:	e69e      	b.n	800dd0a <_printf_float+0xc2>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	4631      	mov	r1, r6
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	9205      	str	r2, [sp, #20]
 800dfd4:	47b8      	blx	r7
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	f43f ae97 	beq.w	800dd0a <_printf_float+0xc2>
 800dfdc:	9a05      	ldr	r2, [sp, #20]
 800dfde:	f10b 0b01 	add.w	fp, fp, #1
 800dfe2:	e7b9      	b.n	800df58 <_printf_float+0x310>
 800dfe4:	ee18 3a10 	vmov	r3, s16
 800dfe8:	4652      	mov	r2, sl
 800dfea:	4631      	mov	r1, r6
 800dfec:	4628      	mov	r0, r5
 800dfee:	47b8      	blx	r7
 800dff0:	3001      	adds	r0, #1
 800dff2:	d1be      	bne.n	800df72 <_printf_float+0x32a>
 800dff4:	e689      	b.n	800dd0a <_printf_float+0xc2>
 800dff6:	9a05      	ldr	r2, [sp, #20]
 800dff8:	464b      	mov	r3, r9
 800dffa:	4442      	add	r2, r8
 800dffc:	4631      	mov	r1, r6
 800dffe:	4628      	mov	r0, r5
 800e000:	47b8      	blx	r7
 800e002:	3001      	adds	r0, #1
 800e004:	d1c1      	bne.n	800df8a <_printf_float+0x342>
 800e006:	e680      	b.n	800dd0a <_printf_float+0xc2>
 800e008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e00a:	2a01      	cmp	r2, #1
 800e00c:	dc01      	bgt.n	800e012 <_printf_float+0x3ca>
 800e00e:	07db      	lsls	r3, r3, #31
 800e010:	d538      	bpl.n	800e084 <_printf_float+0x43c>
 800e012:	2301      	movs	r3, #1
 800e014:	4642      	mov	r2, r8
 800e016:	4631      	mov	r1, r6
 800e018:	4628      	mov	r0, r5
 800e01a:	47b8      	blx	r7
 800e01c:	3001      	adds	r0, #1
 800e01e:	f43f ae74 	beq.w	800dd0a <_printf_float+0xc2>
 800e022:	ee18 3a10 	vmov	r3, s16
 800e026:	4652      	mov	r2, sl
 800e028:	4631      	mov	r1, r6
 800e02a:	4628      	mov	r0, r5
 800e02c:	47b8      	blx	r7
 800e02e:	3001      	adds	r0, #1
 800e030:	f43f ae6b 	beq.w	800dd0a <_printf_float+0xc2>
 800e034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e038:	2200      	movs	r2, #0
 800e03a:	2300      	movs	r3, #0
 800e03c:	f7f2 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 800e040:	b9d8      	cbnz	r0, 800e07a <_printf_float+0x432>
 800e042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e044:	f108 0201 	add.w	r2, r8, #1
 800e048:	3b01      	subs	r3, #1
 800e04a:	4631      	mov	r1, r6
 800e04c:	4628      	mov	r0, r5
 800e04e:	47b8      	blx	r7
 800e050:	3001      	adds	r0, #1
 800e052:	d10e      	bne.n	800e072 <_printf_float+0x42a>
 800e054:	e659      	b.n	800dd0a <_printf_float+0xc2>
 800e056:	2301      	movs	r3, #1
 800e058:	4652      	mov	r2, sl
 800e05a:	4631      	mov	r1, r6
 800e05c:	4628      	mov	r0, r5
 800e05e:	47b8      	blx	r7
 800e060:	3001      	adds	r0, #1
 800e062:	f43f ae52 	beq.w	800dd0a <_printf_float+0xc2>
 800e066:	f108 0801 	add.w	r8, r8, #1
 800e06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e06c:	3b01      	subs	r3, #1
 800e06e:	4543      	cmp	r3, r8
 800e070:	dcf1      	bgt.n	800e056 <_printf_float+0x40e>
 800e072:	464b      	mov	r3, r9
 800e074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e078:	e6dc      	b.n	800de34 <_printf_float+0x1ec>
 800e07a:	f04f 0800 	mov.w	r8, #0
 800e07e:	f104 0a1a 	add.w	sl, r4, #26
 800e082:	e7f2      	b.n	800e06a <_printf_float+0x422>
 800e084:	2301      	movs	r3, #1
 800e086:	4642      	mov	r2, r8
 800e088:	e7df      	b.n	800e04a <_printf_float+0x402>
 800e08a:	2301      	movs	r3, #1
 800e08c:	464a      	mov	r2, r9
 800e08e:	4631      	mov	r1, r6
 800e090:	4628      	mov	r0, r5
 800e092:	47b8      	blx	r7
 800e094:	3001      	adds	r0, #1
 800e096:	f43f ae38 	beq.w	800dd0a <_printf_float+0xc2>
 800e09a:	f108 0801 	add.w	r8, r8, #1
 800e09e:	68e3      	ldr	r3, [r4, #12]
 800e0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0a2:	1a5b      	subs	r3, r3, r1
 800e0a4:	4543      	cmp	r3, r8
 800e0a6:	dcf0      	bgt.n	800e08a <_printf_float+0x442>
 800e0a8:	e6fa      	b.n	800dea0 <_printf_float+0x258>
 800e0aa:	f04f 0800 	mov.w	r8, #0
 800e0ae:	f104 0919 	add.w	r9, r4, #25
 800e0b2:	e7f4      	b.n	800e09e <_printf_float+0x456>

0800e0b4 <_printf_common>:
 800e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b8:	4616      	mov	r6, r2
 800e0ba:	4699      	mov	r9, r3
 800e0bc:	688a      	ldr	r2, [r1, #8]
 800e0be:	690b      	ldr	r3, [r1, #16]
 800e0c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	bfb8      	it	lt
 800e0c8:	4613      	movlt	r3, r2
 800e0ca:	6033      	str	r3, [r6, #0]
 800e0cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	b10a      	cbz	r2, 800e0da <_printf_common+0x26>
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	6033      	str	r3, [r6, #0]
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	0699      	lsls	r1, r3, #26
 800e0de:	bf42      	ittt	mi
 800e0e0:	6833      	ldrmi	r3, [r6, #0]
 800e0e2:	3302      	addmi	r3, #2
 800e0e4:	6033      	strmi	r3, [r6, #0]
 800e0e6:	6825      	ldr	r5, [r4, #0]
 800e0e8:	f015 0506 	ands.w	r5, r5, #6
 800e0ec:	d106      	bne.n	800e0fc <_printf_common+0x48>
 800e0ee:	f104 0a19 	add.w	sl, r4, #25
 800e0f2:	68e3      	ldr	r3, [r4, #12]
 800e0f4:	6832      	ldr	r2, [r6, #0]
 800e0f6:	1a9b      	subs	r3, r3, r2
 800e0f8:	42ab      	cmp	r3, r5
 800e0fa:	dc26      	bgt.n	800e14a <_printf_common+0x96>
 800e0fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e100:	1e13      	subs	r3, r2, #0
 800e102:	6822      	ldr	r2, [r4, #0]
 800e104:	bf18      	it	ne
 800e106:	2301      	movne	r3, #1
 800e108:	0692      	lsls	r2, r2, #26
 800e10a:	d42b      	bmi.n	800e164 <_printf_common+0xb0>
 800e10c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e110:	4649      	mov	r1, r9
 800e112:	4638      	mov	r0, r7
 800e114:	47c0      	blx	r8
 800e116:	3001      	adds	r0, #1
 800e118:	d01e      	beq.n	800e158 <_printf_common+0xa4>
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	68e5      	ldr	r5, [r4, #12]
 800e11e:	6832      	ldr	r2, [r6, #0]
 800e120:	f003 0306 	and.w	r3, r3, #6
 800e124:	2b04      	cmp	r3, #4
 800e126:	bf08      	it	eq
 800e128:	1aad      	subeq	r5, r5, r2
 800e12a:	68a3      	ldr	r3, [r4, #8]
 800e12c:	6922      	ldr	r2, [r4, #16]
 800e12e:	bf0c      	ite	eq
 800e130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e134:	2500      	movne	r5, #0
 800e136:	4293      	cmp	r3, r2
 800e138:	bfc4      	itt	gt
 800e13a:	1a9b      	subgt	r3, r3, r2
 800e13c:	18ed      	addgt	r5, r5, r3
 800e13e:	2600      	movs	r6, #0
 800e140:	341a      	adds	r4, #26
 800e142:	42b5      	cmp	r5, r6
 800e144:	d11a      	bne.n	800e17c <_printf_common+0xc8>
 800e146:	2000      	movs	r0, #0
 800e148:	e008      	b.n	800e15c <_printf_common+0xa8>
 800e14a:	2301      	movs	r3, #1
 800e14c:	4652      	mov	r2, sl
 800e14e:	4649      	mov	r1, r9
 800e150:	4638      	mov	r0, r7
 800e152:	47c0      	blx	r8
 800e154:	3001      	adds	r0, #1
 800e156:	d103      	bne.n	800e160 <_printf_common+0xac>
 800e158:	f04f 30ff 	mov.w	r0, #4294967295
 800e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e160:	3501      	adds	r5, #1
 800e162:	e7c6      	b.n	800e0f2 <_printf_common+0x3e>
 800e164:	18e1      	adds	r1, r4, r3
 800e166:	1c5a      	adds	r2, r3, #1
 800e168:	2030      	movs	r0, #48	; 0x30
 800e16a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e16e:	4422      	add	r2, r4
 800e170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e178:	3302      	adds	r3, #2
 800e17a:	e7c7      	b.n	800e10c <_printf_common+0x58>
 800e17c:	2301      	movs	r3, #1
 800e17e:	4622      	mov	r2, r4
 800e180:	4649      	mov	r1, r9
 800e182:	4638      	mov	r0, r7
 800e184:	47c0      	blx	r8
 800e186:	3001      	adds	r0, #1
 800e188:	d0e6      	beq.n	800e158 <_printf_common+0xa4>
 800e18a:	3601      	adds	r6, #1
 800e18c:	e7d9      	b.n	800e142 <_printf_common+0x8e>
	...

0800e190 <_printf_i>:
 800e190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	460c      	mov	r4, r1
 800e196:	4691      	mov	r9, r2
 800e198:	7e27      	ldrb	r7, [r4, #24]
 800e19a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e19c:	2f78      	cmp	r7, #120	; 0x78
 800e19e:	4680      	mov	r8, r0
 800e1a0:	469a      	mov	sl, r3
 800e1a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1a6:	d807      	bhi.n	800e1b8 <_printf_i+0x28>
 800e1a8:	2f62      	cmp	r7, #98	; 0x62
 800e1aa:	d80a      	bhi.n	800e1c2 <_printf_i+0x32>
 800e1ac:	2f00      	cmp	r7, #0
 800e1ae:	f000 80d8 	beq.w	800e362 <_printf_i+0x1d2>
 800e1b2:	2f58      	cmp	r7, #88	; 0x58
 800e1b4:	f000 80a3 	beq.w	800e2fe <_printf_i+0x16e>
 800e1b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e1bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1c0:	e03a      	b.n	800e238 <_printf_i+0xa8>
 800e1c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1c6:	2b15      	cmp	r3, #21
 800e1c8:	d8f6      	bhi.n	800e1b8 <_printf_i+0x28>
 800e1ca:	a001      	add	r0, pc, #4	; (adr r0, 800e1d0 <_printf_i+0x40>)
 800e1cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e1d0:	0800e229 	.word	0x0800e229
 800e1d4:	0800e23d 	.word	0x0800e23d
 800e1d8:	0800e1b9 	.word	0x0800e1b9
 800e1dc:	0800e1b9 	.word	0x0800e1b9
 800e1e0:	0800e1b9 	.word	0x0800e1b9
 800e1e4:	0800e1b9 	.word	0x0800e1b9
 800e1e8:	0800e23d 	.word	0x0800e23d
 800e1ec:	0800e1b9 	.word	0x0800e1b9
 800e1f0:	0800e1b9 	.word	0x0800e1b9
 800e1f4:	0800e1b9 	.word	0x0800e1b9
 800e1f8:	0800e1b9 	.word	0x0800e1b9
 800e1fc:	0800e349 	.word	0x0800e349
 800e200:	0800e26d 	.word	0x0800e26d
 800e204:	0800e32b 	.word	0x0800e32b
 800e208:	0800e1b9 	.word	0x0800e1b9
 800e20c:	0800e1b9 	.word	0x0800e1b9
 800e210:	0800e36b 	.word	0x0800e36b
 800e214:	0800e1b9 	.word	0x0800e1b9
 800e218:	0800e26d 	.word	0x0800e26d
 800e21c:	0800e1b9 	.word	0x0800e1b9
 800e220:	0800e1b9 	.word	0x0800e1b9
 800e224:	0800e333 	.word	0x0800e333
 800e228:	680b      	ldr	r3, [r1, #0]
 800e22a:	1d1a      	adds	r2, r3, #4
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	600a      	str	r2, [r1, #0]
 800e230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e238:	2301      	movs	r3, #1
 800e23a:	e0a3      	b.n	800e384 <_printf_i+0x1f4>
 800e23c:	6825      	ldr	r5, [r4, #0]
 800e23e:	6808      	ldr	r0, [r1, #0]
 800e240:	062e      	lsls	r6, r5, #24
 800e242:	f100 0304 	add.w	r3, r0, #4
 800e246:	d50a      	bpl.n	800e25e <_printf_i+0xce>
 800e248:	6805      	ldr	r5, [r0, #0]
 800e24a:	600b      	str	r3, [r1, #0]
 800e24c:	2d00      	cmp	r5, #0
 800e24e:	da03      	bge.n	800e258 <_printf_i+0xc8>
 800e250:	232d      	movs	r3, #45	; 0x2d
 800e252:	426d      	negs	r5, r5
 800e254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e258:	485e      	ldr	r0, [pc, #376]	; (800e3d4 <_printf_i+0x244>)
 800e25a:	230a      	movs	r3, #10
 800e25c:	e019      	b.n	800e292 <_printf_i+0x102>
 800e25e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e262:	6805      	ldr	r5, [r0, #0]
 800e264:	600b      	str	r3, [r1, #0]
 800e266:	bf18      	it	ne
 800e268:	b22d      	sxthne	r5, r5
 800e26a:	e7ef      	b.n	800e24c <_printf_i+0xbc>
 800e26c:	680b      	ldr	r3, [r1, #0]
 800e26e:	6825      	ldr	r5, [r4, #0]
 800e270:	1d18      	adds	r0, r3, #4
 800e272:	6008      	str	r0, [r1, #0]
 800e274:	0628      	lsls	r0, r5, #24
 800e276:	d501      	bpl.n	800e27c <_printf_i+0xec>
 800e278:	681d      	ldr	r5, [r3, #0]
 800e27a:	e002      	b.n	800e282 <_printf_i+0xf2>
 800e27c:	0669      	lsls	r1, r5, #25
 800e27e:	d5fb      	bpl.n	800e278 <_printf_i+0xe8>
 800e280:	881d      	ldrh	r5, [r3, #0]
 800e282:	4854      	ldr	r0, [pc, #336]	; (800e3d4 <_printf_i+0x244>)
 800e284:	2f6f      	cmp	r7, #111	; 0x6f
 800e286:	bf0c      	ite	eq
 800e288:	2308      	moveq	r3, #8
 800e28a:	230a      	movne	r3, #10
 800e28c:	2100      	movs	r1, #0
 800e28e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e292:	6866      	ldr	r6, [r4, #4]
 800e294:	60a6      	str	r6, [r4, #8]
 800e296:	2e00      	cmp	r6, #0
 800e298:	bfa2      	ittt	ge
 800e29a:	6821      	ldrge	r1, [r4, #0]
 800e29c:	f021 0104 	bicge.w	r1, r1, #4
 800e2a0:	6021      	strge	r1, [r4, #0]
 800e2a2:	b90d      	cbnz	r5, 800e2a8 <_printf_i+0x118>
 800e2a4:	2e00      	cmp	r6, #0
 800e2a6:	d04d      	beq.n	800e344 <_printf_i+0x1b4>
 800e2a8:	4616      	mov	r6, r2
 800e2aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800e2ae:	fb03 5711 	mls	r7, r3, r1, r5
 800e2b2:	5dc7      	ldrb	r7, [r0, r7]
 800e2b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e2b8:	462f      	mov	r7, r5
 800e2ba:	42bb      	cmp	r3, r7
 800e2bc:	460d      	mov	r5, r1
 800e2be:	d9f4      	bls.n	800e2aa <_printf_i+0x11a>
 800e2c0:	2b08      	cmp	r3, #8
 800e2c2:	d10b      	bne.n	800e2dc <_printf_i+0x14c>
 800e2c4:	6823      	ldr	r3, [r4, #0]
 800e2c6:	07df      	lsls	r7, r3, #31
 800e2c8:	d508      	bpl.n	800e2dc <_printf_i+0x14c>
 800e2ca:	6923      	ldr	r3, [r4, #16]
 800e2cc:	6861      	ldr	r1, [r4, #4]
 800e2ce:	4299      	cmp	r1, r3
 800e2d0:	bfde      	ittt	le
 800e2d2:	2330      	movle	r3, #48	; 0x30
 800e2d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e2d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e2dc:	1b92      	subs	r2, r2, r6
 800e2de:	6122      	str	r2, [r4, #16]
 800e2e0:	f8cd a000 	str.w	sl, [sp]
 800e2e4:	464b      	mov	r3, r9
 800e2e6:	aa03      	add	r2, sp, #12
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	f7ff fee2 	bl	800e0b4 <_printf_common>
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	d14c      	bne.n	800e38e <_printf_i+0x1fe>
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	b004      	add	sp, #16
 800e2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fe:	4835      	ldr	r0, [pc, #212]	; (800e3d4 <_printf_i+0x244>)
 800e300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	680e      	ldr	r6, [r1, #0]
 800e308:	061f      	lsls	r7, r3, #24
 800e30a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e30e:	600e      	str	r6, [r1, #0]
 800e310:	d514      	bpl.n	800e33c <_printf_i+0x1ac>
 800e312:	07d9      	lsls	r1, r3, #31
 800e314:	bf44      	itt	mi
 800e316:	f043 0320 	orrmi.w	r3, r3, #32
 800e31a:	6023      	strmi	r3, [r4, #0]
 800e31c:	b91d      	cbnz	r5, 800e326 <_printf_i+0x196>
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	f023 0320 	bic.w	r3, r3, #32
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	2310      	movs	r3, #16
 800e328:	e7b0      	b.n	800e28c <_printf_i+0xfc>
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	f043 0320 	orr.w	r3, r3, #32
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	2378      	movs	r3, #120	; 0x78
 800e334:	4828      	ldr	r0, [pc, #160]	; (800e3d8 <_printf_i+0x248>)
 800e336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e33a:	e7e3      	b.n	800e304 <_printf_i+0x174>
 800e33c:	065e      	lsls	r6, r3, #25
 800e33e:	bf48      	it	mi
 800e340:	b2ad      	uxthmi	r5, r5
 800e342:	e7e6      	b.n	800e312 <_printf_i+0x182>
 800e344:	4616      	mov	r6, r2
 800e346:	e7bb      	b.n	800e2c0 <_printf_i+0x130>
 800e348:	680b      	ldr	r3, [r1, #0]
 800e34a:	6826      	ldr	r6, [r4, #0]
 800e34c:	6960      	ldr	r0, [r4, #20]
 800e34e:	1d1d      	adds	r5, r3, #4
 800e350:	600d      	str	r5, [r1, #0]
 800e352:	0635      	lsls	r5, r6, #24
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	d501      	bpl.n	800e35c <_printf_i+0x1cc>
 800e358:	6018      	str	r0, [r3, #0]
 800e35a:	e002      	b.n	800e362 <_printf_i+0x1d2>
 800e35c:	0671      	lsls	r1, r6, #25
 800e35e:	d5fb      	bpl.n	800e358 <_printf_i+0x1c8>
 800e360:	8018      	strh	r0, [r3, #0]
 800e362:	2300      	movs	r3, #0
 800e364:	6123      	str	r3, [r4, #16]
 800e366:	4616      	mov	r6, r2
 800e368:	e7ba      	b.n	800e2e0 <_printf_i+0x150>
 800e36a:	680b      	ldr	r3, [r1, #0]
 800e36c:	1d1a      	adds	r2, r3, #4
 800e36e:	600a      	str	r2, [r1, #0]
 800e370:	681e      	ldr	r6, [r3, #0]
 800e372:	6862      	ldr	r2, [r4, #4]
 800e374:	2100      	movs	r1, #0
 800e376:	4630      	mov	r0, r6
 800e378:	f7f1 ff32 	bl	80001e0 <memchr>
 800e37c:	b108      	cbz	r0, 800e382 <_printf_i+0x1f2>
 800e37e:	1b80      	subs	r0, r0, r6
 800e380:	6060      	str	r0, [r4, #4]
 800e382:	6863      	ldr	r3, [r4, #4]
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	2300      	movs	r3, #0
 800e388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e38c:	e7a8      	b.n	800e2e0 <_printf_i+0x150>
 800e38e:	6923      	ldr	r3, [r4, #16]
 800e390:	4632      	mov	r2, r6
 800e392:	4649      	mov	r1, r9
 800e394:	4640      	mov	r0, r8
 800e396:	47d0      	blx	sl
 800e398:	3001      	adds	r0, #1
 800e39a:	d0ab      	beq.n	800e2f4 <_printf_i+0x164>
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	079b      	lsls	r3, r3, #30
 800e3a0:	d413      	bmi.n	800e3ca <_printf_i+0x23a>
 800e3a2:	68e0      	ldr	r0, [r4, #12]
 800e3a4:	9b03      	ldr	r3, [sp, #12]
 800e3a6:	4298      	cmp	r0, r3
 800e3a8:	bfb8      	it	lt
 800e3aa:	4618      	movlt	r0, r3
 800e3ac:	e7a4      	b.n	800e2f8 <_printf_i+0x168>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	4632      	mov	r2, r6
 800e3b2:	4649      	mov	r1, r9
 800e3b4:	4640      	mov	r0, r8
 800e3b6:	47d0      	blx	sl
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	d09b      	beq.n	800e2f4 <_printf_i+0x164>
 800e3bc:	3501      	adds	r5, #1
 800e3be:	68e3      	ldr	r3, [r4, #12]
 800e3c0:	9903      	ldr	r1, [sp, #12]
 800e3c2:	1a5b      	subs	r3, r3, r1
 800e3c4:	42ab      	cmp	r3, r5
 800e3c6:	dcf2      	bgt.n	800e3ae <_printf_i+0x21e>
 800e3c8:	e7eb      	b.n	800e3a2 <_printf_i+0x212>
 800e3ca:	2500      	movs	r5, #0
 800e3cc:	f104 0619 	add.w	r6, r4, #25
 800e3d0:	e7f5      	b.n	800e3be <_printf_i+0x22e>
 800e3d2:	bf00      	nop
 800e3d4:	08011686 	.word	0x08011686
 800e3d8:	08011697 	.word	0x08011697

0800e3dc <_sbrk_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	4d06      	ldr	r5, [pc, #24]	; (800e3f8 <_sbrk_r+0x1c>)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	4608      	mov	r0, r1
 800e3e6:	602b      	str	r3, [r5, #0]
 800e3e8:	f7f5 fd5a 	bl	8003ea0 <_sbrk>
 800e3ec:	1c43      	adds	r3, r0, #1
 800e3ee:	d102      	bne.n	800e3f6 <_sbrk_r+0x1a>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	b103      	cbz	r3, 800e3f6 <_sbrk_r+0x1a>
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	bd38      	pop	{r3, r4, r5, pc}
 800e3f8:	20004cd8 	.word	0x20004cd8

0800e3fc <siprintf>:
 800e3fc:	b40e      	push	{r1, r2, r3}
 800e3fe:	b500      	push	{lr}
 800e400:	b09c      	sub	sp, #112	; 0x70
 800e402:	ab1d      	add	r3, sp, #116	; 0x74
 800e404:	9002      	str	r0, [sp, #8]
 800e406:	9006      	str	r0, [sp, #24]
 800e408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e40c:	4809      	ldr	r0, [pc, #36]	; (800e434 <siprintf+0x38>)
 800e40e:	9107      	str	r1, [sp, #28]
 800e410:	9104      	str	r1, [sp, #16]
 800e412:	4909      	ldr	r1, [pc, #36]	; (800e438 <siprintf+0x3c>)
 800e414:	f853 2b04 	ldr.w	r2, [r3], #4
 800e418:	9105      	str	r1, [sp, #20]
 800e41a:	6800      	ldr	r0, [r0, #0]
 800e41c:	9301      	str	r3, [sp, #4]
 800e41e:	a902      	add	r1, sp, #8
 800e420:	f001 fa7e 	bl	800f920 <_svfiprintf_r>
 800e424:	9b02      	ldr	r3, [sp, #8]
 800e426:	2200      	movs	r2, #0
 800e428:	701a      	strb	r2, [r3, #0]
 800e42a:	b01c      	add	sp, #112	; 0x70
 800e42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e430:	b003      	add	sp, #12
 800e432:	4770      	bx	lr
 800e434:	20000024 	.word	0x20000024
 800e438:	ffff0208 	.word	0xffff0208

0800e43c <quorem>:
 800e43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	6903      	ldr	r3, [r0, #16]
 800e442:	690c      	ldr	r4, [r1, #16]
 800e444:	42a3      	cmp	r3, r4
 800e446:	4607      	mov	r7, r0
 800e448:	f2c0 8081 	blt.w	800e54e <quorem+0x112>
 800e44c:	3c01      	subs	r4, #1
 800e44e:	f101 0814 	add.w	r8, r1, #20
 800e452:	f100 0514 	add.w	r5, r0, #20
 800e456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e45a:	9301      	str	r3, [sp, #4]
 800e45c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e464:	3301      	adds	r3, #1
 800e466:	429a      	cmp	r2, r3
 800e468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e46c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e470:	fbb2 f6f3 	udiv	r6, r2, r3
 800e474:	d331      	bcc.n	800e4da <quorem+0x9e>
 800e476:	f04f 0e00 	mov.w	lr, #0
 800e47a:	4640      	mov	r0, r8
 800e47c:	46ac      	mov	ip, r5
 800e47e:	46f2      	mov	sl, lr
 800e480:	f850 2b04 	ldr.w	r2, [r0], #4
 800e484:	b293      	uxth	r3, r2
 800e486:	fb06 e303 	mla	r3, r6, r3, lr
 800e48a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e48e:	b29b      	uxth	r3, r3
 800e490:	ebaa 0303 	sub.w	r3, sl, r3
 800e494:	0c12      	lsrs	r2, r2, #16
 800e496:	f8dc a000 	ldr.w	sl, [ip]
 800e49a:	fb06 e202 	mla	r2, r6, r2, lr
 800e49e:	fa13 f38a 	uxtah	r3, r3, sl
 800e4a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4a6:	fa1f fa82 	uxth.w	sl, r2
 800e4aa:	f8dc 2000 	ldr.w	r2, [ip]
 800e4ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e4b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4bc:	4581      	cmp	r9, r0
 800e4be:	f84c 3b04 	str.w	r3, [ip], #4
 800e4c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4c6:	d2db      	bcs.n	800e480 <quorem+0x44>
 800e4c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4cc:	b92b      	cbnz	r3, 800e4da <quorem+0x9e>
 800e4ce:	9b01      	ldr	r3, [sp, #4]
 800e4d0:	3b04      	subs	r3, #4
 800e4d2:	429d      	cmp	r5, r3
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	d32e      	bcc.n	800e536 <quorem+0xfa>
 800e4d8:	613c      	str	r4, [r7, #16]
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f001 f8b6 	bl	800f64c <__mcmp>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	db24      	blt.n	800e52e <quorem+0xf2>
 800e4e4:	3601      	adds	r6, #1
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	f04f 0c00 	mov.w	ip, #0
 800e4ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4f0:	f8d0 e000 	ldr.w	lr, [r0]
 800e4f4:	b293      	uxth	r3, r2
 800e4f6:	ebac 0303 	sub.w	r3, ip, r3
 800e4fa:	0c12      	lsrs	r2, r2, #16
 800e4fc:	fa13 f38e 	uxtah	r3, r3, lr
 800e500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e508:	b29b      	uxth	r3, r3
 800e50a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e50e:	45c1      	cmp	r9, r8
 800e510:	f840 3b04 	str.w	r3, [r0], #4
 800e514:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e518:	d2e8      	bcs.n	800e4ec <quorem+0xb0>
 800e51a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e51e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e522:	b922      	cbnz	r2, 800e52e <quorem+0xf2>
 800e524:	3b04      	subs	r3, #4
 800e526:	429d      	cmp	r5, r3
 800e528:	461a      	mov	r2, r3
 800e52a:	d30a      	bcc.n	800e542 <quorem+0x106>
 800e52c:	613c      	str	r4, [r7, #16]
 800e52e:	4630      	mov	r0, r6
 800e530:	b003      	add	sp, #12
 800e532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e536:	6812      	ldr	r2, [r2, #0]
 800e538:	3b04      	subs	r3, #4
 800e53a:	2a00      	cmp	r2, #0
 800e53c:	d1cc      	bne.n	800e4d8 <quorem+0x9c>
 800e53e:	3c01      	subs	r4, #1
 800e540:	e7c7      	b.n	800e4d2 <quorem+0x96>
 800e542:	6812      	ldr	r2, [r2, #0]
 800e544:	3b04      	subs	r3, #4
 800e546:	2a00      	cmp	r2, #0
 800e548:	d1f0      	bne.n	800e52c <quorem+0xf0>
 800e54a:	3c01      	subs	r4, #1
 800e54c:	e7eb      	b.n	800e526 <quorem+0xea>
 800e54e:	2000      	movs	r0, #0
 800e550:	e7ee      	b.n	800e530 <quorem+0xf4>
 800e552:	0000      	movs	r0, r0
 800e554:	0000      	movs	r0, r0
	...

0800e558 <_dtoa_r>:
 800e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e55c:	ed2d 8b02 	vpush	{d8}
 800e560:	ec57 6b10 	vmov	r6, r7, d0
 800e564:	b095      	sub	sp, #84	; 0x54
 800e566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e56c:	9105      	str	r1, [sp, #20]
 800e56e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e572:	4604      	mov	r4, r0
 800e574:	9209      	str	r2, [sp, #36]	; 0x24
 800e576:	930f      	str	r3, [sp, #60]	; 0x3c
 800e578:	b975      	cbnz	r5, 800e598 <_dtoa_r+0x40>
 800e57a:	2010      	movs	r0, #16
 800e57c:	f7ff f9f4 	bl	800d968 <malloc>
 800e580:	4602      	mov	r2, r0
 800e582:	6260      	str	r0, [r4, #36]	; 0x24
 800e584:	b920      	cbnz	r0, 800e590 <_dtoa_r+0x38>
 800e586:	4bb2      	ldr	r3, [pc, #712]	; (800e850 <_dtoa_r+0x2f8>)
 800e588:	21ea      	movs	r1, #234	; 0xea
 800e58a:	48b2      	ldr	r0, [pc, #712]	; (800e854 <_dtoa_r+0x2fc>)
 800e58c:	f001 fac8 	bl	800fb20 <__assert_func>
 800e590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e594:	6005      	str	r5, [r0, #0]
 800e596:	60c5      	str	r5, [r0, #12]
 800e598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e59a:	6819      	ldr	r1, [r3, #0]
 800e59c:	b151      	cbz	r1, 800e5b4 <_dtoa_r+0x5c>
 800e59e:	685a      	ldr	r2, [r3, #4]
 800e5a0:	604a      	str	r2, [r1, #4]
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	4093      	lsls	r3, r2
 800e5a6:	608b      	str	r3, [r1, #8]
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f000 fe11 	bl	800f1d0 <_Bfree>
 800e5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	601a      	str	r2, [r3, #0]
 800e5b4:	1e3b      	subs	r3, r7, #0
 800e5b6:	bfb9      	ittee	lt
 800e5b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e5bc:	9303      	strlt	r3, [sp, #12]
 800e5be:	2300      	movge	r3, #0
 800e5c0:	f8c8 3000 	strge.w	r3, [r8]
 800e5c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e5c8:	4ba3      	ldr	r3, [pc, #652]	; (800e858 <_dtoa_r+0x300>)
 800e5ca:	bfbc      	itt	lt
 800e5cc:	2201      	movlt	r2, #1
 800e5ce:	f8c8 2000 	strlt.w	r2, [r8]
 800e5d2:	ea33 0309 	bics.w	r3, r3, r9
 800e5d6:	d11b      	bne.n	800e610 <_dtoa_r+0xb8>
 800e5d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5da:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5e4:	4333      	orrs	r3, r6
 800e5e6:	f000 857a 	beq.w	800f0de <_dtoa_r+0xb86>
 800e5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5ec:	b963      	cbnz	r3, 800e608 <_dtoa_r+0xb0>
 800e5ee:	4b9b      	ldr	r3, [pc, #620]	; (800e85c <_dtoa_r+0x304>)
 800e5f0:	e024      	b.n	800e63c <_dtoa_r+0xe4>
 800e5f2:	4b9b      	ldr	r3, [pc, #620]	; (800e860 <_dtoa_r+0x308>)
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	3308      	adds	r3, #8
 800e5f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	9800      	ldr	r0, [sp, #0]
 800e5fe:	b015      	add	sp, #84	; 0x54
 800e600:	ecbd 8b02 	vpop	{d8}
 800e604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e608:	4b94      	ldr	r3, [pc, #592]	; (800e85c <_dtoa_r+0x304>)
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	3303      	adds	r3, #3
 800e60e:	e7f3      	b.n	800e5f8 <_dtoa_r+0xa0>
 800e610:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e614:	2200      	movs	r2, #0
 800e616:	ec51 0b17 	vmov	r0, r1, d7
 800e61a:	2300      	movs	r3, #0
 800e61c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e620:	f7f2 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 800e624:	4680      	mov	r8, r0
 800e626:	b158      	cbz	r0, 800e640 <_dtoa_r+0xe8>
 800e628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e62a:	2301      	movs	r3, #1
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 8551 	beq.w	800f0d8 <_dtoa_r+0xb80>
 800e636:	488b      	ldr	r0, [pc, #556]	; (800e864 <_dtoa_r+0x30c>)
 800e638:	6018      	str	r0, [r3, #0]
 800e63a:	1e43      	subs	r3, r0, #1
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	e7dd      	b.n	800e5fc <_dtoa_r+0xa4>
 800e640:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e644:	aa12      	add	r2, sp, #72	; 0x48
 800e646:	a913      	add	r1, sp, #76	; 0x4c
 800e648:	4620      	mov	r0, r4
 800e64a:	f001 f8a3 	bl	800f794 <__d2b>
 800e64e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e652:	4683      	mov	fp, r0
 800e654:	2d00      	cmp	r5, #0
 800e656:	d07c      	beq.n	800e752 <_dtoa_r+0x1fa>
 800e658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e65a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e65e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e662:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e666:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e672:	4b7d      	ldr	r3, [pc, #500]	; (800e868 <_dtoa_r+0x310>)
 800e674:	2200      	movs	r2, #0
 800e676:	4630      	mov	r0, r6
 800e678:	4639      	mov	r1, r7
 800e67a:	f7f1 fe05 	bl	8000288 <__aeabi_dsub>
 800e67e:	a36e      	add	r3, pc, #440	; (adr r3, 800e838 <_dtoa_r+0x2e0>)
 800e680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e684:	f7f1 ffb8 	bl	80005f8 <__aeabi_dmul>
 800e688:	a36d      	add	r3, pc, #436	; (adr r3, 800e840 <_dtoa_r+0x2e8>)
 800e68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68e:	f7f1 fdfd 	bl	800028c <__adddf3>
 800e692:	4606      	mov	r6, r0
 800e694:	4628      	mov	r0, r5
 800e696:	460f      	mov	r7, r1
 800e698:	f7f1 ff44 	bl	8000524 <__aeabi_i2d>
 800e69c:	a36a      	add	r3, pc, #424	; (adr r3, 800e848 <_dtoa_r+0x2f0>)
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	f7f1 ffa9 	bl	80005f8 <__aeabi_dmul>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	f7f1 fded 	bl	800028c <__adddf3>
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	460f      	mov	r7, r1
 800e6b6:	f7f2 fa4f 	bl	8000b58 <__aeabi_d2iz>
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	4682      	mov	sl, r0
 800e6be:	2300      	movs	r3, #0
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	4639      	mov	r1, r7
 800e6c4:	f7f2 fa0a 	bl	8000adc <__aeabi_dcmplt>
 800e6c8:	b148      	cbz	r0, 800e6de <_dtoa_r+0x186>
 800e6ca:	4650      	mov	r0, sl
 800e6cc:	f7f1 ff2a 	bl	8000524 <__aeabi_i2d>
 800e6d0:	4632      	mov	r2, r6
 800e6d2:	463b      	mov	r3, r7
 800e6d4:	f7f2 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6d8:	b908      	cbnz	r0, 800e6de <_dtoa_r+0x186>
 800e6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6de:	f1ba 0f16 	cmp.w	sl, #22
 800e6e2:	d854      	bhi.n	800e78e <_dtoa_r+0x236>
 800e6e4:	4b61      	ldr	r3, [pc, #388]	; (800e86c <_dtoa_r+0x314>)
 800e6e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e6f2:	f7f2 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d04b      	beq.n	800e792 <_dtoa_r+0x23a>
 800e6fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6fe:	2300      	movs	r3, #0
 800e700:	930e      	str	r3, [sp, #56]	; 0x38
 800e702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e704:	1b5d      	subs	r5, r3, r5
 800e706:	1e6b      	subs	r3, r5, #1
 800e708:	9304      	str	r3, [sp, #16]
 800e70a:	bf43      	ittte	mi
 800e70c:	2300      	movmi	r3, #0
 800e70e:	f1c5 0801 	rsbmi	r8, r5, #1
 800e712:	9304      	strmi	r3, [sp, #16]
 800e714:	f04f 0800 	movpl.w	r8, #0
 800e718:	f1ba 0f00 	cmp.w	sl, #0
 800e71c:	db3b      	blt.n	800e796 <_dtoa_r+0x23e>
 800e71e:	9b04      	ldr	r3, [sp, #16]
 800e720:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e724:	4453      	add	r3, sl
 800e726:	9304      	str	r3, [sp, #16]
 800e728:	2300      	movs	r3, #0
 800e72a:	9306      	str	r3, [sp, #24]
 800e72c:	9b05      	ldr	r3, [sp, #20]
 800e72e:	2b09      	cmp	r3, #9
 800e730:	d869      	bhi.n	800e806 <_dtoa_r+0x2ae>
 800e732:	2b05      	cmp	r3, #5
 800e734:	bfc4      	itt	gt
 800e736:	3b04      	subgt	r3, #4
 800e738:	9305      	strgt	r3, [sp, #20]
 800e73a:	9b05      	ldr	r3, [sp, #20]
 800e73c:	f1a3 0302 	sub.w	r3, r3, #2
 800e740:	bfcc      	ite	gt
 800e742:	2500      	movgt	r5, #0
 800e744:	2501      	movle	r5, #1
 800e746:	2b03      	cmp	r3, #3
 800e748:	d869      	bhi.n	800e81e <_dtoa_r+0x2c6>
 800e74a:	e8df f003 	tbb	[pc, r3]
 800e74e:	4e2c      	.short	0x4e2c
 800e750:	5a4c      	.short	0x5a4c
 800e752:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e756:	441d      	add	r5, r3
 800e758:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e75c:	2b20      	cmp	r3, #32
 800e75e:	bfc1      	itttt	gt
 800e760:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e764:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e768:	fa09 f303 	lslgt.w	r3, r9, r3
 800e76c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e770:	bfda      	itte	le
 800e772:	f1c3 0320 	rsble	r3, r3, #32
 800e776:	fa06 f003 	lslle.w	r0, r6, r3
 800e77a:	4318      	orrgt	r0, r3
 800e77c:	f7f1 fec2 	bl	8000504 <__aeabi_ui2d>
 800e780:	2301      	movs	r3, #1
 800e782:	4606      	mov	r6, r0
 800e784:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e788:	3d01      	subs	r5, #1
 800e78a:	9310      	str	r3, [sp, #64]	; 0x40
 800e78c:	e771      	b.n	800e672 <_dtoa_r+0x11a>
 800e78e:	2301      	movs	r3, #1
 800e790:	e7b6      	b.n	800e700 <_dtoa_r+0x1a8>
 800e792:	900e      	str	r0, [sp, #56]	; 0x38
 800e794:	e7b5      	b.n	800e702 <_dtoa_r+0x1aa>
 800e796:	f1ca 0300 	rsb	r3, sl, #0
 800e79a:	9306      	str	r3, [sp, #24]
 800e79c:	2300      	movs	r3, #0
 800e79e:	eba8 080a 	sub.w	r8, r8, sl
 800e7a2:	930d      	str	r3, [sp, #52]	; 0x34
 800e7a4:	e7c2      	b.n	800e72c <_dtoa_r+0x1d4>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9308      	str	r3, [sp, #32]
 800e7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	dc39      	bgt.n	800e824 <_dtoa_r+0x2cc>
 800e7b0:	f04f 0901 	mov.w	r9, #1
 800e7b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7b8:	464b      	mov	r3, r9
 800e7ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e7be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	6042      	str	r2, [r0, #4]
 800e7c4:	2204      	movs	r2, #4
 800e7c6:	f102 0614 	add.w	r6, r2, #20
 800e7ca:	429e      	cmp	r6, r3
 800e7cc:	6841      	ldr	r1, [r0, #4]
 800e7ce:	d92f      	bls.n	800e830 <_dtoa_r+0x2d8>
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f000 fcbd 	bl	800f150 <_Balloc>
 800e7d6:	9000      	str	r0, [sp, #0]
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d14b      	bne.n	800e874 <_dtoa_r+0x31c>
 800e7dc:	4b24      	ldr	r3, [pc, #144]	; (800e870 <_dtoa_r+0x318>)
 800e7de:	4602      	mov	r2, r0
 800e7e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e7e4:	e6d1      	b.n	800e58a <_dtoa_r+0x32>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e7de      	b.n	800e7a8 <_dtoa_r+0x250>
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	9308      	str	r3, [sp, #32]
 800e7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f0:	eb0a 0903 	add.w	r9, sl, r3
 800e7f4:	f109 0301 	add.w	r3, r9, #1
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	9301      	str	r3, [sp, #4]
 800e7fc:	bfb8      	it	lt
 800e7fe:	2301      	movlt	r3, #1
 800e800:	e7dd      	b.n	800e7be <_dtoa_r+0x266>
 800e802:	2301      	movs	r3, #1
 800e804:	e7f2      	b.n	800e7ec <_dtoa_r+0x294>
 800e806:	2501      	movs	r5, #1
 800e808:	2300      	movs	r3, #0
 800e80a:	9305      	str	r3, [sp, #20]
 800e80c:	9508      	str	r5, [sp, #32]
 800e80e:	f04f 39ff 	mov.w	r9, #4294967295
 800e812:	2200      	movs	r2, #0
 800e814:	f8cd 9004 	str.w	r9, [sp, #4]
 800e818:	2312      	movs	r3, #18
 800e81a:	9209      	str	r2, [sp, #36]	; 0x24
 800e81c:	e7cf      	b.n	800e7be <_dtoa_r+0x266>
 800e81e:	2301      	movs	r3, #1
 800e820:	9308      	str	r3, [sp, #32]
 800e822:	e7f4      	b.n	800e80e <_dtoa_r+0x2b6>
 800e824:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e828:	f8cd 9004 	str.w	r9, [sp, #4]
 800e82c:	464b      	mov	r3, r9
 800e82e:	e7c6      	b.n	800e7be <_dtoa_r+0x266>
 800e830:	3101      	adds	r1, #1
 800e832:	6041      	str	r1, [r0, #4]
 800e834:	0052      	lsls	r2, r2, #1
 800e836:	e7c6      	b.n	800e7c6 <_dtoa_r+0x26e>
 800e838:	636f4361 	.word	0x636f4361
 800e83c:	3fd287a7 	.word	0x3fd287a7
 800e840:	8b60c8b3 	.word	0x8b60c8b3
 800e844:	3fc68a28 	.word	0x3fc68a28
 800e848:	509f79fb 	.word	0x509f79fb
 800e84c:	3fd34413 	.word	0x3fd34413
 800e850:	080116b5 	.word	0x080116b5
 800e854:	080116cc 	.word	0x080116cc
 800e858:	7ff00000 	.word	0x7ff00000
 800e85c:	080116b1 	.word	0x080116b1
 800e860:	080116a8 	.word	0x080116a8
 800e864:	08011685 	.word	0x08011685
 800e868:	3ff80000 	.word	0x3ff80000
 800e86c:	080117c8 	.word	0x080117c8
 800e870:	0801172b 	.word	0x0801172b
 800e874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e876:	9a00      	ldr	r2, [sp, #0]
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	9b01      	ldr	r3, [sp, #4]
 800e87c:	2b0e      	cmp	r3, #14
 800e87e:	f200 80ad 	bhi.w	800e9dc <_dtoa_r+0x484>
 800e882:	2d00      	cmp	r5, #0
 800e884:	f000 80aa 	beq.w	800e9dc <_dtoa_r+0x484>
 800e888:	f1ba 0f00 	cmp.w	sl, #0
 800e88c:	dd36      	ble.n	800e8fc <_dtoa_r+0x3a4>
 800e88e:	4ac3      	ldr	r2, [pc, #780]	; (800eb9c <_dtoa_r+0x644>)
 800e890:	f00a 030f 	and.w	r3, sl, #15
 800e894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e898:	ed93 7b00 	vldr	d7, [r3]
 800e89c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e8a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e8a4:	eeb0 8a47 	vmov.f32	s16, s14
 800e8a8:	eef0 8a67 	vmov.f32	s17, s15
 800e8ac:	d016      	beq.n	800e8dc <_dtoa_r+0x384>
 800e8ae:	4bbc      	ldr	r3, [pc, #752]	; (800eba0 <_dtoa_r+0x648>)
 800e8b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8b8:	f7f1 ffc8 	bl	800084c <__aeabi_ddiv>
 800e8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8c0:	f007 070f 	and.w	r7, r7, #15
 800e8c4:	2503      	movs	r5, #3
 800e8c6:	4eb6      	ldr	r6, [pc, #728]	; (800eba0 <_dtoa_r+0x648>)
 800e8c8:	b957      	cbnz	r7, 800e8e0 <_dtoa_r+0x388>
 800e8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ce:	ec53 2b18 	vmov	r2, r3, d8
 800e8d2:	f7f1 ffbb 	bl	800084c <__aeabi_ddiv>
 800e8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8da:	e029      	b.n	800e930 <_dtoa_r+0x3d8>
 800e8dc:	2502      	movs	r5, #2
 800e8de:	e7f2      	b.n	800e8c6 <_dtoa_r+0x36e>
 800e8e0:	07f9      	lsls	r1, r7, #31
 800e8e2:	d508      	bpl.n	800e8f6 <_dtoa_r+0x39e>
 800e8e4:	ec51 0b18 	vmov	r0, r1, d8
 800e8e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8ec:	f7f1 fe84 	bl	80005f8 <__aeabi_dmul>
 800e8f0:	ec41 0b18 	vmov	d8, r0, r1
 800e8f4:	3501      	adds	r5, #1
 800e8f6:	107f      	asrs	r7, r7, #1
 800e8f8:	3608      	adds	r6, #8
 800e8fa:	e7e5      	b.n	800e8c8 <_dtoa_r+0x370>
 800e8fc:	f000 80a6 	beq.w	800ea4c <_dtoa_r+0x4f4>
 800e900:	f1ca 0600 	rsb	r6, sl, #0
 800e904:	4ba5      	ldr	r3, [pc, #660]	; (800eb9c <_dtoa_r+0x644>)
 800e906:	4fa6      	ldr	r7, [pc, #664]	; (800eba0 <_dtoa_r+0x648>)
 800e908:	f006 020f 	and.w	r2, r6, #15
 800e90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e918:	f7f1 fe6e 	bl	80005f8 <__aeabi_dmul>
 800e91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e920:	1136      	asrs	r6, r6, #4
 800e922:	2300      	movs	r3, #0
 800e924:	2502      	movs	r5, #2
 800e926:	2e00      	cmp	r6, #0
 800e928:	f040 8085 	bne.w	800ea36 <_dtoa_r+0x4de>
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d1d2      	bne.n	800e8d6 <_dtoa_r+0x37e>
 800e930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 808c 	beq.w	800ea50 <_dtoa_r+0x4f8>
 800e938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e93c:	4b99      	ldr	r3, [pc, #612]	; (800eba4 <_dtoa_r+0x64c>)
 800e93e:	2200      	movs	r2, #0
 800e940:	4630      	mov	r0, r6
 800e942:	4639      	mov	r1, r7
 800e944:	f7f2 f8ca 	bl	8000adc <__aeabi_dcmplt>
 800e948:	2800      	cmp	r0, #0
 800e94a:	f000 8081 	beq.w	800ea50 <_dtoa_r+0x4f8>
 800e94e:	9b01      	ldr	r3, [sp, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d07d      	beq.n	800ea50 <_dtoa_r+0x4f8>
 800e954:	f1b9 0f00 	cmp.w	r9, #0
 800e958:	dd3c      	ble.n	800e9d4 <_dtoa_r+0x47c>
 800e95a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e95e:	9307      	str	r3, [sp, #28]
 800e960:	2200      	movs	r2, #0
 800e962:	4b91      	ldr	r3, [pc, #580]	; (800eba8 <_dtoa_r+0x650>)
 800e964:	4630      	mov	r0, r6
 800e966:	4639      	mov	r1, r7
 800e968:	f7f1 fe46 	bl	80005f8 <__aeabi_dmul>
 800e96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e970:	3501      	adds	r5, #1
 800e972:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e97a:	4628      	mov	r0, r5
 800e97c:	f7f1 fdd2 	bl	8000524 <__aeabi_i2d>
 800e980:	4632      	mov	r2, r6
 800e982:	463b      	mov	r3, r7
 800e984:	f7f1 fe38 	bl	80005f8 <__aeabi_dmul>
 800e988:	4b88      	ldr	r3, [pc, #544]	; (800ebac <_dtoa_r+0x654>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	f7f1 fc7e 	bl	800028c <__adddf3>
 800e990:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e998:	9303      	str	r3, [sp, #12]
 800e99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d15c      	bne.n	800ea5a <_dtoa_r+0x502>
 800e9a0:	4b83      	ldr	r3, [pc, #524]	; (800ebb0 <_dtoa_r+0x658>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	f7f1 fc6e 	bl	8000288 <__aeabi_dsub>
 800e9ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9b0:	4606      	mov	r6, r0
 800e9b2:	460f      	mov	r7, r1
 800e9b4:	f7f2 f8b0 	bl	8000b18 <__aeabi_dcmpgt>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	f040 8296 	bne.w	800eeea <_dtoa_r+0x992>
 800e9be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	f7f2 f887 	bl	8000adc <__aeabi_dcmplt>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	f040 8288 	bne.w	800eee4 <_dtoa_r+0x98c>
 800e9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f2c0 8158 	blt.w	800ec94 <_dtoa_r+0x73c>
 800e9e4:	f1ba 0f0e 	cmp.w	sl, #14
 800e9e8:	f300 8154 	bgt.w	800ec94 <_dtoa_r+0x73c>
 800e9ec:	4b6b      	ldr	r3, [pc, #428]	; (800eb9c <_dtoa_r+0x644>)
 800e9ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f280 80e3 	bge.w	800ebc4 <_dtoa_r+0x66c>
 800e9fe:	9b01      	ldr	r3, [sp, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f300 80df 	bgt.w	800ebc4 <_dtoa_r+0x66c>
 800ea06:	f040 826d 	bne.w	800eee4 <_dtoa_r+0x98c>
 800ea0a:	4b69      	ldr	r3, [pc, #420]	; (800ebb0 <_dtoa_r+0x658>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	4640      	mov	r0, r8
 800ea10:	4649      	mov	r1, r9
 800ea12:	f7f1 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ea16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea1a:	f7f2 f873 	bl	8000b04 <__aeabi_dcmpge>
 800ea1e:	9e01      	ldr	r6, [sp, #4]
 800ea20:	4637      	mov	r7, r6
 800ea22:	2800      	cmp	r0, #0
 800ea24:	f040 8243 	bne.w	800eeae <_dtoa_r+0x956>
 800ea28:	9d00      	ldr	r5, [sp, #0]
 800ea2a:	2331      	movs	r3, #49	; 0x31
 800ea2c:	f805 3b01 	strb.w	r3, [r5], #1
 800ea30:	f10a 0a01 	add.w	sl, sl, #1
 800ea34:	e23f      	b.n	800eeb6 <_dtoa_r+0x95e>
 800ea36:	07f2      	lsls	r2, r6, #31
 800ea38:	d505      	bpl.n	800ea46 <_dtoa_r+0x4ee>
 800ea3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea3e:	f7f1 fddb 	bl	80005f8 <__aeabi_dmul>
 800ea42:	3501      	adds	r5, #1
 800ea44:	2301      	movs	r3, #1
 800ea46:	1076      	asrs	r6, r6, #1
 800ea48:	3708      	adds	r7, #8
 800ea4a:	e76c      	b.n	800e926 <_dtoa_r+0x3ce>
 800ea4c:	2502      	movs	r5, #2
 800ea4e:	e76f      	b.n	800e930 <_dtoa_r+0x3d8>
 800ea50:	9b01      	ldr	r3, [sp, #4]
 800ea52:	f8cd a01c 	str.w	sl, [sp, #28]
 800ea56:	930c      	str	r3, [sp, #48]	; 0x30
 800ea58:	e78d      	b.n	800e976 <_dtoa_r+0x41e>
 800ea5a:	9900      	ldr	r1, [sp, #0]
 800ea5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea60:	4b4e      	ldr	r3, [pc, #312]	; (800eb9c <_dtoa_r+0x644>)
 800ea62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea66:	4401      	add	r1, r0
 800ea68:	9102      	str	r1, [sp, #8]
 800ea6a:	9908      	ldr	r1, [sp, #32]
 800ea6c:	eeb0 8a47 	vmov.f32	s16, s14
 800ea70:	eef0 8a67 	vmov.f32	s17, s15
 800ea74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea7c:	2900      	cmp	r1, #0
 800ea7e:	d045      	beq.n	800eb0c <_dtoa_r+0x5b4>
 800ea80:	494c      	ldr	r1, [pc, #304]	; (800ebb4 <_dtoa_r+0x65c>)
 800ea82:	2000      	movs	r0, #0
 800ea84:	f7f1 fee2 	bl	800084c <__aeabi_ddiv>
 800ea88:	ec53 2b18 	vmov	r2, r3, d8
 800ea8c:	f7f1 fbfc 	bl	8000288 <__aeabi_dsub>
 800ea90:	9d00      	ldr	r5, [sp, #0]
 800ea92:	ec41 0b18 	vmov	d8, r0, r1
 800ea96:	4639      	mov	r1, r7
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f7f2 f85d 	bl	8000b58 <__aeabi_d2iz>
 800ea9e:	900c      	str	r0, [sp, #48]	; 0x30
 800eaa0:	f7f1 fd40 	bl	8000524 <__aeabi_i2d>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	4639      	mov	r1, r7
 800eaac:	f7f1 fbec 	bl	8000288 <__aeabi_dsub>
 800eab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eab2:	3330      	adds	r3, #48	; 0x30
 800eab4:	f805 3b01 	strb.w	r3, [r5], #1
 800eab8:	ec53 2b18 	vmov	r2, r3, d8
 800eabc:	4606      	mov	r6, r0
 800eabe:	460f      	mov	r7, r1
 800eac0:	f7f2 f80c 	bl	8000adc <__aeabi_dcmplt>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d165      	bne.n	800eb94 <_dtoa_r+0x63c>
 800eac8:	4632      	mov	r2, r6
 800eaca:	463b      	mov	r3, r7
 800eacc:	4935      	ldr	r1, [pc, #212]	; (800eba4 <_dtoa_r+0x64c>)
 800eace:	2000      	movs	r0, #0
 800ead0:	f7f1 fbda 	bl	8000288 <__aeabi_dsub>
 800ead4:	ec53 2b18 	vmov	r2, r3, d8
 800ead8:	f7f2 f800 	bl	8000adc <__aeabi_dcmplt>
 800eadc:	2800      	cmp	r0, #0
 800eade:	f040 80b9 	bne.w	800ec54 <_dtoa_r+0x6fc>
 800eae2:	9b02      	ldr	r3, [sp, #8]
 800eae4:	429d      	cmp	r5, r3
 800eae6:	f43f af75 	beq.w	800e9d4 <_dtoa_r+0x47c>
 800eaea:	4b2f      	ldr	r3, [pc, #188]	; (800eba8 <_dtoa_r+0x650>)
 800eaec:	ec51 0b18 	vmov	r0, r1, d8
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f7f1 fd81 	bl	80005f8 <__aeabi_dmul>
 800eaf6:	4b2c      	ldr	r3, [pc, #176]	; (800eba8 <_dtoa_r+0x650>)
 800eaf8:	ec41 0b18 	vmov	d8, r0, r1
 800eafc:	2200      	movs	r2, #0
 800eafe:	4630      	mov	r0, r6
 800eb00:	4639      	mov	r1, r7
 800eb02:	f7f1 fd79 	bl	80005f8 <__aeabi_dmul>
 800eb06:	4606      	mov	r6, r0
 800eb08:	460f      	mov	r7, r1
 800eb0a:	e7c4      	b.n	800ea96 <_dtoa_r+0x53e>
 800eb0c:	ec51 0b17 	vmov	r0, r1, d7
 800eb10:	f7f1 fd72 	bl	80005f8 <__aeabi_dmul>
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	9d00      	ldr	r5, [sp, #0]
 800eb18:	930c      	str	r3, [sp, #48]	; 0x30
 800eb1a:	ec41 0b18 	vmov	d8, r0, r1
 800eb1e:	4639      	mov	r1, r7
 800eb20:	4630      	mov	r0, r6
 800eb22:	f7f2 f819 	bl	8000b58 <__aeabi_d2iz>
 800eb26:	9011      	str	r0, [sp, #68]	; 0x44
 800eb28:	f7f1 fcfc 	bl	8000524 <__aeabi_i2d>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4630      	mov	r0, r6
 800eb32:	4639      	mov	r1, r7
 800eb34:	f7f1 fba8 	bl	8000288 <__aeabi_dsub>
 800eb38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb3a:	3330      	adds	r3, #48	; 0x30
 800eb3c:	f805 3b01 	strb.w	r3, [r5], #1
 800eb40:	9b02      	ldr	r3, [sp, #8]
 800eb42:	429d      	cmp	r5, r3
 800eb44:	4606      	mov	r6, r0
 800eb46:	460f      	mov	r7, r1
 800eb48:	f04f 0200 	mov.w	r2, #0
 800eb4c:	d134      	bne.n	800ebb8 <_dtoa_r+0x660>
 800eb4e:	4b19      	ldr	r3, [pc, #100]	; (800ebb4 <_dtoa_r+0x65c>)
 800eb50:	ec51 0b18 	vmov	r0, r1, d8
 800eb54:	f7f1 fb9a 	bl	800028c <__adddf3>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	4639      	mov	r1, r7
 800eb60:	f7f1 ffda 	bl	8000b18 <__aeabi_dcmpgt>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d175      	bne.n	800ec54 <_dtoa_r+0x6fc>
 800eb68:	ec53 2b18 	vmov	r2, r3, d8
 800eb6c:	4911      	ldr	r1, [pc, #68]	; (800ebb4 <_dtoa_r+0x65c>)
 800eb6e:	2000      	movs	r0, #0
 800eb70:	f7f1 fb8a 	bl	8000288 <__aeabi_dsub>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4630      	mov	r0, r6
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	f7f1 ffae 	bl	8000adc <__aeabi_dcmplt>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	f43f af27 	beq.w	800e9d4 <_dtoa_r+0x47c>
 800eb86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb88:	1e6b      	subs	r3, r5, #1
 800eb8a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb90:	2b30      	cmp	r3, #48	; 0x30
 800eb92:	d0f8      	beq.n	800eb86 <_dtoa_r+0x62e>
 800eb94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eb98:	e04a      	b.n	800ec30 <_dtoa_r+0x6d8>
 800eb9a:	bf00      	nop
 800eb9c:	080117c8 	.word	0x080117c8
 800eba0:	080117a0 	.word	0x080117a0
 800eba4:	3ff00000 	.word	0x3ff00000
 800eba8:	40240000 	.word	0x40240000
 800ebac:	401c0000 	.word	0x401c0000
 800ebb0:	40140000 	.word	0x40140000
 800ebb4:	3fe00000 	.word	0x3fe00000
 800ebb8:	4baf      	ldr	r3, [pc, #700]	; (800ee78 <_dtoa_r+0x920>)
 800ebba:	f7f1 fd1d 	bl	80005f8 <__aeabi_dmul>
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	460f      	mov	r7, r1
 800ebc2:	e7ac      	b.n	800eb1e <_dtoa_r+0x5c6>
 800ebc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ebc8:	9d00      	ldr	r5, [sp, #0]
 800ebca:	4642      	mov	r2, r8
 800ebcc:	464b      	mov	r3, r9
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7f1 fe3b 	bl	800084c <__aeabi_ddiv>
 800ebd6:	f7f1 ffbf 	bl	8000b58 <__aeabi_d2iz>
 800ebda:	9002      	str	r0, [sp, #8]
 800ebdc:	f7f1 fca2 	bl	8000524 <__aeabi_i2d>
 800ebe0:	4642      	mov	r2, r8
 800ebe2:	464b      	mov	r3, r9
 800ebe4:	f7f1 fd08 	bl	80005f8 <__aeabi_dmul>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	460b      	mov	r3, r1
 800ebec:	4630      	mov	r0, r6
 800ebee:	4639      	mov	r1, r7
 800ebf0:	f7f1 fb4a 	bl	8000288 <__aeabi_dsub>
 800ebf4:	9e02      	ldr	r6, [sp, #8]
 800ebf6:	9f01      	ldr	r7, [sp, #4]
 800ebf8:	3630      	adds	r6, #48	; 0x30
 800ebfa:	f805 6b01 	strb.w	r6, [r5], #1
 800ebfe:	9e00      	ldr	r6, [sp, #0]
 800ec00:	1bae      	subs	r6, r5, r6
 800ec02:	42b7      	cmp	r7, r6
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	d137      	bne.n	800ec7a <_dtoa_r+0x722>
 800ec0a:	f7f1 fb3f 	bl	800028c <__adddf3>
 800ec0e:	4642      	mov	r2, r8
 800ec10:	464b      	mov	r3, r9
 800ec12:	4606      	mov	r6, r0
 800ec14:	460f      	mov	r7, r1
 800ec16:	f7f1 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 800ec1a:	b9c8      	cbnz	r0, 800ec50 <_dtoa_r+0x6f8>
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	464b      	mov	r3, r9
 800ec20:	4630      	mov	r0, r6
 800ec22:	4639      	mov	r1, r7
 800ec24:	f7f1 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec28:	b110      	cbz	r0, 800ec30 <_dtoa_r+0x6d8>
 800ec2a:	9b02      	ldr	r3, [sp, #8]
 800ec2c:	07d9      	lsls	r1, r3, #31
 800ec2e:	d40f      	bmi.n	800ec50 <_dtoa_r+0x6f8>
 800ec30:	4620      	mov	r0, r4
 800ec32:	4659      	mov	r1, fp
 800ec34:	f000 facc 	bl	800f1d0 <_Bfree>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	702b      	strb	r3, [r5, #0]
 800ec3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec3e:	f10a 0001 	add.w	r0, sl, #1
 800ec42:	6018      	str	r0, [r3, #0]
 800ec44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f43f acd8 	beq.w	800e5fc <_dtoa_r+0xa4>
 800ec4c:	601d      	str	r5, [r3, #0]
 800ec4e:	e4d5      	b.n	800e5fc <_dtoa_r+0xa4>
 800ec50:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec54:	462b      	mov	r3, r5
 800ec56:	461d      	mov	r5, r3
 800ec58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec5c:	2a39      	cmp	r2, #57	; 0x39
 800ec5e:	d108      	bne.n	800ec72 <_dtoa_r+0x71a>
 800ec60:	9a00      	ldr	r2, [sp, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d1f7      	bne.n	800ec56 <_dtoa_r+0x6fe>
 800ec66:	9a07      	ldr	r2, [sp, #28]
 800ec68:	9900      	ldr	r1, [sp, #0]
 800ec6a:	3201      	adds	r2, #1
 800ec6c:	9207      	str	r2, [sp, #28]
 800ec6e:	2230      	movs	r2, #48	; 0x30
 800ec70:	700a      	strb	r2, [r1, #0]
 800ec72:	781a      	ldrb	r2, [r3, #0]
 800ec74:	3201      	adds	r2, #1
 800ec76:	701a      	strb	r2, [r3, #0]
 800ec78:	e78c      	b.n	800eb94 <_dtoa_r+0x63c>
 800ec7a:	4b7f      	ldr	r3, [pc, #508]	; (800ee78 <_dtoa_r+0x920>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f7f1 fcbb 	bl	80005f8 <__aeabi_dmul>
 800ec82:	2200      	movs	r2, #0
 800ec84:	2300      	movs	r3, #0
 800ec86:	4606      	mov	r6, r0
 800ec88:	460f      	mov	r7, r1
 800ec8a:	f7f1 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d09b      	beq.n	800ebca <_dtoa_r+0x672>
 800ec92:	e7cd      	b.n	800ec30 <_dtoa_r+0x6d8>
 800ec94:	9a08      	ldr	r2, [sp, #32]
 800ec96:	2a00      	cmp	r2, #0
 800ec98:	f000 80c4 	beq.w	800ee24 <_dtoa_r+0x8cc>
 800ec9c:	9a05      	ldr	r2, [sp, #20]
 800ec9e:	2a01      	cmp	r2, #1
 800eca0:	f300 80a8 	bgt.w	800edf4 <_dtoa_r+0x89c>
 800eca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eca6:	2a00      	cmp	r2, #0
 800eca8:	f000 80a0 	beq.w	800edec <_dtoa_r+0x894>
 800ecac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ecb0:	9e06      	ldr	r6, [sp, #24]
 800ecb2:	4645      	mov	r5, r8
 800ecb4:	9a04      	ldr	r2, [sp, #16]
 800ecb6:	2101      	movs	r1, #1
 800ecb8:	441a      	add	r2, r3
 800ecba:	4620      	mov	r0, r4
 800ecbc:	4498      	add	r8, r3
 800ecbe:	9204      	str	r2, [sp, #16]
 800ecc0:	f000 fb42 	bl	800f348 <__i2b>
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	2d00      	cmp	r5, #0
 800ecc8:	dd0b      	ble.n	800ece2 <_dtoa_r+0x78a>
 800ecca:	9b04      	ldr	r3, [sp, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dd08      	ble.n	800ece2 <_dtoa_r+0x78a>
 800ecd0:	42ab      	cmp	r3, r5
 800ecd2:	9a04      	ldr	r2, [sp, #16]
 800ecd4:	bfa8      	it	ge
 800ecd6:	462b      	movge	r3, r5
 800ecd8:	eba8 0803 	sub.w	r8, r8, r3
 800ecdc:	1aed      	subs	r5, r5, r3
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	9304      	str	r3, [sp, #16]
 800ece2:	9b06      	ldr	r3, [sp, #24]
 800ece4:	b1fb      	cbz	r3, 800ed26 <_dtoa_r+0x7ce>
 800ece6:	9b08      	ldr	r3, [sp, #32]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 809f 	beq.w	800ee2c <_dtoa_r+0x8d4>
 800ecee:	2e00      	cmp	r6, #0
 800ecf0:	dd11      	ble.n	800ed16 <_dtoa_r+0x7be>
 800ecf2:	4639      	mov	r1, r7
 800ecf4:	4632      	mov	r2, r6
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 fbe2 	bl	800f4c0 <__pow5mult>
 800ecfc:	465a      	mov	r2, fp
 800ecfe:	4601      	mov	r1, r0
 800ed00:	4607      	mov	r7, r0
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fb36 	bl	800f374 <__multiply>
 800ed08:	4659      	mov	r1, fp
 800ed0a:	9007      	str	r0, [sp, #28]
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f000 fa5f 	bl	800f1d0 <_Bfree>
 800ed12:	9b07      	ldr	r3, [sp, #28]
 800ed14:	469b      	mov	fp, r3
 800ed16:	9b06      	ldr	r3, [sp, #24]
 800ed18:	1b9a      	subs	r2, r3, r6
 800ed1a:	d004      	beq.n	800ed26 <_dtoa_r+0x7ce>
 800ed1c:	4659      	mov	r1, fp
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 fbce 	bl	800f4c0 <__pow5mult>
 800ed24:	4683      	mov	fp, r0
 800ed26:	2101      	movs	r1, #1
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f000 fb0d 	bl	800f348 <__i2b>
 800ed2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	4606      	mov	r6, r0
 800ed34:	dd7c      	ble.n	800ee30 <_dtoa_r+0x8d8>
 800ed36:	461a      	mov	r2, r3
 800ed38:	4601      	mov	r1, r0
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f000 fbc0 	bl	800f4c0 <__pow5mult>
 800ed40:	9b05      	ldr	r3, [sp, #20]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	4606      	mov	r6, r0
 800ed46:	dd76      	ble.n	800ee36 <_dtoa_r+0x8de>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	9306      	str	r3, [sp, #24]
 800ed4c:	6933      	ldr	r3, [r6, #16]
 800ed4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed52:	6918      	ldr	r0, [r3, #16]
 800ed54:	f000 faa8 	bl	800f2a8 <__hi0bits>
 800ed58:	f1c0 0020 	rsb	r0, r0, #32
 800ed5c:	9b04      	ldr	r3, [sp, #16]
 800ed5e:	4418      	add	r0, r3
 800ed60:	f010 001f 	ands.w	r0, r0, #31
 800ed64:	f000 8086 	beq.w	800ee74 <_dtoa_r+0x91c>
 800ed68:	f1c0 0320 	rsb	r3, r0, #32
 800ed6c:	2b04      	cmp	r3, #4
 800ed6e:	dd7f      	ble.n	800ee70 <_dtoa_r+0x918>
 800ed70:	f1c0 001c 	rsb	r0, r0, #28
 800ed74:	9b04      	ldr	r3, [sp, #16]
 800ed76:	4403      	add	r3, r0
 800ed78:	4480      	add	r8, r0
 800ed7a:	4405      	add	r5, r0
 800ed7c:	9304      	str	r3, [sp, #16]
 800ed7e:	f1b8 0f00 	cmp.w	r8, #0
 800ed82:	dd05      	ble.n	800ed90 <_dtoa_r+0x838>
 800ed84:	4659      	mov	r1, fp
 800ed86:	4642      	mov	r2, r8
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f000 fbf3 	bl	800f574 <__lshift>
 800ed8e:	4683      	mov	fp, r0
 800ed90:	9b04      	ldr	r3, [sp, #16]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	dd05      	ble.n	800eda2 <_dtoa_r+0x84a>
 800ed96:	4631      	mov	r1, r6
 800ed98:	461a      	mov	r2, r3
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 fbea 	bl	800f574 <__lshift>
 800eda0:	4606      	mov	r6, r0
 800eda2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d069      	beq.n	800ee7c <_dtoa_r+0x924>
 800eda8:	4631      	mov	r1, r6
 800edaa:	4658      	mov	r0, fp
 800edac:	f000 fc4e 	bl	800f64c <__mcmp>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	da63      	bge.n	800ee7c <_dtoa_r+0x924>
 800edb4:	2300      	movs	r3, #0
 800edb6:	4659      	mov	r1, fp
 800edb8:	220a      	movs	r2, #10
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 fa2a 	bl	800f214 <__multadd>
 800edc0:	9b08      	ldr	r3, [sp, #32]
 800edc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edc6:	4683      	mov	fp, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	f000 818f 	beq.w	800f0ec <_dtoa_r+0xb94>
 800edce:	4639      	mov	r1, r7
 800edd0:	2300      	movs	r3, #0
 800edd2:	220a      	movs	r2, #10
 800edd4:	4620      	mov	r0, r4
 800edd6:	f000 fa1d 	bl	800f214 <__multadd>
 800edda:	f1b9 0f00 	cmp.w	r9, #0
 800edde:	4607      	mov	r7, r0
 800ede0:	f300 808e 	bgt.w	800ef00 <_dtoa_r+0x9a8>
 800ede4:	9b05      	ldr	r3, [sp, #20]
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	dc50      	bgt.n	800ee8c <_dtoa_r+0x934>
 800edea:	e089      	b.n	800ef00 <_dtoa_r+0x9a8>
 800edec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800edf2:	e75d      	b.n	800ecb0 <_dtoa_r+0x758>
 800edf4:	9b01      	ldr	r3, [sp, #4]
 800edf6:	1e5e      	subs	r6, r3, #1
 800edf8:	9b06      	ldr	r3, [sp, #24]
 800edfa:	42b3      	cmp	r3, r6
 800edfc:	bfbf      	itttt	lt
 800edfe:	9b06      	ldrlt	r3, [sp, #24]
 800ee00:	9606      	strlt	r6, [sp, #24]
 800ee02:	1af2      	sublt	r2, r6, r3
 800ee04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ee06:	bfb6      	itet	lt
 800ee08:	189b      	addlt	r3, r3, r2
 800ee0a:	1b9e      	subge	r6, r3, r6
 800ee0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	bfb8      	it	lt
 800ee12:	2600      	movlt	r6, #0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	bfb5      	itete	lt
 800ee18:	eba8 0503 	sublt.w	r5, r8, r3
 800ee1c:	9b01      	ldrge	r3, [sp, #4]
 800ee1e:	2300      	movlt	r3, #0
 800ee20:	4645      	movge	r5, r8
 800ee22:	e747      	b.n	800ecb4 <_dtoa_r+0x75c>
 800ee24:	9e06      	ldr	r6, [sp, #24]
 800ee26:	9f08      	ldr	r7, [sp, #32]
 800ee28:	4645      	mov	r5, r8
 800ee2a:	e74c      	b.n	800ecc6 <_dtoa_r+0x76e>
 800ee2c:	9a06      	ldr	r2, [sp, #24]
 800ee2e:	e775      	b.n	800ed1c <_dtoa_r+0x7c4>
 800ee30:	9b05      	ldr	r3, [sp, #20]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	dc18      	bgt.n	800ee68 <_dtoa_r+0x910>
 800ee36:	9b02      	ldr	r3, [sp, #8]
 800ee38:	b9b3      	cbnz	r3, 800ee68 <_dtoa_r+0x910>
 800ee3a:	9b03      	ldr	r3, [sp, #12]
 800ee3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee40:	b9a3      	cbnz	r3, 800ee6c <_dtoa_r+0x914>
 800ee42:	9b03      	ldr	r3, [sp, #12]
 800ee44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee48:	0d1b      	lsrs	r3, r3, #20
 800ee4a:	051b      	lsls	r3, r3, #20
 800ee4c:	b12b      	cbz	r3, 800ee5a <_dtoa_r+0x902>
 800ee4e:	9b04      	ldr	r3, [sp, #16]
 800ee50:	3301      	adds	r3, #1
 800ee52:	9304      	str	r3, [sp, #16]
 800ee54:	f108 0801 	add.w	r8, r8, #1
 800ee58:	2301      	movs	r3, #1
 800ee5a:	9306      	str	r3, [sp, #24]
 800ee5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f47f af74 	bne.w	800ed4c <_dtoa_r+0x7f4>
 800ee64:	2001      	movs	r0, #1
 800ee66:	e779      	b.n	800ed5c <_dtoa_r+0x804>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	e7f6      	b.n	800ee5a <_dtoa_r+0x902>
 800ee6c:	9b02      	ldr	r3, [sp, #8]
 800ee6e:	e7f4      	b.n	800ee5a <_dtoa_r+0x902>
 800ee70:	d085      	beq.n	800ed7e <_dtoa_r+0x826>
 800ee72:	4618      	mov	r0, r3
 800ee74:	301c      	adds	r0, #28
 800ee76:	e77d      	b.n	800ed74 <_dtoa_r+0x81c>
 800ee78:	40240000 	.word	0x40240000
 800ee7c:	9b01      	ldr	r3, [sp, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	dc38      	bgt.n	800eef4 <_dtoa_r+0x99c>
 800ee82:	9b05      	ldr	r3, [sp, #20]
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	dd35      	ble.n	800eef4 <_dtoa_r+0x99c>
 800ee88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee8c:	f1b9 0f00 	cmp.w	r9, #0
 800ee90:	d10d      	bne.n	800eeae <_dtoa_r+0x956>
 800ee92:	4631      	mov	r1, r6
 800ee94:	464b      	mov	r3, r9
 800ee96:	2205      	movs	r2, #5
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f000 f9bb 	bl	800f214 <__multadd>
 800ee9e:	4601      	mov	r1, r0
 800eea0:	4606      	mov	r6, r0
 800eea2:	4658      	mov	r0, fp
 800eea4:	f000 fbd2 	bl	800f64c <__mcmp>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	f73f adbd 	bgt.w	800ea28 <_dtoa_r+0x4d0>
 800eeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb0:	9d00      	ldr	r5, [sp, #0]
 800eeb2:	ea6f 0a03 	mvn.w	sl, r3
 800eeb6:	f04f 0800 	mov.w	r8, #0
 800eeba:	4631      	mov	r1, r6
 800eebc:	4620      	mov	r0, r4
 800eebe:	f000 f987 	bl	800f1d0 <_Bfree>
 800eec2:	2f00      	cmp	r7, #0
 800eec4:	f43f aeb4 	beq.w	800ec30 <_dtoa_r+0x6d8>
 800eec8:	f1b8 0f00 	cmp.w	r8, #0
 800eecc:	d005      	beq.n	800eeda <_dtoa_r+0x982>
 800eece:	45b8      	cmp	r8, r7
 800eed0:	d003      	beq.n	800eeda <_dtoa_r+0x982>
 800eed2:	4641      	mov	r1, r8
 800eed4:	4620      	mov	r0, r4
 800eed6:	f000 f97b 	bl	800f1d0 <_Bfree>
 800eeda:	4639      	mov	r1, r7
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 f977 	bl	800f1d0 <_Bfree>
 800eee2:	e6a5      	b.n	800ec30 <_dtoa_r+0x6d8>
 800eee4:	2600      	movs	r6, #0
 800eee6:	4637      	mov	r7, r6
 800eee8:	e7e1      	b.n	800eeae <_dtoa_r+0x956>
 800eeea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eeec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eef0:	4637      	mov	r7, r6
 800eef2:	e599      	b.n	800ea28 <_dtoa_r+0x4d0>
 800eef4:	9b08      	ldr	r3, [sp, #32]
 800eef6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f000 80fd 	beq.w	800f0fa <_dtoa_r+0xba2>
 800ef00:	2d00      	cmp	r5, #0
 800ef02:	dd05      	ble.n	800ef10 <_dtoa_r+0x9b8>
 800ef04:	4639      	mov	r1, r7
 800ef06:	462a      	mov	r2, r5
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f000 fb33 	bl	800f574 <__lshift>
 800ef0e:	4607      	mov	r7, r0
 800ef10:	9b06      	ldr	r3, [sp, #24]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d05c      	beq.n	800efd0 <_dtoa_r+0xa78>
 800ef16:	6879      	ldr	r1, [r7, #4]
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 f919 	bl	800f150 <_Balloc>
 800ef1e:	4605      	mov	r5, r0
 800ef20:	b928      	cbnz	r0, 800ef2e <_dtoa_r+0x9d6>
 800ef22:	4b80      	ldr	r3, [pc, #512]	; (800f124 <_dtoa_r+0xbcc>)
 800ef24:	4602      	mov	r2, r0
 800ef26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef2a:	f7ff bb2e 	b.w	800e58a <_dtoa_r+0x32>
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	3202      	adds	r2, #2
 800ef32:	0092      	lsls	r2, r2, #2
 800ef34:	f107 010c 	add.w	r1, r7, #12
 800ef38:	300c      	adds	r0, #12
 800ef3a:	f7fe fd25 	bl	800d988 <memcpy>
 800ef3e:	2201      	movs	r2, #1
 800ef40:	4629      	mov	r1, r5
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 fb16 	bl	800f574 <__lshift>
 800ef48:	9b00      	ldr	r3, [sp, #0]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	9b00      	ldr	r3, [sp, #0]
 800ef50:	444b      	add	r3, r9
 800ef52:	9307      	str	r3, [sp, #28]
 800ef54:	9b02      	ldr	r3, [sp, #8]
 800ef56:	f003 0301 	and.w	r3, r3, #1
 800ef5a:	46b8      	mov	r8, r7
 800ef5c:	9306      	str	r3, [sp, #24]
 800ef5e:	4607      	mov	r7, r0
 800ef60:	9b01      	ldr	r3, [sp, #4]
 800ef62:	4631      	mov	r1, r6
 800ef64:	3b01      	subs	r3, #1
 800ef66:	4658      	mov	r0, fp
 800ef68:	9302      	str	r3, [sp, #8]
 800ef6a:	f7ff fa67 	bl	800e43c <quorem>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	3330      	adds	r3, #48	; 0x30
 800ef72:	9004      	str	r0, [sp, #16]
 800ef74:	4641      	mov	r1, r8
 800ef76:	4658      	mov	r0, fp
 800ef78:	9308      	str	r3, [sp, #32]
 800ef7a:	f000 fb67 	bl	800f64c <__mcmp>
 800ef7e:	463a      	mov	r2, r7
 800ef80:	4681      	mov	r9, r0
 800ef82:	4631      	mov	r1, r6
 800ef84:	4620      	mov	r0, r4
 800ef86:	f000 fb7d 	bl	800f684 <__mdiff>
 800ef8a:	68c2      	ldr	r2, [r0, #12]
 800ef8c:	9b08      	ldr	r3, [sp, #32]
 800ef8e:	4605      	mov	r5, r0
 800ef90:	bb02      	cbnz	r2, 800efd4 <_dtoa_r+0xa7c>
 800ef92:	4601      	mov	r1, r0
 800ef94:	4658      	mov	r0, fp
 800ef96:	f000 fb59 	bl	800f64c <__mcmp>
 800ef9a:	9b08      	ldr	r3, [sp, #32]
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	4629      	mov	r1, r5
 800efa0:	4620      	mov	r0, r4
 800efa2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800efa6:	f000 f913 	bl	800f1d0 <_Bfree>
 800efaa:	9b05      	ldr	r3, [sp, #20]
 800efac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efae:	9d01      	ldr	r5, [sp, #4]
 800efb0:	ea43 0102 	orr.w	r1, r3, r2
 800efb4:	9b06      	ldr	r3, [sp, #24]
 800efb6:	430b      	orrs	r3, r1
 800efb8:	9b08      	ldr	r3, [sp, #32]
 800efba:	d10d      	bne.n	800efd8 <_dtoa_r+0xa80>
 800efbc:	2b39      	cmp	r3, #57	; 0x39
 800efbe:	d029      	beq.n	800f014 <_dtoa_r+0xabc>
 800efc0:	f1b9 0f00 	cmp.w	r9, #0
 800efc4:	dd01      	ble.n	800efca <_dtoa_r+0xa72>
 800efc6:	9b04      	ldr	r3, [sp, #16]
 800efc8:	3331      	adds	r3, #49	; 0x31
 800efca:	9a02      	ldr	r2, [sp, #8]
 800efcc:	7013      	strb	r3, [r2, #0]
 800efce:	e774      	b.n	800eeba <_dtoa_r+0x962>
 800efd0:	4638      	mov	r0, r7
 800efd2:	e7b9      	b.n	800ef48 <_dtoa_r+0x9f0>
 800efd4:	2201      	movs	r2, #1
 800efd6:	e7e2      	b.n	800ef9e <_dtoa_r+0xa46>
 800efd8:	f1b9 0f00 	cmp.w	r9, #0
 800efdc:	db06      	blt.n	800efec <_dtoa_r+0xa94>
 800efde:	9905      	ldr	r1, [sp, #20]
 800efe0:	ea41 0909 	orr.w	r9, r1, r9
 800efe4:	9906      	ldr	r1, [sp, #24]
 800efe6:	ea59 0101 	orrs.w	r1, r9, r1
 800efea:	d120      	bne.n	800f02e <_dtoa_r+0xad6>
 800efec:	2a00      	cmp	r2, #0
 800efee:	ddec      	ble.n	800efca <_dtoa_r+0xa72>
 800eff0:	4659      	mov	r1, fp
 800eff2:	2201      	movs	r2, #1
 800eff4:	4620      	mov	r0, r4
 800eff6:	9301      	str	r3, [sp, #4]
 800eff8:	f000 fabc 	bl	800f574 <__lshift>
 800effc:	4631      	mov	r1, r6
 800effe:	4683      	mov	fp, r0
 800f000:	f000 fb24 	bl	800f64c <__mcmp>
 800f004:	2800      	cmp	r0, #0
 800f006:	9b01      	ldr	r3, [sp, #4]
 800f008:	dc02      	bgt.n	800f010 <_dtoa_r+0xab8>
 800f00a:	d1de      	bne.n	800efca <_dtoa_r+0xa72>
 800f00c:	07da      	lsls	r2, r3, #31
 800f00e:	d5dc      	bpl.n	800efca <_dtoa_r+0xa72>
 800f010:	2b39      	cmp	r3, #57	; 0x39
 800f012:	d1d8      	bne.n	800efc6 <_dtoa_r+0xa6e>
 800f014:	9a02      	ldr	r2, [sp, #8]
 800f016:	2339      	movs	r3, #57	; 0x39
 800f018:	7013      	strb	r3, [r2, #0]
 800f01a:	462b      	mov	r3, r5
 800f01c:	461d      	mov	r5, r3
 800f01e:	3b01      	subs	r3, #1
 800f020:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f024:	2a39      	cmp	r2, #57	; 0x39
 800f026:	d050      	beq.n	800f0ca <_dtoa_r+0xb72>
 800f028:	3201      	adds	r2, #1
 800f02a:	701a      	strb	r2, [r3, #0]
 800f02c:	e745      	b.n	800eeba <_dtoa_r+0x962>
 800f02e:	2a00      	cmp	r2, #0
 800f030:	dd03      	ble.n	800f03a <_dtoa_r+0xae2>
 800f032:	2b39      	cmp	r3, #57	; 0x39
 800f034:	d0ee      	beq.n	800f014 <_dtoa_r+0xabc>
 800f036:	3301      	adds	r3, #1
 800f038:	e7c7      	b.n	800efca <_dtoa_r+0xa72>
 800f03a:	9a01      	ldr	r2, [sp, #4]
 800f03c:	9907      	ldr	r1, [sp, #28]
 800f03e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f042:	428a      	cmp	r2, r1
 800f044:	d02a      	beq.n	800f09c <_dtoa_r+0xb44>
 800f046:	4659      	mov	r1, fp
 800f048:	2300      	movs	r3, #0
 800f04a:	220a      	movs	r2, #10
 800f04c:	4620      	mov	r0, r4
 800f04e:	f000 f8e1 	bl	800f214 <__multadd>
 800f052:	45b8      	cmp	r8, r7
 800f054:	4683      	mov	fp, r0
 800f056:	f04f 0300 	mov.w	r3, #0
 800f05a:	f04f 020a 	mov.w	r2, #10
 800f05e:	4641      	mov	r1, r8
 800f060:	4620      	mov	r0, r4
 800f062:	d107      	bne.n	800f074 <_dtoa_r+0xb1c>
 800f064:	f000 f8d6 	bl	800f214 <__multadd>
 800f068:	4680      	mov	r8, r0
 800f06a:	4607      	mov	r7, r0
 800f06c:	9b01      	ldr	r3, [sp, #4]
 800f06e:	3301      	adds	r3, #1
 800f070:	9301      	str	r3, [sp, #4]
 800f072:	e775      	b.n	800ef60 <_dtoa_r+0xa08>
 800f074:	f000 f8ce 	bl	800f214 <__multadd>
 800f078:	4639      	mov	r1, r7
 800f07a:	4680      	mov	r8, r0
 800f07c:	2300      	movs	r3, #0
 800f07e:	220a      	movs	r2, #10
 800f080:	4620      	mov	r0, r4
 800f082:	f000 f8c7 	bl	800f214 <__multadd>
 800f086:	4607      	mov	r7, r0
 800f088:	e7f0      	b.n	800f06c <_dtoa_r+0xb14>
 800f08a:	f1b9 0f00 	cmp.w	r9, #0
 800f08e:	9a00      	ldr	r2, [sp, #0]
 800f090:	bfcc      	ite	gt
 800f092:	464d      	movgt	r5, r9
 800f094:	2501      	movle	r5, #1
 800f096:	4415      	add	r5, r2
 800f098:	f04f 0800 	mov.w	r8, #0
 800f09c:	4659      	mov	r1, fp
 800f09e:	2201      	movs	r2, #1
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	9301      	str	r3, [sp, #4]
 800f0a4:	f000 fa66 	bl	800f574 <__lshift>
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	4683      	mov	fp, r0
 800f0ac:	f000 face 	bl	800f64c <__mcmp>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	dcb2      	bgt.n	800f01a <_dtoa_r+0xac2>
 800f0b4:	d102      	bne.n	800f0bc <_dtoa_r+0xb64>
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	07db      	lsls	r3, r3, #31
 800f0ba:	d4ae      	bmi.n	800f01a <_dtoa_r+0xac2>
 800f0bc:	462b      	mov	r3, r5
 800f0be:	461d      	mov	r5, r3
 800f0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0c4:	2a30      	cmp	r2, #48	; 0x30
 800f0c6:	d0fa      	beq.n	800f0be <_dtoa_r+0xb66>
 800f0c8:	e6f7      	b.n	800eeba <_dtoa_r+0x962>
 800f0ca:	9a00      	ldr	r2, [sp, #0]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d1a5      	bne.n	800f01c <_dtoa_r+0xac4>
 800f0d0:	f10a 0a01 	add.w	sl, sl, #1
 800f0d4:	2331      	movs	r3, #49	; 0x31
 800f0d6:	e779      	b.n	800efcc <_dtoa_r+0xa74>
 800f0d8:	4b13      	ldr	r3, [pc, #76]	; (800f128 <_dtoa_r+0xbd0>)
 800f0da:	f7ff baaf 	b.w	800e63c <_dtoa_r+0xe4>
 800f0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	f47f aa86 	bne.w	800e5f2 <_dtoa_r+0x9a>
 800f0e6:	4b11      	ldr	r3, [pc, #68]	; (800f12c <_dtoa_r+0xbd4>)
 800f0e8:	f7ff baa8 	b.w	800e63c <_dtoa_r+0xe4>
 800f0ec:	f1b9 0f00 	cmp.w	r9, #0
 800f0f0:	dc03      	bgt.n	800f0fa <_dtoa_r+0xba2>
 800f0f2:	9b05      	ldr	r3, [sp, #20]
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	f73f aec9 	bgt.w	800ee8c <_dtoa_r+0x934>
 800f0fa:	9d00      	ldr	r5, [sp, #0]
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4658      	mov	r0, fp
 800f100:	f7ff f99c 	bl	800e43c <quorem>
 800f104:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f108:	f805 3b01 	strb.w	r3, [r5], #1
 800f10c:	9a00      	ldr	r2, [sp, #0]
 800f10e:	1aaa      	subs	r2, r5, r2
 800f110:	4591      	cmp	r9, r2
 800f112:	ddba      	ble.n	800f08a <_dtoa_r+0xb32>
 800f114:	4659      	mov	r1, fp
 800f116:	2300      	movs	r3, #0
 800f118:	220a      	movs	r2, #10
 800f11a:	4620      	mov	r0, r4
 800f11c:	f000 f87a 	bl	800f214 <__multadd>
 800f120:	4683      	mov	fp, r0
 800f122:	e7eb      	b.n	800f0fc <_dtoa_r+0xba4>
 800f124:	0801172b 	.word	0x0801172b
 800f128:	08011684 	.word	0x08011684
 800f12c:	080116a8 	.word	0x080116a8

0800f130 <_localeconv_r>:
 800f130:	4800      	ldr	r0, [pc, #0]	; (800f134 <_localeconv_r+0x4>)
 800f132:	4770      	bx	lr
 800f134:	20000178 	.word	0x20000178

0800f138 <__malloc_lock>:
 800f138:	4801      	ldr	r0, [pc, #4]	; (800f140 <__malloc_lock+0x8>)
 800f13a:	f000 bd22 	b.w	800fb82 <__retarget_lock_acquire_recursive>
 800f13e:	bf00      	nop
 800f140:	20004ce0 	.word	0x20004ce0

0800f144 <__malloc_unlock>:
 800f144:	4801      	ldr	r0, [pc, #4]	; (800f14c <__malloc_unlock+0x8>)
 800f146:	f000 bd1d 	b.w	800fb84 <__retarget_lock_release_recursive>
 800f14a:	bf00      	nop
 800f14c:	20004ce0 	.word	0x20004ce0

0800f150 <_Balloc>:
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f154:	4604      	mov	r4, r0
 800f156:	460d      	mov	r5, r1
 800f158:	b976      	cbnz	r6, 800f178 <_Balloc+0x28>
 800f15a:	2010      	movs	r0, #16
 800f15c:	f7fe fc04 	bl	800d968 <malloc>
 800f160:	4602      	mov	r2, r0
 800f162:	6260      	str	r0, [r4, #36]	; 0x24
 800f164:	b920      	cbnz	r0, 800f170 <_Balloc+0x20>
 800f166:	4b18      	ldr	r3, [pc, #96]	; (800f1c8 <_Balloc+0x78>)
 800f168:	4818      	ldr	r0, [pc, #96]	; (800f1cc <_Balloc+0x7c>)
 800f16a:	2166      	movs	r1, #102	; 0x66
 800f16c:	f000 fcd8 	bl	800fb20 <__assert_func>
 800f170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f174:	6006      	str	r6, [r0, #0]
 800f176:	60c6      	str	r6, [r0, #12]
 800f178:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f17a:	68f3      	ldr	r3, [r6, #12]
 800f17c:	b183      	cbz	r3, 800f1a0 <_Balloc+0x50>
 800f17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f186:	b9b8      	cbnz	r0, 800f1b8 <_Balloc+0x68>
 800f188:	2101      	movs	r1, #1
 800f18a:	fa01 f605 	lsl.w	r6, r1, r5
 800f18e:	1d72      	adds	r2, r6, #5
 800f190:	0092      	lsls	r2, r2, #2
 800f192:	4620      	mov	r0, r4
 800f194:	f000 fb5a 	bl	800f84c <_calloc_r>
 800f198:	b160      	cbz	r0, 800f1b4 <_Balloc+0x64>
 800f19a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f19e:	e00e      	b.n	800f1be <_Balloc+0x6e>
 800f1a0:	2221      	movs	r2, #33	; 0x21
 800f1a2:	2104      	movs	r1, #4
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f000 fb51 	bl	800f84c <_calloc_r>
 800f1aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ac:	60f0      	str	r0, [r6, #12]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1e4      	bne.n	800f17e <_Balloc+0x2e>
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	bd70      	pop	{r4, r5, r6, pc}
 800f1b8:	6802      	ldr	r2, [r0, #0]
 800f1ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1c4:	e7f7      	b.n	800f1b6 <_Balloc+0x66>
 800f1c6:	bf00      	nop
 800f1c8:	080116b5 	.word	0x080116b5
 800f1cc:	0801173c 	.word	0x0801173c

0800f1d0 <_Bfree>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	b976      	cbnz	r6, 800f1f8 <_Bfree+0x28>
 800f1da:	2010      	movs	r0, #16
 800f1dc:	f7fe fbc4 	bl	800d968 <malloc>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	6268      	str	r0, [r5, #36]	; 0x24
 800f1e4:	b920      	cbnz	r0, 800f1f0 <_Bfree+0x20>
 800f1e6:	4b09      	ldr	r3, [pc, #36]	; (800f20c <_Bfree+0x3c>)
 800f1e8:	4809      	ldr	r0, [pc, #36]	; (800f210 <_Bfree+0x40>)
 800f1ea:	218a      	movs	r1, #138	; 0x8a
 800f1ec:	f000 fc98 	bl	800fb20 <__assert_func>
 800f1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1f4:	6006      	str	r6, [r0, #0]
 800f1f6:	60c6      	str	r6, [r0, #12]
 800f1f8:	b13c      	cbz	r4, 800f20a <_Bfree+0x3a>
 800f1fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1fc:	6862      	ldr	r2, [r4, #4]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f204:	6021      	str	r1, [r4, #0]
 800f206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f20a:	bd70      	pop	{r4, r5, r6, pc}
 800f20c:	080116b5 	.word	0x080116b5
 800f210:	0801173c 	.word	0x0801173c

0800f214 <__multadd>:
 800f214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f218:	690e      	ldr	r6, [r1, #16]
 800f21a:	4607      	mov	r7, r0
 800f21c:	4698      	mov	r8, r3
 800f21e:	460c      	mov	r4, r1
 800f220:	f101 0014 	add.w	r0, r1, #20
 800f224:	2300      	movs	r3, #0
 800f226:	6805      	ldr	r5, [r0, #0]
 800f228:	b2a9      	uxth	r1, r5
 800f22a:	fb02 8101 	mla	r1, r2, r1, r8
 800f22e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f232:	0c2d      	lsrs	r5, r5, #16
 800f234:	fb02 c505 	mla	r5, r2, r5, ip
 800f238:	b289      	uxth	r1, r1
 800f23a:	3301      	adds	r3, #1
 800f23c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f240:	429e      	cmp	r6, r3
 800f242:	f840 1b04 	str.w	r1, [r0], #4
 800f246:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f24a:	dcec      	bgt.n	800f226 <__multadd+0x12>
 800f24c:	f1b8 0f00 	cmp.w	r8, #0
 800f250:	d022      	beq.n	800f298 <__multadd+0x84>
 800f252:	68a3      	ldr	r3, [r4, #8]
 800f254:	42b3      	cmp	r3, r6
 800f256:	dc19      	bgt.n	800f28c <__multadd+0x78>
 800f258:	6861      	ldr	r1, [r4, #4]
 800f25a:	4638      	mov	r0, r7
 800f25c:	3101      	adds	r1, #1
 800f25e:	f7ff ff77 	bl	800f150 <_Balloc>
 800f262:	4605      	mov	r5, r0
 800f264:	b928      	cbnz	r0, 800f272 <__multadd+0x5e>
 800f266:	4602      	mov	r2, r0
 800f268:	4b0d      	ldr	r3, [pc, #52]	; (800f2a0 <__multadd+0x8c>)
 800f26a:	480e      	ldr	r0, [pc, #56]	; (800f2a4 <__multadd+0x90>)
 800f26c:	21b5      	movs	r1, #181	; 0xb5
 800f26e:	f000 fc57 	bl	800fb20 <__assert_func>
 800f272:	6922      	ldr	r2, [r4, #16]
 800f274:	3202      	adds	r2, #2
 800f276:	f104 010c 	add.w	r1, r4, #12
 800f27a:	0092      	lsls	r2, r2, #2
 800f27c:	300c      	adds	r0, #12
 800f27e:	f7fe fb83 	bl	800d988 <memcpy>
 800f282:	4621      	mov	r1, r4
 800f284:	4638      	mov	r0, r7
 800f286:	f7ff ffa3 	bl	800f1d0 <_Bfree>
 800f28a:	462c      	mov	r4, r5
 800f28c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f290:	3601      	adds	r6, #1
 800f292:	f8c3 8014 	str.w	r8, [r3, #20]
 800f296:	6126      	str	r6, [r4, #16]
 800f298:	4620      	mov	r0, r4
 800f29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f29e:	bf00      	nop
 800f2a0:	0801172b 	.word	0x0801172b
 800f2a4:	0801173c 	.word	0x0801173c

0800f2a8 <__hi0bits>:
 800f2a8:	0c03      	lsrs	r3, r0, #16
 800f2aa:	041b      	lsls	r3, r3, #16
 800f2ac:	b9d3      	cbnz	r3, 800f2e4 <__hi0bits+0x3c>
 800f2ae:	0400      	lsls	r0, r0, #16
 800f2b0:	2310      	movs	r3, #16
 800f2b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f2b6:	bf04      	itt	eq
 800f2b8:	0200      	lsleq	r0, r0, #8
 800f2ba:	3308      	addeq	r3, #8
 800f2bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f2c0:	bf04      	itt	eq
 800f2c2:	0100      	lsleq	r0, r0, #4
 800f2c4:	3304      	addeq	r3, #4
 800f2c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f2ca:	bf04      	itt	eq
 800f2cc:	0080      	lsleq	r0, r0, #2
 800f2ce:	3302      	addeq	r3, #2
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	db05      	blt.n	800f2e0 <__hi0bits+0x38>
 800f2d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f2d8:	f103 0301 	add.w	r3, r3, #1
 800f2dc:	bf08      	it	eq
 800f2de:	2320      	moveq	r3, #32
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	4770      	bx	lr
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e7e4      	b.n	800f2b2 <__hi0bits+0xa>

0800f2e8 <__lo0bits>:
 800f2e8:	6803      	ldr	r3, [r0, #0]
 800f2ea:	f013 0207 	ands.w	r2, r3, #7
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	d00b      	beq.n	800f30a <__lo0bits+0x22>
 800f2f2:	07da      	lsls	r2, r3, #31
 800f2f4:	d424      	bmi.n	800f340 <__lo0bits+0x58>
 800f2f6:	0798      	lsls	r0, r3, #30
 800f2f8:	bf49      	itett	mi
 800f2fa:	085b      	lsrmi	r3, r3, #1
 800f2fc:	089b      	lsrpl	r3, r3, #2
 800f2fe:	2001      	movmi	r0, #1
 800f300:	600b      	strmi	r3, [r1, #0]
 800f302:	bf5c      	itt	pl
 800f304:	600b      	strpl	r3, [r1, #0]
 800f306:	2002      	movpl	r0, #2
 800f308:	4770      	bx	lr
 800f30a:	b298      	uxth	r0, r3
 800f30c:	b9b0      	cbnz	r0, 800f33c <__lo0bits+0x54>
 800f30e:	0c1b      	lsrs	r3, r3, #16
 800f310:	2010      	movs	r0, #16
 800f312:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f316:	bf04      	itt	eq
 800f318:	0a1b      	lsreq	r3, r3, #8
 800f31a:	3008      	addeq	r0, #8
 800f31c:	071a      	lsls	r2, r3, #28
 800f31e:	bf04      	itt	eq
 800f320:	091b      	lsreq	r3, r3, #4
 800f322:	3004      	addeq	r0, #4
 800f324:	079a      	lsls	r2, r3, #30
 800f326:	bf04      	itt	eq
 800f328:	089b      	lsreq	r3, r3, #2
 800f32a:	3002      	addeq	r0, #2
 800f32c:	07da      	lsls	r2, r3, #31
 800f32e:	d403      	bmi.n	800f338 <__lo0bits+0x50>
 800f330:	085b      	lsrs	r3, r3, #1
 800f332:	f100 0001 	add.w	r0, r0, #1
 800f336:	d005      	beq.n	800f344 <__lo0bits+0x5c>
 800f338:	600b      	str	r3, [r1, #0]
 800f33a:	4770      	bx	lr
 800f33c:	4610      	mov	r0, r2
 800f33e:	e7e8      	b.n	800f312 <__lo0bits+0x2a>
 800f340:	2000      	movs	r0, #0
 800f342:	4770      	bx	lr
 800f344:	2020      	movs	r0, #32
 800f346:	4770      	bx	lr

0800f348 <__i2b>:
 800f348:	b510      	push	{r4, lr}
 800f34a:	460c      	mov	r4, r1
 800f34c:	2101      	movs	r1, #1
 800f34e:	f7ff feff 	bl	800f150 <_Balloc>
 800f352:	4602      	mov	r2, r0
 800f354:	b928      	cbnz	r0, 800f362 <__i2b+0x1a>
 800f356:	4b05      	ldr	r3, [pc, #20]	; (800f36c <__i2b+0x24>)
 800f358:	4805      	ldr	r0, [pc, #20]	; (800f370 <__i2b+0x28>)
 800f35a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f35e:	f000 fbdf 	bl	800fb20 <__assert_func>
 800f362:	2301      	movs	r3, #1
 800f364:	6144      	str	r4, [r0, #20]
 800f366:	6103      	str	r3, [r0, #16]
 800f368:	bd10      	pop	{r4, pc}
 800f36a:	bf00      	nop
 800f36c:	0801172b 	.word	0x0801172b
 800f370:	0801173c 	.word	0x0801173c

0800f374 <__multiply>:
 800f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f378:	4614      	mov	r4, r2
 800f37a:	690a      	ldr	r2, [r1, #16]
 800f37c:	6923      	ldr	r3, [r4, #16]
 800f37e:	429a      	cmp	r2, r3
 800f380:	bfb8      	it	lt
 800f382:	460b      	movlt	r3, r1
 800f384:	460d      	mov	r5, r1
 800f386:	bfbc      	itt	lt
 800f388:	4625      	movlt	r5, r4
 800f38a:	461c      	movlt	r4, r3
 800f38c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f390:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f394:	68ab      	ldr	r3, [r5, #8]
 800f396:	6869      	ldr	r1, [r5, #4]
 800f398:	eb0a 0709 	add.w	r7, sl, r9
 800f39c:	42bb      	cmp	r3, r7
 800f39e:	b085      	sub	sp, #20
 800f3a0:	bfb8      	it	lt
 800f3a2:	3101      	addlt	r1, #1
 800f3a4:	f7ff fed4 	bl	800f150 <_Balloc>
 800f3a8:	b930      	cbnz	r0, 800f3b8 <__multiply+0x44>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	4b42      	ldr	r3, [pc, #264]	; (800f4b8 <__multiply+0x144>)
 800f3ae:	4843      	ldr	r0, [pc, #268]	; (800f4bc <__multiply+0x148>)
 800f3b0:	f240 115d 	movw	r1, #349	; 0x15d
 800f3b4:	f000 fbb4 	bl	800fb20 <__assert_func>
 800f3b8:	f100 0614 	add.w	r6, r0, #20
 800f3bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f3c0:	4633      	mov	r3, r6
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	4543      	cmp	r3, r8
 800f3c6:	d31e      	bcc.n	800f406 <__multiply+0x92>
 800f3c8:	f105 0c14 	add.w	ip, r5, #20
 800f3cc:	f104 0314 	add.w	r3, r4, #20
 800f3d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f3d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f3d8:	9202      	str	r2, [sp, #8]
 800f3da:	ebac 0205 	sub.w	r2, ip, r5
 800f3de:	3a15      	subs	r2, #21
 800f3e0:	f022 0203 	bic.w	r2, r2, #3
 800f3e4:	3204      	adds	r2, #4
 800f3e6:	f105 0115 	add.w	r1, r5, #21
 800f3ea:	458c      	cmp	ip, r1
 800f3ec:	bf38      	it	cc
 800f3ee:	2204      	movcc	r2, #4
 800f3f0:	9201      	str	r2, [sp, #4]
 800f3f2:	9a02      	ldr	r2, [sp, #8]
 800f3f4:	9303      	str	r3, [sp, #12]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d808      	bhi.n	800f40c <__multiply+0x98>
 800f3fa:	2f00      	cmp	r7, #0
 800f3fc:	dc55      	bgt.n	800f4aa <__multiply+0x136>
 800f3fe:	6107      	str	r7, [r0, #16]
 800f400:	b005      	add	sp, #20
 800f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f406:	f843 2b04 	str.w	r2, [r3], #4
 800f40a:	e7db      	b.n	800f3c4 <__multiply+0x50>
 800f40c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f410:	f1ba 0f00 	cmp.w	sl, #0
 800f414:	d020      	beq.n	800f458 <__multiply+0xe4>
 800f416:	f105 0e14 	add.w	lr, r5, #20
 800f41a:	46b1      	mov	r9, r6
 800f41c:	2200      	movs	r2, #0
 800f41e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f422:	f8d9 b000 	ldr.w	fp, [r9]
 800f426:	b2a1      	uxth	r1, r4
 800f428:	fa1f fb8b 	uxth.w	fp, fp
 800f42c:	fb0a b101 	mla	r1, sl, r1, fp
 800f430:	4411      	add	r1, r2
 800f432:	f8d9 2000 	ldr.w	r2, [r9]
 800f436:	0c24      	lsrs	r4, r4, #16
 800f438:	0c12      	lsrs	r2, r2, #16
 800f43a:	fb0a 2404 	mla	r4, sl, r4, r2
 800f43e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f442:	b289      	uxth	r1, r1
 800f444:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f448:	45f4      	cmp	ip, lr
 800f44a:	f849 1b04 	str.w	r1, [r9], #4
 800f44e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f452:	d8e4      	bhi.n	800f41e <__multiply+0xaa>
 800f454:	9901      	ldr	r1, [sp, #4]
 800f456:	5072      	str	r2, [r6, r1]
 800f458:	9a03      	ldr	r2, [sp, #12]
 800f45a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f45e:	3304      	adds	r3, #4
 800f460:	f1b9 0f00 	cmp.w	r9, #0
 800f464:	d01f      	beq.n	800f4a6 <__multiply+0x132>
 800f466:	6834      	ldr	r4, [r6, #0]
 800f468:	f105 0114 	add.w	r1, r5, #20
 800f46c:	46b6      	mov	lr, r6
 800f46e:	f04f 0a00 	mov.w	sl, #0
 800f472:	880a      	ldrh	r2, [r1, #0]
 800f474:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f478:	fb09 b202 	mla	r2, r9, r2, fp
 800f47c:	4492      	add	sl, r2
 800f47e:	b2a4      	uxth	r4, r4
 800f480:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f484:	f84e 4b04 	str.w	r4, [lr], #4
 800f488:	f851 4b04 	ldr.w	r4, [r1], #4
 800f48c:	f8be 2000 	ldrh.w	r2, [lr]
 800f490:	0c24      	lsrs	r4, r4, #16
 800f492:	fb09 2404 	mla	r4, r9, r4, r2
 800f496:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f49a:	458c      	cmp	ip, r1
 800f49c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f4a0:	d8e7      	bhi.n	800f472 <__multiply+0xfe>
 800f4a2:	9a01      	ldr	r2, [sp, #4]
 800f4a4:	50b4      	str	r4, [r6, r2]
 800f4a6:	3604      	adds	r6, #4
 800f4a8:	e7a3      	b.n	800f3f2 <__multiply+0x7e>
 800f4aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1a5      	bne.n	800f3fe <__multiply+0x8a>
 800f4b2:	3f01      	subs	r7, #1
 800f4b4:	e7a1      	b.n	800f3fa <__multiply+0x86>
 800f4b6:	bf00      	nop
 800f4b8:	0801172b 	.word	0x0801172b
 800f4bc:	0801173c 	.word	0x0801173c

0800f4c0 <__pow5mult>:
 800f4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c4:	4615      	mov	r5, r2
 800f4c6:	f012 0203 	ands.w	r2, r2, #3
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	460f      	mov	r7, r1
 800f4ce:	d007      	beq.n	800f4e0 <__pow5mult+0x20>
 800f4d0:	4c25      	ldr	r4, [pc, #148]	; (800f568 <__pow5mult+0xa8>)
 800f4d2:	3a01      	subs	r2, #1
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f4da:	f7ff fe9b 	bl	800f214 <__multadd>
 800f4de:	4607      	mov	r7, r0
 800f4e0:	10ad      	asrs	r5, r5, #2
 800f4e2:	d03d      	beq.n	800f560 <__pow5mult+0xa0>
 800f4e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f4e6:	b97c      	cbnz	r4, 800f508 <__pow5mult+0x48>
 800f4e8:	2010      	movs	r0, #16
 800f4ea:	f7fe fa3d 	bl	800d968 <malloc>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	6270      	str	r0, [r6, #36]	; 0x24
 800f4f2:	b928      	cbnz	r0, 800f500 <__pow5mult+0x40>
 800f4f4:	4b1d      	ldr	r3, [pc, #116]	; (800f56c <__pow5mult+0xac>)
 800f4f6:	481e      	ldr	r0, [pc, #120]	; (800f570 <__pow5mult+0xb0>)
 800f4f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f4fc:	f000 fb10 	bl	800fb20 <__assert_func>
 800f500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f504:	6004      	str	r4, [r0, #0]
 800f506:	60c4      	str	r4, [r0, #12]
 800f508:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f50c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f510:	b94c      	cbnz	r4, 800f526 <__pow5mult+0x66>
 800f512:	f240 2171 	movw	r1, #625	; 0x271
 800f516:	4630      	mov	r0, r6
 800f518:	f7ff ff16 	bl	800f348 <__i2b>
 800f51c:	2300      	movs	r3, #0
 800f51e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f522:	4604      	mov	r4, r0
 800f524:	6003      	str	r3, [r0, #0]
 800f526:	f04f 0900 	mov.w	r9, #0
 800f52a:	07eb      	lsls	r3, r5, #31
 800f52c:	d50a      	bpl.n	800f544 <__pow5mult+0x84>
 800f52e:	4639      	mov	r1, r7
 800f530:	4622      	mov	r2, r4
 800f532:	4630      	mov	r0, r6
 800f534:	f7ff ff1e 	bl	800f374 <__multiply>
 800f538:	4639      	mov	r1, r7
 800f53a:	4680      	mov	r8, r0
 800f53c:	4630      	mov	r0, r6
 800f53e:	f7ff fe47 	bl	800f1d0 <_Bfree>
 800f542:	4647      	mov	r7, r8
 800f544:	106d      	asrs	r5, r5, #1
 800f546:	d00b      	beq.n	800f560 <__pow5mult+0xa0>
 800f548:	6820      	ldr	r0, [r4, #0]
 800f54a:	b938      	cbnz	r0, 800f55c <__pow5mult+0x9c>
 800f54c:	4622      	mov	r2, r4
 800f54e:	4621      	mov	r1, r4
 800f550:	4630      	mov	r0, r6
 800f552:	f7ff ff0f 	bl	800f374 <__multiply>
 800f556:	6020      	str	r0, [r4, #0]
 800f558:	f8c0 9000 	str.w	r9, [r0]
 800f55c:	4604      	mov	r4, r0
 800f55e:	e7e4      	b.n	800f52a <__pow5mult+0x6a>
 800f560:	4638      	mov	r0, r7
 800f562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f566:	bf00      	nop
 800f568:	08011890 	.word	0x08011890
 800f56c:	080116b5 	.word	0x080116b5
 800f570:	0801173c 	.word	0x0801173c

0800f574 <__lshift>:
 800f574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f578:	460c      	mov	r4, r1
 800f57a:	6849      	ldr	r1, [r1, #4]
 800f57c:	6923      	ldr	r3, [r4, #16]
 800f57e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f582:	68a3      	ldr	r3, [r4, #8]
 800f584:	4607      	mov	r7, r0
 800f586:	4691      	mov	r9, r2
 800f588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f58c:	f108 0601 	add.w	r6, r8, #1
 800f590:	42b3      	cmp	r3, r6
 800f592:	db0b      	blt.n	800f5ac <__lshift+0x38>
 800f594:	4638      	mov	r0, r7
 800f596:	f7ff fddb 	bl	800f150 <_Balloc>
 800f59a:	4605      	mov	r5, r0
 800f59c:	b948      	cbnz	r0, 800f5b2 <__lshift+0x3e>
 800f59e:	4602      	mov	r2, r0
 800f5a0:	4b28      	ldr	r3, [pc, #160]	; (800f644 <__lshift+0xd0>)
 800f5a2:	4829      	ldr	r0, [pc, #164]	; (800f648 <__lshift+0xd4>)
 800f5a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f5a8:	f000 faba 	bl	800fb20 <__assert_func>
 800f5ac:	3101      	adds	r1, #1
 800f5ae:	005b      	lsls	r3, r3, #1
 800f5b0:	e7ee      	b.n	800f590 <__lshift+0x1c>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f100 0114 	add.w	r1, r0, #20
 800f5b8:	f100 0210 	add.w	r2, r0, #16
 800f5bc:	4618      	mov	r0, r3
 800f5be:	4553      	cmp	r3, sl
 800f5c0:	db33      	blt.n	800f62a <__lshift+0xb6>
 800f5c2:	6920      	ldr	r0, [r4, #16]
 800f5c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5c8:	f104 0314 	add.w	r3, r4, #20
 800f5cc:	f019 091f 	ands.w	r9, r9, #31
 800f5d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f5d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f5d8:	d02b      	beq.n	800f632 <__lshift+0xbe>
 800f5da:	f1c9 0e20 	rsb	lr, r9, #32
 800f5de:	468a      	mov	sl, r1
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	6818      	ldr	r0, [r3, #0]
 800f5e4:	fa00 f009 	lsl.w	r0, r0, r9
 800f5e8:	4302      	orrs	r2, r0
 800f5ea:	f84a 2b04 	str.w	r2, [sl], #4
 800f5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5f2:	459c      	cmp	ip, r3
 800f5f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f5f8:	d8f3      	bhi.n	800f5e2 <__lshift+0x6e>
 800f5fa:	ebac 0304 	sub.w	r3, ip, r4
 800f5fe:	3b15      	subs	r3, #21
 800f600:	f023 0303 	bic.w	r3, r3, #3
 800f604:	3304      	adds	r3, #4
 800f606:	f104 0015 	add.w	r0, r4, #21
 800f60a:	4584      	cmp	ip, r0
 800f60c:	bf38      	it	cc
 800f60e:	2304      	movcc	r3, #4
 800f610:	50ca      	str	r2, [r1, r3]
 800f612:	b10a      	cbz	r2, 800f618 <__lshift+0xa4>
 800f614:	f108 0602 	add.w	r6, r8, #2
 800f618:	3e01      	subs	r6, #1
 800f61a:	4638      	mov	r0, r7
 800f61c:	612e      	str	r6, [r5, #16]
 800f61e:	4621      	mov	r1, r4
 800f620:	f7ff fdd6 	bl	800f1d0 <_Bfree>
 800f624:	4628      	mov	r0, r5
 800f626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f62a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f62e:	3301      	adds	r3, #1
 800f630:	e7c5      	b.n	800f5be <__lshift+0x4a>
 800f632:	3904      	subs	r1, #4
 800f634:	f853 2b04 	ldr.w	r2, [r3], #4
 800f638:	f841 2f04 	str.w	r2, [r1, #4]!
 800f63c:	459c      	cmp	ip, r3
 800f63e:	d8f9      	bhi.n	800f634 <__lshift+0xc0>
 800f640:	e7ea      	b.n	800f618 <__lshift+0xa4>
 800f642:	bf00      	nop
 800f644:	0801172b 	.word	0x0801172b
 800f648:	0801173c 	.word	0x0801173c

0800f64c <__mcmp>:
 800f64c:	b530      	push	{r4, r5, lr}
 800f64e:	6902      	ldr	r2, [r0, #16]
 800f650:	690c      	ldr	r4, [r1, #16]
 800f652:	1b12      	subs	r2, r2, r4
 800f654:	d10e      	bne.n	800f674 <__mcmp+0x28>
 800f656:	f100 0314 	add.w	r3, r0, #20
 800f65a:	3114      	adds	r1, #20
 800f65c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f66c:	42a5      	cmp	r5, r4
 800f66e:	d003      	beq.n	800f678 <__mcmp+0x2c>
 800f670:	d305      	bcc.n	800f67e <__mcmp+0x32>
 800f672:	2201      	movs	r2, #1
 800f674:	4610      	mov	r0, r2
 800f676:	bd30      	pop	{r4, r5, pc}
 800f678:	4283      	cmp	r3, r0
 800f67a:	d3f3      	bcc.n	800f664 <__mcmp+0x18>
 800f67c:	e7fa      	b.n	800f674 <__mcmp+0x28>
 800f67e:	f04f 32ff 	mov.w	r2, #4294967295
 800f682:	e7f7      	b.n	800f674 <__mcmp+0x28>

0800f684 <__mdiff>:
 800f684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f688:	460c      	mov	r4, r1
 800f68a:	4606      	mov	r6, r0
 800f68c:	4611      	mov	r1, r2
 800f68e:	4620      	mov	r0, r4
 800f690:	4617      	mov	r7, r2
 800f692:	f7ff ffdb 	bl	800f64c <__mcmp>
 800f696:	1e05      	subs	r5, r0, #0
 800f698:	d110      	bne.n	800f6bc <__mdiff+0x38>
 800f69a:	4629      	mov	r1, r5
 800f69c:	4630      	mov	r0, r6
 800f69e:	f7ff fd57 	bl	800f150 <_Balloc>
 800f6a2:	b930      	cbnz	r0, 800f6b2 <__mdiff+0x2e>
 800f6a4:	4b39      	ldr	r3, [pc, #228]	; (800f78c <__mdiff+0x108>)
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	f240 2132 	movw	r1, #562	; 0x232
 800f6ac:	4838      	ldr	r0, [pc, #224]	; (800f790 <__mdiff+0x10c>)
 800f6ae:	f000 fa37 	bl	800fb20 <__assert_func>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f6b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6bc:	bfa4      	itt	ge
 800f6be:	463b      	movge	r3, r7
 800f6c0:	4627      	movge	r7, r4
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	6879      	ldr	r1, [r7, #4]
 800f6c6:	bfa6      	itte	ge
 800f6c8:	461c      	movge	r4, r3
 800f6ca:	2500      	movge	r5, #0
 800f6cc:	2501      	movlt	r5, #1
 800f6ce:	f7ff fd3f 	bl	800f150 <_Balloc>
 800f6d2:	b920      	cbnz	r0, 800f6de <__mdiff+0x5a>
 800f6d4:	4b2d      	ldr	r3, [pc, #180]	; (800f78c <__mdiff+0x108>)
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f6dc:	e7e6      	b.n	800f6ac <__mdiff+0x28>
 800f6de:	693e      	ldr	r6, [r7, #16]
 800f6e0:	60c5      	str	r5, [r0, #12]
 800f6e2:	6925      	ldr	r5, [r4, #16]
 800f6e4:	f107 0114 	add.w	r1, r7, #20
 800f6e8:	f104 0914 	add.w	r9, r4, #20
 800f6ec:	f100 0e14 	add.w	lr, r0, #20
 800f6f0:	f107 0210 	add.w	r2, r7, #16
 800f6f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f6f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f6fc:	46f2      	mov	sl, lr
 800f6fe:	2700      	movs	r7, #0
 800f700:	f859 3b04 	ldr.w	r3, [r9], #4
 800f704:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f708:	fa1f f883 	uxth.w	r8, r3
 800f70c:	fa17 f78b 	uxtah	r7, r7, fp
 800f710:	0c1b      	lsrs	r3, r3, #16
 800f712:	eba7 0808 	sub.w	r8, r7, r8
 800f716:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f71a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f71e:	fa1f f888 	uxth.w	r8, r8
 800f722:	141f      	asrs	r7, r3, #16
 800f724:	454d      	cmp	r5, r9
 800f726:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f72a:	f84a 3b04 	str.w	r3, [sl], #4
 800f72e:	d8e7      	bhi.n	800f700 <__mdiff+0x7c>
 800f730:	1b2b      	subs	r3, r5, r4
 800f732:	3b15      	subs	r3, #21
 800f734:	f023 0303 	bic.w	r3, r3, #3
 800f738:	3304      	adds	r3, #4
 800f73a:	3415      	adds	r4, #21
 800f73c:	42a5      	cmp	r5, r4
 800f73e:	bf38      	it	cc
 800f740:	2304      	movcc	r3, #4
 800f742:	4419      	add	r1, r3
 800f744:	4473      	add	r3, lr
 800f746:	469e      	mov	lr, r3
 800f748:	460d      	mov	r5, r1
 800f74a:	4565      	cmp	r5, ip
 800f74c:	d30e      	bcc.n	800f76c <__mdiff+0xe8>
 800f74e:	f10c 0203 	add.w	r2, ip, #3
 800f752:	1a52      	subs	r2, r2, r1
 800f754:	f022 0203 	bic.w	r2, r2, #3
 800f758:	3903      	subs	r1, #3
 800f75a:	458c      	cmp	ip, r1
 800f75c:	bf38      	it	cc
 800f75e:	2200      	movcc	r2, #0
 800f760:	441a      	add	r2, r3
 800f762:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f766:	b17b      	cbz	r3, 800f788 <__mdiff+0x104>
 800f768:	6106      	str	r6, [r0, #16]
 800f76a:	e7a5      	b.n	800f6b8 <__mdiff+0x34>
 800f76c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f770:	fa17 f488 	uxtah	r4, r7, r8
 800f774:	1422      	asrs	r2, r4, #16
 800f776:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f77a:	b2a4      	uxth	r4, r4
 800f77c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f780:	f84e 4b04 	str.w	r4, [lr], #4
 800f784:	1417      	asrs	r7, r2, #16
 800f786:	e7e0      	b.n	800f74a <__mdiff+0xc6>
 800f788:	3e01      	subs	r6, #1
 800f78a:	e7ea      	b.n	800f762 <__mdiff+0xde>
 800f78c:	0801172b 	.word	0x0801172b
 800f790:	0801173c 	.word	0x0801173c

0800f794 <__d2b>:
 800f794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f798:	4689      	mov	r9, r1
 800f79a:	2101      	movs	r1, #1
 800f79c:	ec57 6b10 	vmov	r6, r7, d0
 800f7a0:	4690      	mov	r8, r2
 800f7a2:	f7ff fcd5 	bl	800f150 <_Balloc>
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	b930      	cbnz	r0, 800f7b8 <__d2b+0x24>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	4b25      	ldr	r3, [pc, #148]	; (800f844 <__d2b+0xb0>)
 800f7ae:	4826      	ldr	r0, [pc, #152]	; (800f848 <__d2b+0xb4>)
 800f7b0:	f240 310a 	movw	r1, #778	; 0x30a
 800f7b4:	f000 f9b4 	bl	800fb20 <__assert_func>
 800f7b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f7bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f7c0:	bb35      	cbnz	r5, 800f810 <__d2b+0x7c>
 800f7c2:	2e00      	cmp	r6, #0
 800f7c4:	9301      	str	r3, [sp, #4]
 800f7c6:	d028      	beq.n	800f81a <__d2b+0x86>
 800f7c8:	4668      	mov	r0, sp
 800f7ca:	9600      	str	r6, [sp, #0]
 800f7cc:	f7ff fd8c 	bl	800f2e8 <__lo0bits>
 800f7d0:	9900      	ldr	r1, [sp, #0]
 800f7d2:	b300      	cbz	r0, 800f816 <__d2b+0x82>
 800f7d4:	9a01      	ldr	r2, [sp, #4]
 800f7d6:	f1c0 0320 	rsb	r3, r0, #32
 800f7da:	fa02 f303 	lsl.w	r3, r2, r3
 800f7de:	430b      	orrs	r3, r1
 800f7e0:	40c2      	lsrs	r2, r0
 800f7e2:	6163      	str	r3, [r4, #20]
 800f7e4:	9201      	str	r2, [sp, #4]
 800f7e6:	9b01      	ldr	r3, [sp, #4]
 800f7e8:	61a3      	str	r3, [r4, #24]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	bf14      	ite	ne
 800f7ee:	2202      	movne	r2, #2
 800f7f0:	2201      	moveq	r2, #1
 800f7f2:	6122      	str	r2, [r4, #16]
 800f7f4:	b1d5      	cbz	r5, 800f82c <__d2b+0x98>
 800f7f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f7fa:	4405      	add	r5, r0
 800f7fc:	f8c9 5000 	str.w	r5, [r9]
 800f800:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f804:	f8c8 0000 	str.w	r0, [r8]
 800f808:	4620      	mov	r0, r4
 800f80a:	b003      	add	sp, #12
 800f80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f814:	e7d5      	b.n	800f7c2 <__d2b+0x2e>
 800f816:	6161      	str	r1, [r4, #20]
 800f818:	e7e5      	b.n	800f7e6 <__d2b+0x52>
 800f81a:	a801      	add	r0, sp, #4
 800f81c:	f7ff fd64 	bl	800f2e8 <__lo0bits>
 800f820:	9b01      	ldr	r3, [sp, #4]
 800f822:	6163      	str	r3, [r4, #20]
 800f824:	2201      	movs	r2, #1
 800f826:	6122      	str	r2, [r4, #16]
 800f828:	3020      	adds	r0, #32
 800f82a:	e7e3      	b.n	800f7f4 <__d2b+0x60>
 800f82c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f834:	f8c9 0000 	str.w	r0, [r9]
 800f838:	6918      	ldr	r0, [r3, #16]
 800f83a:	f7ff fd35 	bl	800f2a8 <__hi0bits>
 800f83e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f842:	e7df      	b.n	800f804 <__d2b+0x70>
 800f844:	0801172b 	.word	0x0801172b
 800f848:	0801173c 	.word	0x0801173c

0800f84c <_calloc_r>:
 800f84c:	b513      	push	{r0, r1, r4, lr}
 800f84e:	434a      	muls	r2, r1
 800f850:	4611      	mov	r1, r2
 800f852:	9201      	str	r2, [sp, #4]
 800f854:	f7fe f8fe 	bl	800da54 <_malloc_r>
 800f858:	4604      	mov	r4, r0
 800f85a:	b118      	cbz	r0, 800f864 <_calloc_r+0x18>
 800f85c:	9a01      	ldr	r2, [sp, #4]
 800f85e:	2100      	movs	r1, #0
 800f860:	f7fe f8a0 	bl	800d9a4 <memset>
 800f864:	4620      	mov	r0, r4
 800f866:	b002      	add	sp, #8
 800f868:	bd10      	pop	{r4, pc}

0800f86a <__ssputs_r>:
 800f86a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f86e:	688e      	ldr	r6, [r1, #8]
 800f870:	429e      	cmp	r6, r3
 800f872:	4682      	mov	sl, r0
 800f874:	460c      	mov	r4, r1
 800f876:	4690      	mov	r8, r2
 800f878:	461f      	mov	r7, r3
 800f87a:	d838      	bhi.n	800f8ee <__ssputs_r+0x84>
 800f87c:	898a      	ldrh	r2, [r1, #12]
 800f87e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f882:	d032      	beq.n	800f8ea <__ssputs_r+0x80>
 800f884:	6825      	ldr	r5, [r4, #0]
 800f886:	6909      	ldr	r1, [r1, #16]
 800f888:	eba5 0901 	sub.w	r9, r5, r1
 800f88c:	6965      	ldr	r5, [r4, #20]
 800f88e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f892:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f896:	3301      	adds	r3, #1
 800f898:	444b      	add	r3, r9
 800f89a:	106d      	asrs	r5, r5, #1
 800f89c:	429d      	cmp	r5, r3
 800f89e:	bf38      	it	cc
 800f8a0:	461d      	movcc	r5, r3
 800f8a2:	0553      	lsls	r3, r2, #21
 800f8a4:	d531      	bpl.n	800f90a <__ssputs_r+0xa0>
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	f7fe f8d4 	bl	800da54 <_malloc_r>
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	b950      	cbnz	r0, 800f8c6 <__ssputs_r+0x5c>
 800f8b0:	230c      	movs	r3, #12
 800f8b2:	f8ca 3000 	str.w	r3, [sl]
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8c6:	6921      	ldr	r1, [r4, #16]
 800f8c8:	464a      	mov	r2, r9
 800f8ca:	f7fe f85d 	bl	800d988 <memcpy>
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8d8:	81a3      	strh	r3, [r4, #12]
 800f8da:	6126      	str	r6, [r4, #16]
 800f8dc:	6165      	str	r5, [r4, #20]
 800f8de:	444e      	add	r6, r9
 800f8e0:	eba5 0509 	sub.w	r5, r5, r9
 800f8e4:	6026      	str	r6, [r4, #0]
 800f8e6:	60a5      	str	r5, [r4, #8]
 800f8e8:	463e      	mov	r6, r7
 800f8ea:	42be      	cmp	r6, r7
 800f8ec:	d900      	bls.n	800f8f0 <__ssputs_r+0x86>
 800f8ee:	463e      	mov	r6, r7
 800f8f0:	4632      	mov	r2, r6
 800f8f2:	6820      	ldr	r0, [r4, #0]
 800f8f4:	4641      	mov	r1, r8
 800f8f6:	f000 f958 	bl	800fbaa <memmove>
 800f8fa:	68a3      	ldr	r3, [r4, #8]
 800f8fc:	6822      	ldr	r2, [r4, #0]
 800f8fe:	1b9b      	subs	r3, r3, r6
 800f900:	4432      	add	r2, r6
 800f902:	60a3      	str	r3, [r4, #8]
 800f904:	6022      	str	r2, [r4, #0]
 800f906:	2000      	movs	r0, #0
 800f908:	e7db      	b.n	800f8c2 <__ssputs_r+0x58>
 800f90a:	462a      	mov	r2, r5
 800f90c:	f000 f967 	bl	800fbde <_realloc_r>
 800f910:	4606      	mov	r6, r0
 800f912:	2800      	cmp	r0, #0
 800f914:	d1e1      	bne.n	800f8da <__ssputs_r+0x70>
 800f916:	6921      	ldr	r1, [r4, #16]
 800f918:	4650      	mov	r0, sl
 800f91a:	f7fe f84b 	bl	800d9b4 <_free_r>
 800f91e:	e7c7      	b.n	800f8b0 <__ssputs_r+0x46>

0800f920 <_svfiprintf_r>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	4698      	mov	r8, r3
 800f926:	898b      	ldrh	r3, [r1, #12]
 800f928:	061b      	lsls	r3, r3, #24
 800f92a:	b09d      	sub	sp, #116	; 0x74
 800f92c:	4607      	mov	r7, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	4614      	mov	r4, r2
 800f932:	d50e      	bpl.n	800f952 <_svfiprintf_r+0x32>
 800f934:	690b      	ldr	r3, [r1, #16]
 800f936:	b963      	cbnz	r3, 800f952 <_svfiprintf_r+0x32>
 800f938:	2140      	movs	r1, #64	; 0x40
 800f93a:	f7fe f88b 	bl	800da54 <_malloc_r>
 800f93e:	6028      	str	r0, [r5, #0]
 800f940:	6128      	str	r0, [r5, #16]
 800f942:	b920      	cbnz	r0, 800f94e <_svfiprintf_r+0x2e>
 800f944:	230c      	movs	r3, #12
 800f946:	603b      	str	r3, [r7, #0]
 800f948:	f04f 30ff 	mov.w	r0, #4294967295
 800f94c:	e0d1      	b.n	800faf2 <_svfiprintf_r+0x1d2>
 800f94e:	2340      	movs	r3, #64	; 0x40
 800f950:	616b      	str	r3, [r5, #20]
 800f952:	2300      	movs	r3, #0
 800f954:	9309      	str	r3, [sp, #36]	; 0x24
 800f956:	2320      	movs	r3, #32
 800f958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f960:	2330      	movs	r3, #48	; 0x30
 800f962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb0c <_svfiprintf_r+0x1ec>
 800f966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f96a:	f04f 0901 	mov.w	r9, #1
 800f96e:	4623      	mov	r3, r4
 800f970:	469a      	mov	sl, r3
 800f972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f976:	b10a      	cbz	r2, 800f97c <_svfiprintf_r+0x5c>
 800f978:	2a25      	cmp	r2, #37	; 0x25
 800f97a:	d1f9      	bne.n	800f970 <_svfiprintf_r+0x50>
 800f97c:	ebba 0b04 	subs.w	fp, sl, r4
 800f980:	d00b      	beq.n	800f99a <_svfiprintf_r+0x7a>
 800f982:	465b      	mov	r3, fp
 800f984:	4622      	mov	r2, r4
 800f986:	4629      	mov	r1, r5
 800f988:	4638      	mov	r0, r7
 800f98a:	f7ff ff6e 	bl	800f86a <__ssputs_r>
 800f98e:	3001      	adds	r0, #1
 800f990:	f000 80aa 	beq.w	800fae8 <_svfiprintf_r+0x1c8>
 800f994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f996:	445a      	add	r2, fp
 800f998:	9209      	str	r2, [sp, #36]	; 0x24
 800f99a:	f89a 3000 	ldrb.w	r3, [sl]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 80a2 	beq.w	800fae8 <_svfiprintf_r+0x1c8>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9ae:	f10a 0a01 	add.w	sl, sl, #1
 800f9b2:	9304      	str	r3, [sp, #16]
 800f9b4:	9307      	str	r3, [sp, #28]
 800f9b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9ba:	931a      	str	r3, [sp, #104]	; 0x68
 800f9bc:	4654      	mov	r4, sl
 800f9be:	2205      	movs	r2, #5
 800f9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c4:	4851      	ldr	r0, [pc, #324]	; (800fb0c <_svfiprintf_r+0x1ec>)
 800f9c6:	f7f0 fc0b 	bl	80001e0 <memchr>
 800f9ca:	9a04      	ldr	r2, [sp, #16]
 800f9cc:	b9d8      	cbnz	r0, 800fa06 <_svfiprintf_r+0xe6>
 800f9ce:	06d0      	lsls	r0, r2, #27
 800f9d0:	bf44      	itt	mi
 800f9d2:	2320      	movmi	r3, #32
 800f9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9d8:	0711      	lsls	r1, r2, #28
 800f9da:	bf44      	itt	mi
 800f9dc:	232b      	movmi	r3, #43	; 0x2b
 800f9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e8:	d015      	beq.n	800fa16 <_svfiprintf_r+0xf6>
 800f9ea:	9a07      	ldr	r2, [sp, #28]
 800f9ec:	4654      	mov	r4, sl
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f04f 0c0a 	mov.w	ip, #10
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9fa:	3b30      	subs	r3, #48	; 0x30
 800f9fc:	2b09      	cmp	r3, #9
 800f9fe:	d94e      	bls.n	800fa9e <_svfiprintf_r+0x17e>
 800fa00:	b1b0      	cbz	r0, 800fa30 <_svfiprintf_r+0x110>
 800fa02:	9207      	str	r2, [sp, #28]
 800fa04:	e014      	b.n	800fa30 <_svfiprintf_r+0x110>
 800fa06:	eba0 0308 	sub.w	r3, r0, r8
 800fa0a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	9304      	str	r3, [sp, #16]
 800fa12:	46a2      	mov	sl, r4
 800fa14:	e7d2      	b.n	800f9bc <_svfiprintf_r+0x9c>
 800fa16:	9b03      	ldr	r3, [sp, #12]
 800fa18:	1d19      	adds	r1, r3, #4
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	9103      	str	r1, [sp, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbb      	ittet	lt
 800fa22:	425b      	neglt	r3, r3
 800fa24:	f042 0202 	orrlt.w	r2, r2, #2
 800fa28:	9307      	strge	r3, [sp, #28]
 800fa2a:	9307      	strlt	r3, [sp, #28]
 800fa2c:	bfb8      	it	lt
 800fa2e:	9204      	strlt	r2, [sp, #16]
 800fa30:	7823      	ldrb	r3, [r4, #0]
 800fa32:	2b2e      	cmp	r3, #46	; 0x2e
 800fa34:	d10c      	bne.n	800fa50 <_svfiprintf_r+0x130>
 800fa36:	7863      	ldrb	r3, [r4, #1]
 800fa38:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3a:	d135      	bne.n	800faa8 <_svfiprintf_r+0x188>
 800fa3c:	9b03      	ldr	r3, [sp, #12]
 800fa3e:	1d1a      	adds	r2, r3, #4
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	9203      	str	r2, [sp, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bfb8      	it	lt
 800fa48:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa4c:	3402      	adds	r4, #2
 800fa4e:	9305      	str	r3, [sp, #20]
 800fa50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fb1c <_svfiprintf_r+0x1fc>
 800fa54:	7821      	ldrb	r1, [r4, #0]
 800fa56:	2203      	movs	r2, #3
 800fa58:	4650      	mov	r0, sl
 800fa5a:	f7f0 fbc1 	bl	80001e0 <memchr>
 800fa5e:	b140      	cbz	r0, 800fa72 <_svfiprintf_r+0x152>
 800fa60:	2340      	movs	r3, #64	; 0x40
 800fa62:	eba0 000a 	sub.w	r0, r0, sl
 800fa66:	fa03 f000 	lsl.w	r0, r3, r0
 800fa6a:	9b04      	ldr	r3, [sp, #16]
 800fa6c:	4303      	orrs	r3, r0
 800fa6e:	3401      	adds	r4, #1
 800fa70:	9304      	str	r3, [sp, #16]
 800fa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa76:	4826      	ldr	r0, [pc, #152]	; (800fb10 <_svfiprintf_r+0x1f0>)
 800fa78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa7c:	2206      	movs	r2, #6
 800fa7e:	f7f0 fbaf 	bl	80001e0 <memchr>
 800fa82:	2800      	cmp	r0, #0
 800fa84:	d038      	beq.n	800faf8 <_svfiprintf_r+0x1d8>
 800fa86:	4b23      	ldr	r3, [pc, #140]	; (800fb14 <_svfiprintf_r+0x1f4>)
 800fa88:	bb1b      	cbnz	r3, 800fad2 <_svfiprintf_r+0x1b2>
 800fa8a:	9b03      	ldr	r3, [sp, #12]
 800fa8c:	3307      	adds	r3, #7
 800fa8e:	f023 0307 	bic.w	r3, r3, #7
 800fa92:	3308      	adds	r3, #8
 800fa94:	9303      	str	r3, [sp, #12]
 800fa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa98:	4433      	add	r3, r6
 800fa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa9c:	e767      	b.n	800f96e <_svfiprintf_r+0x4e>
 800fa9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800faa2:	460c      	mov	r4, r1
 800faa4:	2001      	movs	r0, #1
 800faa6:	e7a5      	b.n	800f9f4 <_svfiprintf_r+0xd4>
 800faa8:	2300      	movs	r3, #0
 800faaa:	3401      	adds	r4, #1
 800faac:	9305      	str	r3, [sp, #20]
 800faae:	4619      	mov	r1, r3
 800fab0:	f04f 0c0a 	mov.w	ip, #10
 800fab4:	4620      	mov	r0, r4
 800fab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faba:	3a30      	subs	r2, #48	; 0x30
 800fabc:	2a09      	cmp	r2, #9
 800fabe:	d903      	bls.n	800fac8 <_svfiprintf_r+0x1a8>
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d0c5      	beq.n	800fa50 <_svfiprintf_r+0x130>
 800fac4:	9105      	str	r1, [sp, #20]
 800fac6:	e7c3      	b.n	800fa50 <_svfiprintf_r+0x130>
 800fac8:	fb0c 2101 	mla	r1, ip, r1, r2
 800facc:	4604      	mov	r4, r0
 800face:	2301      	movs	r3, #1
 800fad0:	e7f0      	b.n	800fab4 <_svfiprintf_r+0x194>
 800fad2:	ab03      	add	r3, sp, #12
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	462a      	mov	r2, r5
 800fad8:	4b0f      	ldr	r3, [pc, #60]	; (800fb18 <_svfiprintf_r+0x1f8>)
 800fada:	a904      	add	r1, sp, #16
 800fadc:	4638      	mov	r0, r7
 800fade:	f7fe f8b3 	bl	800dc48 <_printf_float>
 800fae2:	1c42      	adds	r2, r0, #1
 800fae4:	4606      	mov	r6, r0
 800fae6:	d1d6      	bne.n	800fa96 <_svfiprintf_r+0x176>
 800fae8:	89ab      	ldrh	r3, [r5, #12]
 800faea:	065b      	lsls	r3, r3, #25
 800faec:	f53f af2c 	bmi.w	800f948 <_svfiprintf_r+0x28>
 800faf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faf2:	b01d      	add	sp, #116	; 0x74
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	ab03      	add	r3, sp, #12
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	462a      	mov	r2, r5
 800fafe:	4b06      	ldr	r3, [pc, #24]	; (800fb18 <_svfiprintf_r+0x1f8>)
 800fb00:	a904      	add	r1, sp, #16
 800fb02:	4638      	mov	r0, r7
 800fb04:	f7fe fb44 	bl	800e190 <_printf_i>
 800fb08:	e7eb      	b.n	800fae2 <_svfiprintf_r+0x1c2>
 800fb0a:	bf00      	nop
 800fb0c:	0801189c 	.word	0x0801189c
 800fb10:	080118a6 	.word	0x080118a6
 800fb14:	0800dc49 	.word	0x0800dc49
 800fb18:	0800f86b 	.word	0x0800f86b
 800fb1c:	080118a2 	.word	0x080118a2

0800fb20 <__assert_func>:
 800fb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb22:	4614      	mov	r4, r2
 800fb24:	461a      	mov	r2, r3
 800fb26:	4b09      	ldr	r3, [pc, #36]	; (800fb4c <__assert_func+0x2c>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	68d8      	ldr	r0, [r3, #12]
 800fb2e:	b14c      	cbz	r4, 800fb44 <__assert_func+0x24>
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <__assert_func+0x30>)
 800fb32:	9100      	str	r1, [sp, #0]
 800fb34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb38:	4906      	ldr	r1, [pc, #24]	; (800fb54 <__assert_func+0x34>)
 800fb3a:	462b      	mov	r3, r5
 800fb3c:	f000 f80e 	bl	800fb5c <fiprintf>
 800fb40:	f000 fa9a 	bl	8010078 <abort>
 800fb44:	4b04      	ldr	r3, [pc, #16]	; (800fb58 <__assert_func+0x38>)
 800fb46:	461c      	mov	r4, r3
 800fb48:	e7f3      	b.n	800fb32 <__assert_func+0x12>
 800fb4a:	bf00      	nop
 800fb4c:	20000024 	.word	0x20000024
 800fb50:	080118ad 	.word	0x080118ad
 800fb54:	080118ba 	.word	0x080118ba
 800fb58:	080118e8 	.word	0x080118e8

0800fb5c <fiprintf>:
 800fb5c:	b40e      	push	{r1, r2, r3}
 800fb5e:	b503      	push	{r0, r1, lr}
 800fb60:	4601      	mov	r1, r0
 800fb62:	ab03      	add	r3, sp, #12
 800fb64:	4805      	ldr	r0, [pc, #20]	; (800fb7c <fiprintf+0x20>)
 800fb66:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb6a:	6800      	ldr	r0, [r0, #0]
 800fb6c:	9301      	str	r3, [sp, #4]
 800fb6e:	f000 f885 	bl	800fc7c <_vfiprintf_r>
 800fb72:	b002      	add	sp, #8
 800fb74:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb78:	b003      	add	sp, #12
 800fb7a:	4770      	bx	lr
 800fb7c:	20000024 	.word	0x20000024

0800fb80 <__retarget_lock_init_recursive>:
 800fb80:	4770      	bx	lr

0800fb82 <__retarget_lock_acquire_recursive>:
 800fb82:	4770      	bx	lr

0800fb84 <__retarget_lock_release_recursive>:
 800fb84:	4770      	bx	lr

0800fb86 <__ascii_mbtowc>:
 800fb86:	b082      	sub	sp, #8
 800fb88:	b901      	cbnz	r1, 800fb8c <__ascii_mbtowc+0x6>
 800fb8a:	a901      	add	r1, sp, #4
 800fb8c:	b142      	cbz	r2, 800fba0 <__ascii_mbtowc+0x1a>
 800fb8e:	b14b      	cbz	r3, 800fba4 <__ascii_mbtowc+0x1e>
 800fb90:	7813      	ldrb	r3, [r2, #0]
 800fb92:	600b      	str	r3, [r1, #0]
 800fb94:	7812      	ldrb	r2, [r2, #0]
 800fb96:	1e10      	subs	r0, r2, #0
 800fb98:	bf18      	it	ne
 800fb9a:	2001      	movne	r0, #1
 800fb9c:	b002      	add	sp, #8
 800fb9e:	4770      	bx	lr
 800fba0:	4610      	mov	r0, r2
 800fba2:	e7fb      	b.n	800fb9c <__ascii_mbtowc+0x16>
 800fba4:	f06f 0001 	mvn.w	r0, #1
 800fba8:	e7f8      	b.n	800fb9c <__ascii_mbtowc+0x16>

0800fbaa <memmove>:
 800fbaa:	4288      	cmp	r0, r1
 800fbac:	b510      	push	{r4, lr}
 800fbae:	eb01 0402 	add.w	r4, r1, r2
 800fbb2:	d902      	bls.n	800fbba <memmove+0x10>
 800fbb4:	4284      	cmp	r4, r0
 800fbb6:	4623      	mov	r3, r4
 800fbb8:	d807      	bhi.n	800fbca <memmove+0x20>
 800fbba:	1e43      	subs	r3, r0, #1
 800fbbc:	42a1      	cmp	r1, r4
 800fbbe:	d008      	beq.n	800fbd2 <memmove+0x28>
 800fbc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbc4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbc8:	e7f8      	b.n	800fbbc <memmove+0x12>
 800fbca:	4402      	add	r2, r0
 800fbcc:	4601      	mov	r1, r0
 800fbce:	428a      	cmp	r2, r1
 800fbd0:	d100      	bne.n	800fbd4 <memmove+0x2a>
 800fbd2:	bd10      	pop	{r4, pc}
 800fbd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbd8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbdc:	e7f7      	b.n	800fbce <memmove+0x24>

0800fbde <_realloc_r>:
 800fbde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	4614      	mov	r4, r2
 800fbe4:	460e      	mov	r6, r1
 800fbe6:	b921      	cbnz	r1, 800fbf2 <_realloc_r+0x14>
 800fbe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fbec:	4611      	mov	r1, r2
 800fbee:	f7fd bf31 	b.w	800da54 <_malloc_r>
 800fbf2:	b922      	cbnz	r2, 800fbfe <_realloc_r+0x20>
 800fbf4:	f7fd fede 	bl	800d9b4 <_free_r>
 800fbf8:	4625      	mov	r5, r4
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbfe:	f000 fc5f 	bl	80104c0 <_malloc_usable_size_r>
 800fc02:	42a0      	cmp	r0, r4
 800fc04:	d20f      	bcs.n	800fc26 <_realloc_r+0x48>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4638      	mov	r0, r7
 800fc0a:	f7fd ff23 	bl	800da54 <_malloc_r>
 800fc0e:	4605      	mov	r5, r0
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d0f2      	beq.n	800fbfa <_realloc_r+0x1c>
 800fc14:	4631      	mov	r1, r6
 800fc16:	4622      	mov	r2, r4
 800fc18:	f7fd feb6 	bl	800d988 <memcpy>
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	4638      	mov	r0, r7
 800fc20:	f7fd fec8 	bl	800d9b4 <_free_r>
 800fc24:	e7e9      	b.n	800fbfa <_realloc_r+0x1c>
 800fc26:	4635      	mov	r5, r6
 800fc28:	e7e7      	b.n	800fbfa <_realloc_r+0x1c>

0800fc2a <__sfputc_r>:
 800fc2a:	6893      	ldr	r3, [r2, #8]
 800fc2c:	3b01      	subs	r3, #1
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	b410      	push	{r4}
 800fc32:	6093      	str	r3, [r2, #8]
 800fc34:	da08      	bge.n	800fc48 <__sfputc_r+0x1e>
 800fc36:	6994      	ldr	r4, [r2, #24]
 800fc38:	42a3      	cmp	r3, r4
 800fc3a:	db01      	blt.n	800fc40 <__sfputc_r+0x16>
 800fc3c:	290a      	cmp	r1, #10
 800fc3e:	d103      	bne.n	800fc48 <__sfputc_r+0x1e>
 800fc40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc44:	f000 b94a 	b.w	800fedc <__swbuf_r>
 800fc48:	6813      	ldr	r3, [r2, #0]
 800fc4a:	1c58      	adds	r0, r3, #1
 800fc4c:	6010      	str	r0, [r2, #0]
 800fc4e:	7019      	strb	r1, [r3, #0]
 800fc50:	4608      	mov	r0, r1
 800fc52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <__sfputs_r>:
 800fc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	460f      	mov	r7, r1
 800fc5e:	4614      	mov	r4, r2
 800fc60:	18d5      	adds	r5, r2, r3
 800fc62:	42ac      	cmp	r4, r5
 800fc64:	d101      	bne.n	800fc6a <__sfputs_r+0x12>
 800fc66:	2000      	movs	r0, #0
 800fc68:	e007      	b.n	800fc7a <__sfputs_r+0x22>
 800fc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc6e:	463a      	mov	r2, r7
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7ff ffda 	bl	800fc2a <__sfputc_r>
 800fc76:	1c43      	adds	r3, r0, #1
 800fc78:	d1f3      	bne.n	800fc62 <__sfputs_r+0xa>
 800fc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc7c <_vfiprintf_r>:
 800fc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc80:	460d      	mov	r5, r1
 800fc82:	b09d      	sub	sp, #116	; 0x74
 800fc84:	4614      	mov	r4, r2
 800fc86:	4698      	mov	r8, r3
 800fc88:	4606      	mov	r6, r0
 800fc8a:	b118      	cbz	r0, 800fc94 <_vfiprintf_r+0x18>
 800fc8c:	6983      	ldr	r3, [r0, #24]
 800fc8e:	b90b      	cbnz	r3, 800fc94 <_vfiprintf_r+0x18>
 800fc90:	f000 fb14 	bl	80102bc <__sinit>
 800fc94:	4b89      	ldr	r3, [pc, #548]	; (800febc <_vfiprintf_r+0x240>)
 800fc96:	429d      	cmp	r5, r3
 800fc98:	d11b      	bne.n	800fcd2 <_vfiprintf_r+0x56>
 800fc9a:	6875      	ldr	r5, [r6, #4]
 800fc9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc9e:	07d9      	lsls	r1, r3, #31
 800fca0:	d405      	bmi.n	800fcae <_vfiprintf_r+0x32>
 800fca2:	89ab      	ldrh	r3, [r5, #12]
 800fca4:	059a      	lsls	r2, r3, #22
 800fca6:	d402      	bmi.n	800fcae <_vfiprintf_r+0x32>
 800fca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcaa:	f7ff ff6a 	bl	800fb82 <__retarget_lock_acquire_recursive>
 800fcae:	89ab      	ldrh	r3, [r5, #12]
 800fcb0:	071b      	lsls	r3, r3, #28
 800fcb2:	d501      	bpl.n	800fcb8 <_vfiprintf_r+0x3c>
 800fcb4:	692b      	ldr	r3, [r5, #16]
 800fcb6:	b9eb      	cbnz	r3, 800fcf4 <_vfiprintf_r+0x78>
 800fcb8:	4629      	mov	r1, r5
 800fcba:	4630      	mov	r0, r6
 800fcbc:	f000 f96e 	bl	800ff9c <__swsetup_r>
 800fcc0:	b1c0      	cbz	r0, 800fcf4 <_vfiprintf_r+0x78>
 800fcc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcc4:	07dc      	lsls	r4, r3, #31
 800fcc6:	d50e      	bpl.n	800fce6 <_vfiprintf_r+0x6a>
 800fcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fccc:	b01d      	add	sp, #116	; 0x74
 800fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd2:	4b7b      	ldr	r3, [pc, #492]	; (800fec0 <_vfiprintf_r+0x244>)
 800fcd4:	429d      	cmp	r5, r3
 800fcd6:	d101      	bne.n	800fcdc <_vfiprintf_r+0x60>
 800fcd8:	68b5      	ldr	r5, [r6, #8]
 800fcda:	e7df      	b.n	800fc9c <_vfiprintf_r+0x20>
 800fcdc:	4b79      	ldr	r3, [pc, #484]	; (800fec4 <_vfiprintf_r+0x248>)
 800fcde:	429d      	cmp	r5, r3
 800fce0:	bf08      	it	eq
 800fce2:	68f5      	ldreq	r5, [r6, #12]
 800fce4:	e7da      	b.n	800fc9c <_vfiprintf_r+0x20>
 800fce6:	89ab      	ldrh	r3, [r5, #12]
 800fce8:	0598      	lsls	r0, r3, #22
 800fcea:	d4ed      	bmi.n	800fcc8 <_vfiprintf_r+0x4c>
 800fcec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcee:	f7ff ff49 	bl	800fb84 <__retarget_lock_release_recursive>
 800fcf2:	e7e9      	b.n	800fcc8 <_vfiprintf_r+0x4c>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf8:	2320      	movs	r3, #32
 800fcfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd02:	2330      	movs	r3, #48	; 0x30
 800fd04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fec8 <_vfiprintf_r+0x24c>
 800fd08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd0c:	f04f 0901 	mov.w	r9, #1
 800fd10:	4623      	mov	r3, r4
 800fd12:	469a      	mov	sl, r3
 800fd14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd18:	b10a      	cbz	r2, 800fd1e <_vfiprintf_r+0xa2>
 800fd1a:	2a25      	cmp	r2, #37	; 0x25
 800fd1c:	d1f9      	bne.n	800fd12 <_vfiprintf_r+0x96>
 800fd1e:	ebba 0b04 	subs.w	fp, sl, r4
 800fd22:	d00b      	beq.n	800fd3c <_vfiprintf_r+0xc0>
 800fd24:	465b      	mov	r3, fp
 800fd26:	4622      	mov	r2, r4
 800fd28:	4629      	mov	r1, r5
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	f7ff ff94 	bl	800fc58 <__sfputs_r>
 800fd30:	3001      	adds	r0, #1
 800fd32:	f000 80aa 	beq.w	800fe8a <_vfiprintf_r+0x20e>
 800fd36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd38:	445a      	add	r2, fp
 800fd3a:	9209      	str	r2, [sp, #36]	; 0x24
 800fd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 80a2 	beq.w	800fe8a <_vfiprintf_r+0x20e>
 800fd46:	2300      	movs	r3, #0
 800fd48:	f04f 32ff 	mov.w	r2, #4294967295
 800fd4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd50:	f10a 0a01 	add.w	sl, sl, #1
 800fd54:	9304      	str	r3, [sp, #16]
 800fd56:	9307      	str	r3, [sp, #28]
 800fd58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd5c:	931a      	str	r3, [sp, #104]	; 0x68
 800fd5e:	4654      	mov	r4, sl
 800fd60:	2205      	movs	r2, #5
 800fd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd66:	4858      	ldr	r0, [pc, #352]	; (800fec8 <_vfiprintf_r+0x24c>)
 800fd68:	f7f0 fa3a 	bl	80001e0 <memchr>
 800fd6c:	9a04      	ldr	r2, [sp, #16]
 800fd6e:	b9d8      	cbnz	r0, 800fda8 <_vfiprintf_r+0x12c>
 800fd70:	06d1      	lsls	r1, r2, #27
 800fd72:	bf44      	itt	mi
 800fd74:	2320      	movmi	r3, #32
 800fd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd7a:	0713      	lsls	r3, r2, #28
 800fd7c:	bf44      	itt	mi
 800fd7e:	232b      	movmi	r3, #43	; 0x2b
 800fd80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd84:	f89a 3000 	ldrb.w	r3, [sl]
 800fd88:	2b2a      	cmp	r3, #42	; 0x2a
 800fd8a:	d015      	beq.n	800fdb8 <_vfiprintf_r+0x13c>
 800fd8c:	9a07      	ldr	r2, [sp, #28]
 800fd8e:	4654      	mov	r4, sl
 800fd90:	2000      	movs	r0, #0
 800fd92:	f04f 0c0a 	mov.w	ip, #10
 800fd96:	4621      	mov	r1, r4
 800fd98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd9c:	3b30      	subs	r3, #48	; 0x30
 800fd9e:	2b09      	cmp	r3, #9
 800fda0:	d94e      	bls.n	800fe40 <_vfiprintf_r+0x1c4>
 800fda2:	b1b0      	cbz	r0, 800fdd2 <_vfiprintf_r+0x156>
 800fda4:	9207      	str	r2, [sp, #28]
 800fda6:	e014      	b.n	800fdd2 <_vfiprintf_r+0x156>
 800fda8:	eba0 0308 	sub.w	r3, r0, r8
 800fdac:	fa09 f303 	lsl.w	r3, r9, r3
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	9304      	str	r3, [sp, #16]
 800fdb4:	46a2      	mov	sl, r4
 800fdb6:	e7d2      	b.n	800fd5e <_vfiprintf_r+0xe2>
 800fdb8:	9b03      	ldr	r3, [sp, #12]
 800fdba:	1d19      	adds	r1, r3, #4
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	9103      	str	r1, [sp, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	bfbb      	ittet	lt
 800fdc4:	425b      	neglt	r3, r3
 800fdc6:	f042 0202 	orrlt.w	r2, r2, #2
 800fdca:	9307      	strge	r3, [sp, #28]
 800fdcc:	9307      	strlt	r3, [sp, #28]
 800fdce:	bfb8      	it	lt
 800fdd0:	9204      	strlt	r2, [sp, #16]
 800fdd2:	7823      	ldrb	r3, [r4, #0]
 800fdd4:	2b2e      	cmp	r3, #46	; 0x2e
 800fdd6:	d10c      	bne.n	800fdf2 <_vfiprintf_r+0x176>
 800fdd8:	7863      	ldrb	r3, [r4, #1]
 800fdda:	2b2a      	cmp	r3, #42	; 0x2a
 800fddc:	d135      	bne.n	800fe4a <_vfiprintf_r+0x1ce>
 800fdde:	9b03      	ldr	r3, [sp, #12]
 800fde0:	1d1a      	adds	r2, r3, #4
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	9203      	str	r2, [sp, #12]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	bfb8      	it	lt
 800fdea:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdee:	3402      	adds	r4, #2
 800fdf0:	9305      	str	r3, [sp, #20]
 800fdf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fed8 <_vfiprintf_r+0x25c>
 800fdf6:	7821      	ldrb	r1, [r4, #0]
 800fdf8:	2203      	movs	r2, #3
 800fdfa:	4650      	mov	r0, sl
 800fdfc:	f7f0 f9f0 	bl	80001e0 <memchr>
 800fe00:	b140      	cbz	r0, 800fe14 <_vfiprintf_r+0x198>
 800fe02:	2340      	movs	r3, #64	; 0x40
 800fe04:	eba0 000a 	sub.w	r0, r0, sl
 800fe08:	fa03 f000 	lsl.w	r0, r3, r0
 800fe0c:	9b04      	ldr	r3, [sp, #16]
 800fe0e:	4303      	orrs	r3, r0
 800fe10:	3401      	adds	r4, #1
 800fe12:	9304      	str	r3, [sp, #16]
 800fe14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe18:	482c      	ldr	r0, [pc, #176]	; (800fecc <_vfiprintf_r+0x250>)
 800fe1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe1e:	2206      	movs	r2, #6
 800fe20:	f7f0 f9de 	bl	80001e0 <memchr>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d03f      	beq.n	800fea8 <_vfiprintf_r+0x22c>
 800fe28:	4b29      	ldr	r3, [pc, #164]	; (800fed0 <_vfiprintf_r+0x254>)
 800fe2a:	bb1b      	cbnz	r3, 800fe74 <_vfiprintf_r+0x1f8>
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	3307      	adds	r3, #7
 800fe30:	f023 0307 	bic.w	r3, r3, #7
 800fe34:	3308      	adds	r3, #8
 800fe36:	9303      	str	r3, [sp, #12]
 800fe38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe3a:	443b      	add	r3, r7
 800fe3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe3e:	e767      	b.n	800fd10 <_vfiprintf_r+0x94>
 800fe40:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe44:	460c      	mov	r4, r1
 800fe46:	2001      	movs	r0, #1
 800fe48:	e7a5      	b.n	800fd96 <_vfiprintf_r+0x11a>
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	3401      	adds	r4, #1
 800fe4e:	9305      	str	r3, [sp, #20]
 800fe50:	4619      	mov	r1, r3
 800fe52:	f04f 0c0a 	mov.w	ip, #10
 800fe56:	4620      	mov	r0, r4
 800fe58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe5c:	3a30      	subs	r2, #48	; 0x30
 800fe5e:	2a09      	cmp	r2, #9
 800fe60:	d903      	bls.n	800fe6a <_vfiprintf_r+0x1ee>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0c5      	beq.n	800fdf2 <_vfiprintf_r+0x176>
 800fe66:	9105      	str	r1, [sp, #20]
 800fe68:	e7c3      	b.n	800fdf2 <_vfiprintf_r+0x176>
 800fe6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe6e:	4604      	mov	r4, r0
 800fe70:	2301      	movs	r3, #1
 800fe72:	e7f0      	b.n	800fe56 <_vfiprintf_r+0x1da>
 800fe74:	ab03      	add	r3, sp, #12
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	462a      	mov	r2, r5
 800fe7a:	4b16      	ldr	r3, [pc, #88]	; (800fed4 <_vfiprintf_r+0x258>)
 800fe7c:	a904      	add	r1, sp, #16
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f7fd fee2 	bl	800dc48 <_printf_float>
 800fe84:	4607      	mov	r7, r0
 800fe86:	1c78      	adds	r0, r7, #1
 800fe88:	d1d6      	bne.n	800fe38 <_vfiprintf_r+0x1bc>
 800fe8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe8c:	07d9      	lsls	r1, r3, #31
 800fe8e:	d405      	bmi.n	800fe9c <_vfiprintf_r+0x220>
 800fe90:	89ab      	ldrh	r3, [r5, #12]
 800fe92:	059a      	lsls	r2, r3, #22
 800fe94:	d402      	bmi.n	800fe9c <_vfiprintf_r+0x220>
 800fe96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe98:	f7ff fe74 	bl	800fb84 <__retarget_lock_release_recursive>
 800fe9c:	89ab      	ldrh	r3, [r5, #12]
 800fe9e:	065b      	lsls	r3, r3, #25
 800fea0:	f53f af12 	bmi.w	800fcc8 <_vfiprintf_r+0x4c>
 800fea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fea6:	e711      	b.n	800fccc <_vfiprintf_r+0x50>
 800fea8:	ab03      	add	r3, sp, #12
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	462a      	mov	r2, r5
 800feae:	4b09      	ldr	r3, [pc, #36]	; (800fed4 <_vfiprintf_r+0x258>)
 800feb0:	a904      	add	r1, sp, #16
 800feb2:	4630      	mov	r0, r6
 800feb4:	f7fe f96c 	bl	800e190 <_printf_i>
 800feb8:	e7e4      	b.n	800fe84 <_vfiprintf_r+0x208>
 800feba:	bf00      	nop
 800febc:	08011a14 	.word	0x08011a14
 800fec0:	08011a34 	.word	0x08011a34
 800fec4:	080119f4 	.word	0x080119f4
 800fec8:	0801189c 	.word	0x0801189c
 800fecc:	080118a6 	.word	0x080118a6
 800fed0:	0800dc49 	.word	0x0800dc49
 800fed4:	0800fc59 	.word	0x0800fc59
 800fed8:	080118a2 	.word	0x080118a2

0800fedc <__swbuf_r>:
 800fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fede:	460e      	mov	r6, r1
 800fee0:	4614      	mov	r4, r2
 800fee2:	4605      	mov	r5, r0
 800fee4:	b118      	cbz	r0, 800feee <__swbuf_r+0x12>
 800fee6:	6983      	ldr	r3, [r0, #24]
 800fee8:	b90b      	cbnz	r3, 800feee <__swbuf_r+0x12>
 800feea:	f000 f9e7 	bl	80102bc <__sinit>
 800feee:	4b21      	ldr	r3, [pc, #132]	; (800ff74 <__swbuf_r+0x98>)
 800fef0:	429c      	cmp	r4, r3
 800fef2:	d12b      	bne.n	800ff4c <__swbuf_r+0x70>
 800fef4:	686c      	ldr	r4, [r5, #4]
 800fef6:	69a3      	ldr	r3, [r4, #24]
 800fef8:	60a3      	str	r3, [r4, #8]
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	071a      	lsls	r2, r3, #28
 800fefe:	d52f      	bpl.n	800ff60 <__swbuf_r+0x84>
 800ff00:	6923      	ldr	r3, [r4, #16]
 800ff02:	b36b      	cbz	r3, 800ff60 <__swbuf_r+0x84>
 800ff04:	6923      	ldr	r3, [r4, #16]
 800ff06:	6820      	ldr	r0, [r4, #0]
 800ff08:	1ac0      	subs	r0, r0, r3
 800ff0a:	6963      	ldr	r3, [r4, #20]
 800ff0c:	b2f6      	uxtb	r6, r6
 800ff0e:	4283      	cmp	r3, r0
 800ff10:	4637      	mov	r7, r6
 800ff12:	dc04      	bgt.n	800ff1e <__swbuf_r+0x42>
 800ff14:	4621      	mov	r1, r4
 800ff16:	4628      	mov	r0, r5
 800ff18:	f000 f93c 	bl	8010194 <_fflush_r>
 800ff1c:	bb30      	cbnz	r0, 800ff6c <__swbuf_r+0x90>
 800ff1e:	68a3      	ldr	r3, [r4, #8]
 800ff20:	3b01      	subs	r3, #1
 800ff22:	60a3      	str	r3, [r4, #8]
 800ff24:	6823      	ldr	r3, [r4, #0]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	6022      	str	r2, [r4, #0]
 800ff2a:	701e      	strb	r6, [r3, #0]
 800ff2c:	6963      	ldr	r3, [r4, #20]
 800ff2e:	3001      	adds	r0, #1
 800ff30:	4283      	cmp	r3, r0
 800ff32:	d004      	beq.n	800ff3e <__swbuf_r+0x62>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	07db      	lsls	r3, r3, #31
 800ff38:	d506      	bpl.n	800ff48 <__swbuf_r+0x6c>
 800ff3a:	2e0a      	cmp	r6, #10
 800ff3c:	d104      	bne.n	800ff48 <__swbuf_r+0x6c>
 800ff3e:	4621      	mov	r1, r4
 800ff40:	4628      	mov	r0, r5
 800ff42:	f000 f927 	bl	8010194 <_fflush_r>
 800ff46:	b988      	cbnz	r0, 800ff6c <__swbuf_r+0x90>
 800ff48:	4638      	mov	r0, r7
 800ff4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff4c:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <__swbuf_r+0x9c>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d101      	bne.n	800ff56 <__swbuf_r+0x7a>
 800ff52:	68ac      	ldr	r4, [r5, #8]
 800ff54:	e7cf      	b.n	800fef6 <__swbuf_r+0x1a>
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <__swbuf_r+0xa0>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	bf08      	it	eq
 800ff5c:	68ec      	ldreq	r4, [r5, #12]
 800ff5e:	e7ca      	b.n	800fef6 <__swbuf_r+0x1a>
 800ff60:	4621      	mov	r1, r4
 800ff62:	4628      	mov	r0, r5
 800ff64:	f000 f81a 	bl	800ff9c <__swsetup_r>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0cb      	beq.n	800ff04 <__swbuf_r+0x28>
 800ff6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ff70:	e7ea      	b.n	800ff48 <__swbuf_r+0x6c>
 800ff72:	bf00      	nop
 800ff74:	08011a14 	.word	0x08011a14
 800ff78:	08011a34 	.word	0x08011a34
 800ff7c:	080119f4 	.word	0x080119f4

0800ff80 <__ascii_wctomb>:
 800ff80:	b149      	cbz	r1, 800ff96 <__ascii_wctomb+0x16>
 800ff82:	2aff      	cmp	r2, #255	; 0xff
 800ff84:	bf85      	ittet	hi
 800ff86:	238a      	movhi	r3, #138	; 0x8a
 800ff88:	6003      	strhi	r3, [r0, #0]
 800ff8a:	700a      	strbls	r2, [r1, #0]
 800ff8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff90:	bf98      	it	ls
 800ff92:	2001      	movls	r0, #1
 800ff94:	4770      	bx	lr
 800ff96:	4608      	mov	r0, r1
 800ff98:	4770      	bx	lr
	...

0800ff9c <__swsetup_r>:
 800ff9c:	4b32      	ldr	r3, [pc, #200]	; (8010068 <__swsetup_r+0xcc>)
 800ff9e:	b570      	push	{r4, r5, r6, lr}
 800ffa0:	681d      	ldr	r5, [r3, #0]
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	b125      	cbz	r5, 800ffb2 <__swsetup_r+0x16>
 800ffa8:	69ab      	ldr	r3, [r5, #24]
 800ffaa:	b913      	cbnz	r3, 800ffb2 <__swsetup_r+0x16>
 800ffac:	4628      	mov	r0, r5
 800ffae:	f000 f985 	bl	80102bc <__sinit>
 800ffb2:	4b2e      	ldr	r3, [pc, #184]	; (801006c <__swsetup_r+0xd0>)
 800ffb4:	429c      	cmp	r4, r3
 800ffb6:	d10f      	bne.n	800ffd8 <__swsetup_r+0x3c>
 800ffb8:	686c      	ldr	r4, [r5, #4]
 800ffba:	89a3      	ldrh	r3, [r4, #12]
 800ffbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffc0:	0719      	lsls	r1, r3, #28
 800ffc2:	d42c      	bmi.n	801001e <__swsetup_r+0x82>
 800ffc4:	06dd      	lsls	r5, r3, #27
 800ffc6:	d411      	bmi.n	800ffec <__swsetup_r+0x50>
 800ffc8:	2309      	movs	r3, #9
 800ffca:	6033      	str	r3, [r6, #0]
 800ffcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffd0:	81a3      	strh	r3, [r4, #12]
 800ffd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd6:	e03e      	b.n	8010056 <__swsetup_r+0xba>
 800ffd8:	4b25      	ldr	r3, [pc, #148]	; (8010070 <__swsetup_r+0xd4>)
 800ffda:	429c      	cmp	r4, r3
 800ffdc:	d101      	bne.n	800ffe2 <__swsetup_r+0x46>
 800ffde:	68ac      	ldr	r4, [r5, #8]
 800ffe0:	e7eb      	b.n	800ffba <__swsetup_r+0x1e>
 800ffe2:	4b24      	ldr	r3, [pc, #144]	; (8010074 <__swsetup_r+0xd8>)
 800ffe4:	429c      	cmp	r4, r3
 800ffe6:	bf08      	it	eq
 800ffe8:	68ec      	ldreq	r4, [r5, #12]
 800ffea:	e7e6      	b.n	800ffba <__swsetup_r+0x1e>
 800ffec:	0758      	lsls	r0, r3, #29
 800ffee:	d512      	bpl.n	8010016 <__swsetup_r+0x7a>
 800fff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fff2:	b141      	cbz	r1, 8010006 <__swsetup_r+0x6a>
 800fff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fff8:	4299      	cmp	r1, r3
 800fffa:	d002      	beq.n	8010002 <__swsetup_r+0x66>
 800fffc:	4630      	mov	r0, r6
 800fffe:	f7fd fcd9 	bl	800d9b4 <_free_r>
 8010002:	2300      	movs	r3, #0
 8010004:	6363      	str	r3, [r4, #52]	; 0x34
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801000c:	81a3      	strh	r3, [r4, #12]
 801000e:	2300      	movs	r3, #0
 8010010:	6063      	str	r3, [r4, #4]
 8010012:	6923      	ldr	r3, [r4, #16]
 8010014:	6023      	str	r3, [r4, #0]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	f043 0308 	orr.w	r3, r3, #8
 801001c:	81a3      	strh	r3, [r4, #12]
 801001e:	6923      	ldr	r3, [r4, #16]
 8010020:	b94b      	cbnz	r3, 8010036 <__swsetup_r+0x9a>
 8010022:	89a3      	ldrh	r3, [r4, #12]
 8010024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801002c:	d003      	beq.n	8010036 <__swsetup_r+0x9a>
 801002e:	4621      	mov	r1, r4
 8010030:	4630      	mov	r0, r6
 8010032:	f000 fa05 	bl	8010440 <__smakebuf_r>
 8010036:	89a0      	ldrh	r0, [r4, #12]
 8010038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801003c:	f010 0301 	ands.w	r3, r0, #1
 8010040:	d00a      	beq.n	8010058 <__swsetup_r+0xbc>
 8010042:	2300      	movs	r3, #0
 8010044:	60a3      	str	r3, [r4, #8]
 8010046:	6963      	ldr	r3, [r4, #20]
 8010048:	425b      	negs	r3, r3
 801004a:	61a3      	str	r3, [r4, #24]
 801004c:	6923      	ldr	r3, [r4, #16]
 801004e:	b943      	cbnz	r3, 8010062 <__swsetup_r+0xc6>
 8010050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010054:	d1ba      	bne.n	800ffcc <__swsetup_r+0x30>
 8010056:	bd70      	pop	{r4, r5, r6, pc}
 8010058:	0781      	lsls	r1, r0, #30
 801005a:	bf58      	it	pl
 801005c:	6963      	ldrpl	r3, [r4, #20]
 801005e:	60a3      	str	r3, [r4, #8]
 8010060:	e7f4      	b.n	801004c <__swsetup_r+0xb0>
 8010062:	2000      	movs	r0, #0
 8010064:	e7f7      	b.n	8010056 <__swsetup_r+0xba>
 8010066:	bf00      	nop
 8010068:	20000024 	.word	0x20000024
 801006c:	08011a14 	.word	0x08011a14
 8010070:	08011a34 	.word	0x08011a34
 8010074:	080119f4 	.word	0x080119f4

08010078 <abort>:
 8010078:	b508      	push	{r3, lr}
 801007a:	2006      	movs	r0, #6
 801007c:	f000 fa50 	bl	8010520 <raise>
 8010080:	2001      	movs	r0, #1
 8010082:	f7f3 fe95 	bl	8003db0 <_exit>
	...

08010088 <__sflush_r>:
 8010088:	898a      	ldrh	r2, [r1, #12]
 801008a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801008e:	4605      	mov	r5, r0
 8010090:	0710      	lsls	r0, r2, #28
 8010092:	460c      	mov	r4, r1
 8010094:	d458      	bmi.n	8010148 <__sflush_r+0xc0>
 8010096:	684b      	ldr	r3, [r1, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	dc05      	bgt.n	80100a8 <__sflush_r+0x20>
 801009c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801009e:	2b00      	cmp	r3, #0
 80100a0:	dc02      	bgt.n	80100a8 <__sflush_r+0x20>
 80100a2:	2000      	movs	r0, #0
 80100a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100aa:	2e00      	cmp	r6, #0
 80100ac:	d0f9      	beq.n	80100a2 <__sflush_r+0x1a>
 80100ae:	2300      	movs	r3, #0
 80100b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80100b4:	682f      	ldr	r7, [r5, #0]
 80100b6:	602b      	str	r3, [r5, #0]
 80100b8:	d032      	beq.n	8010120 <__sflush_r+0x98>
 80100ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80100bc:	89a3      	ldrh	r3, [r4, #12]
 80100be:	075a      	lsls	r2, r3, #29
 80100c0:	d505      	bpl.n	80100ce <__sflush_r+0x46>
 80100c2:	6863      	ldr	r3, [r4, #4]
 80100c4:	1ac0      	subs	r0, r0, r3
 80100c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80100c8:	b10b      	cbz	r3, 80100ce <__sflush_r+0x46>
 80100ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80100cc:	1ac0      	subs	r0, r0, r3
 80100ce:	2300      	movs	r3, #0
 80100d0:	4602      	mov	r2, r0
 80100d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100d4:	6a21      	ldr	r1, [r4, #32]
 80100d6:	4628      	mov	r0, r5
 80100d8:	47b0      	blx	r6
 80100da:	1c43      	adds	r3, r0, #1
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	d106      	bne.n	80100ee <__sflush_r+0x66>
 80100e0:	6829      	ldr	r1, [r5, #0]
 80100e2:	291d      	cmp	r1, #29
 80100e4:	d82c      	bhi.n	8010140 <__sflush_r+0xb8>
 80100e6:	4a2a      	ldr	r2, [pc, #168]	; (8010190 <__sflush_r+0x108>)
 80100e8:	40ca      	lsrs	r2, r1
 80100ea:	07d6      	lsls	r6, r2, #31
 80100ec:	d528      	bpl.n	8010140 <__sflush_r+0xb8>
 80100ee:	2200      	movs	r2, #0
 80100f0:	6062      	str	r2, [r4, #4]
 80100f2:	04d9      	lsls	r1, r3, #19
 80100f4:	6922      	ldr	r2, [r4, #16]
 80100f6:	6022      	str	r2, [r4, #0]
 80100f8:	d504      	bpl.n	8010104 <__sflush_r+0x7c>
 80100fa:	1c42      	adds	r2, r0, #1
 80100fc:	d101      	bne.n	8010102 <__sflush_r+0x7a>
 80100fe:	682b      	ldr	r3, [r5, #0]
 8010100:	b903      	cbnz	r3, 8010104 <__sflush_r+0x7c>
 8010102:	6560      	str	r0, [r4, #84]	; 0x54
 8010104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010106:	602f      	str	r7, [r5, #0]
 8010108:	2900      	cmp	r1, #0
 801010a:	d0ca      	beq.n	80100a2 <__sflush_r+0x1a>
 801010c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010110:	4299      	cmp	r1, r3
 8010112:	d002      	beq.n	801011a <__sflush_r+0x92>
 8010114:	4628      	mov	r0, r5
 8010116:	f7fd fc4d 	bl	800d9b4 <_free_r>
 801011a:	2000      	movs	r0, #0
 801011c:	6360      	str	r0, [r4, #52]	; 0x34
 801011e:	e7c1      	b.n	80100a4 <__sflush_r+0x1c>
 8010120:	6a21      	ldr	r1, [r4, #32]
 8010122:	2301      	movs	r3, #1
 8010124:	4628      	mov	r0, r5
 8010126:	47b0      	blx	r6
 8010128:	1c41      	adds	r1, r0, #1
 801012a:	d1c7      	bne.n	80100bc <__sflush_r+0x34>
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d0c4      	beq.n	80100bc <__sflush_r+0x34>
 8010132:	2b1d      	cmp	r3, #29
 8010134:	d001      	beq.n	801013a <__sflush_r+0xb2>
 8010136:	2b16      	cmp	r3, #22
 8010138:	d101      	bne.n	801013e <__sflush_r+0xb6>
 801013a:	602f      	str	r7, [r5, #0]
 801013c:	e7b1      	b.n	80100a2 <__sflush_r+0x1a>
 801013e:	89a3      	ldrh	r3, [r4, #12]
 8010140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010144:	81a3      	strh	r3, [r4, #12]
 8010146:	e7ad      	b.n	80100a4 <__sflush_r+0x1c>
 8010148:	690f      	ldr	r7, [r1, #16]
 801014a:	2f00      	cmp	r7, #0
 801014c:	d0a9      	beq.n	80100a2 <__sflush_r+0x1a>
 801014e:	0793      	lsls	r3, r2, #30
 8010150:	680e      	ldr	r6, [r1, #0]
 8010152:	bf08      	it	eq
 8010154:	694b      	ldreq	r3, [r1, #20]
 8010156:	600f      	str	r7, [r1, #0]
 8010158:	bf18      	it	ne
 801015a:	2300      	movne	r3, #0
 801015c:	eba6 0807 	sub.w	r8, r6, r7
 8010160:	608b      	str	r3, [r1, #8]
 8010162:	f1b8 0f00 	cmp.w	r8, #0
 8010166:	dd9c      	ble.n	80100a2 <__sflush_r+0x1a>
 8010168:	6a21      	ldr	r1, [r4, #32]
 801016a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801016c:	4643      	mov	r3, r8
 801016e:	463a      	mov	r2, r7
 8010170:	4628      	mov	r0, r5
 8010172:	47b0      	blx	r6
 8010174:	2800      	cmp	r0, #0
 8010176:	dc06      	bgt.n	8010186 <__sflush_r+0xfe>
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801017e:	81a3      	strh	r3, [r4, #12]
 8010180:	f04f 30ff 	mov.w	r0, #4294967295
 8010184:	e78e      	b.n	80100a4 <__sflush_r+0x1c>
 8010186:	4407      	add	r7, r0
 8010188:	eba8 0800 	sub.w	r8, r8, r0
 801018c:	e7e9      	b.n	8010162 <__sflush_r+0xda>
 801018e:	bf00      	nop
 8010190:	20400001 	.word	0x20400001

08010194 <_fflush_r>:
 8010194:	b538      	push	{r3, r4, r5, lr}
 8010196:	690b      	ldr	r3, [r1, #16]
 8010198:	4605      	mov	r5, r0
 801019a:	460c      	mov	r4, r1
 801019c:	b913      	cbnz	r3, 80101a4 <_fflush_r+0x10>
 801019e:	2500      	movs	r5, #0
 80101a0:	4628      	mov	r0, r5
 80101a2:	bd38      	pop	{r3, r4, r5, pc}
 80101a4:	b118      	cbz	r0, 80101ae <_fflush_r+0x1a>
 80101a6:	6983      	ldr	r3, [r0, #24]
 80101a8:	b90b      	cbnz	r3, 80101ae <_fflush_r+0x1a>
 80101aa:	f000 f887 	bl	80102bc <__sinit>
 80101ae:	4b14      	ldr	r3, [pc, #80]	; (8010200 <_fflush_r+0x6c>)
 80101b0:	429c      	cmp	r4, r3
 80101b2:	d11b      	bne.n	80101ec <_fflush_r+0x58>
 80101b4:	686c      	ldr	r4, [r5, #4]
 80101b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d0ef      	beq.n	801019e <_fflush_r+0xa>
 80101be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80101c0:	07d0      	lsls	r0, r2, #31
 80101c2:	d404      	bmi.n	80101ce <_fflush_r+0x3a>
 80101c4:	0599      	lsls	r1, r3, #22
 80101c6:	d402      	bmi.n	80101ce <_fflush_r+0x3a>
 80101c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101ca:	f7ff fcda 	bl	800fb82 <__retarget_lock_acquire_recursive>
 80101ce:	4628      	mov	r0, r5
 80101d0:	4621      	mov	r1, r4
 80101d2:	f7ff ff59 	bl	8010088 <__sflush_r>
 80101d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101d8:	07da      	lsls	r2, r3, #31
 80101da:	4605      	mov	r5, r0
 80101dc:	d4e0      	bmi.n	80101a0 <_fflush_r+0xc>
 80101de:	89a3      	ldrh	r3, [r4, #12]
 80101e0:	059b      	lsls	r3, r3, #22
 80101e2:	d4dd      	bmi.n	80101a0 <_fflush_r+0xc>
 80101e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101e6:	f7ff fccd 	bl	800fb84 <__retarget_lock_release_recursive>
 80101ea:	e7d9      	b.n	80101a0 <_fflush_r+0xc>
 80101ec:	4b05      	ldr	r3, [pc, #20]	; (8010204 <_fflush_r+0x70>)
 80101ee:	429c      	cmp	r4, r3
 80101f0:	d101      	bne.n	80101f6 <_fflush_r+0x62>
 80101f2:	68ac      	ldr	r4, [r5, #8]
 80101f4:	e7df      	b.n	80101b6 <_fflush_r+0x22>
 80101f6:	4b04      	ldr	r3, [pc, #16]	; (8010208 <_fflush_r+0x74>)
 80101f8:	429c      	cmp	r4, r3
 80101fa:	bf08      	it	eq
 80101fc:	68ec      	ldreq	r4, [r5, #12]
 80101fe:	e7da      	b.n	80101b6 <_fflush_r+0x22>
 8010200:	08011a14 	.word	0x08011a14
 8010204:	08011a34 	.word	0x08011a34
 8010208:	080119f4 	.word	0x080119f4

0801020c <std>:
 801020c:	2300      	movs	r3, #0
 801020e:	b510      	push	{r4, lr}
 8010210:	4604      	mov	r4, r0
 8010212:	e9c0 3300 	strd	r3, r3, [r0]
 8010216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801021a:	6083      	str	r3, [r0, #8]
 801021c:	8181      	strh	r1, [r0, #12]
 801021e:	6643      	str	r3, [r0, #100]	; 0x64
 8010220:	81c2      	strh	r2, [r0, #14]
 8010222:	6183      	str	r3, [r0, #24]
 8010224:	4619      	mov	r1, r3
 8010226:	2208      	movs	r2, #8
 8010228:	305c      	adds	r0, #92	; 0x5c
 801022a:	f7fd fbbb 	bl	800d9a4 <memset>
 801022e:	4b05      	ldr	r3, [pc, #20]	; (8010244 <std+0x38>)
 8010230:	6263      	str	r3, [r4, #36]	; 0x24
 8010232:	4b05      	ldr	r3, [pc, #20]	; (8010248 <std+0x3c>)
 8010234:	62a3      	str	r3, [r4, #40]	; 0x28
 8010236:	4b05      	ldr	r3, [pc, #20]	; (801024c <std+0x40>)
 8010238:	62e3      	str	r3, [r4, #44]	; 0x2c
 801023a:	4b05      	ldr	r3, [pc, #20]	; (8010250 <std+0x44>)
 801023c:	6224      	str	r4, [r4, #32]
 801023e:	6323      	str	r3, [r4, #48]	; 0x30
 8010240:	bd10      	pop	{r4, pc}
 8010242:	bf00      	nop
 8010244:	08010559 	.word	0x08010559
 8010248:	0801057b 	.word	0x0801057b
 801024c:	080105b3 	.word	0x080105b3
 8010250:	080105d7 	.word	0x080105d7

08010254 <_cleanup_r>:
 8010254:	4901      	ldr	r1, [pc, #4]	; (801025c <_cleanup_r+0x8>)
 8010256:	f000 b8af 	b.w	80103b8 <_fwalk_reent>
 801025a:	bf00      	nop
 801025c:	08010195 	.word	0x08010195

08010260 <__sfmoreglue>:
 8010260:	b570      	push	{r4, r5, r6, lr}
 8010262:	1e4a      	subs	r2, r1, #1
 8010264:	2568      	movs	r5, #104	; 0x68
 8010266:	4355      	muls	r5, r2
 8010268:	460e      	mov	r6, r1
 801026a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801026e:	f7fd fbf1 	bl	800da54 <_malloc_r>
 8010272:	4604      	mov	r4, r0
 8010274:	b140      	cbz	r0, 8010288 <__sfmoreglue+0x28>
 8010276:	2100      	movs	r1, #0
 8010278:	e9c0 1600 	strd	r1, r6, [r0]
 801027c:	300c      	adds	r0, #12
 801027e:	60a0      	str	r0, [r4, #8]
 8010280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010284:	f7fd fb8e 	bl	800d9a4 <memset>
 8010288:	4620      	mov	r0, r4
 801028a:	bd70      	pop	{r4, r5, r6, pc}

0801028c <__sfp_lock_acquire>:
 801028c:	4801      	ldr	r0, [pc, #4]	; (8010294 <__sfp_lock_acquire+0x8>)
 801028e:	f7ff bc78 	b.w	800fb82 <__retarget_lock_acquire_recursive>
 8010292:	bf00      	nop
 8010294:	20004ce4 	.word	0x20004ce4

08010298 <__sfp_lock_release>:
 8010298:	4801      	ldr	r0, [pc, #4]	; (80102a0 <__sfp_lock_release+0x8>)
 801029a:	f7ff bc73 	b.w	800fb84 <__retarget_lock_release_recursive>
 801029e:	bf00      	nop
 80102a0:	20004ce4 	.word	0x20004ce4

080102a4 <__sinit_lock_acquire>:
 80102a4:	4801      	ldr	r0, [pc, #4]	; (80102ac <__sinit_lock_acquire+0x8>)
 80102a6:	f7ff bc6c 	b.w	800fb82 <__retarget_lock_acquire_recursive>
 80102aa:	bf00      	nop
 80102ac:	20004cdf 	.word	0x20004cdf

080102b0 <__sinit_lock_release>:
 80102b0:	4801      	ldr	r0, [pc, #4]	; (80102b8 <__sinit_lock_release+0x8>)
 80102b2:	f7ff bc67 	b.w	800fb84 <__retarget_lock_release_recursive>
 80102b6:	bf00      	nop
 80102b8:	20004cdf 	.word	0x20004cdf

080102bc <__sinit>:
 80102bc:	b510      	push	{r4, lr}
 80102be:	4604      	mov	r4, r0
 80102c0:	f7ff fff0 	bl	80102a4 <__sinit_lock_acquire>
 80102c4:	69a3      	ldr	r3, [r4, #24]
 80102c6:	b11b      	cbz	r3, 80102d0 <__sinit+0x14>
 80102c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102cc:	f7ff bff0 	b.w	80102b0 <__sinit_lock_release>
 80102d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80102d4:	6523      	str	r3, [r4, #80]	; 0x50
 80102d6:	4b13      	ldr	r3, [pc, #76]	; (8010324 <__sinit+0x68>)
 80102d8:	4a13      	ldr	r2, [pc, #76]	; (8010328 <__sinit+0x6c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80102de:	42a3      	cmp	r3, r4
 80102e0:	bf04      	itt	eq
 80102e2:	2301      	moveq	r3, #1
 80102e4:	61a3      	streq	r3, [r4, #24]
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 f820 	bl	801032c <__sfp>
 80102ec:	6060      	str	r0, [r4, #4]
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 f81c 	bl	801032c <__sfp>
 80102f4:	60a0      	str	r0, [r4, #8]
 80102f6:	4620      	mov	r0, r4
 80102f8:	f000 f818 	bl	801032c <__sfp>
 80102fc:	2200      	movs	r2, #0
 80102fe:	60e0      	str	r0, [r4, #12]
 8010300:	2104      	movs	r1, #4
 8010302:	6860      	ldr	r0, [r4, #4]
 8010304:	f7ff ff82 	bl	801020c <std>
 8010308:	68a0      	ldr	r0, [r4, #8]
 801030a:	2201      	movs	r2, #1
 801030c:	2109      	movs	r1, #9
 801030e:	f7ff ff7d 	bl	801020c <std>
 8010312:	68e0      	ldr	r0, [r4, #12]
 8010314:	2202      	movs	r2, #2
 8010316:	2112      	movs	r1, #18
 8010318:	f7ff ff78 	bl	801020c <std>
 801031c:	2301      	movs	r3, #1
 801031e:	61a3      	str	r3, [r4, #24]
 8010320:	e7d2      	b.n	80102c8 <__sinit+0xc>
 8010322:	bf00      	nop
 8010324:	08011670 	.word	0x08011670
 8010328:	08010255 	.word	0x08010255

0801032c <__sfp>:
 801032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032e:	4607      	mov	r7, r0
 8010330:	f7ff ffac 	bl	801028c <__sfp_lock_acquire>
 8010334:	4b1e      	ldr	r3, [pc, #120]	; (80103b0 <__sfp+0x84>)
 8010336:	681e      	ldr	r6, [r3, #0]
 8010338:	69b3      	ldr	r3, [r6, #24]
 801033a:	b913      	cbnz	r3, 8010342 <__sfp+0x16>
 801033c:	4630      	mov	r0, r6
 801033e:	f7ff ffbd 	bl	80102bc <__sinit>
 8010342:	3648      	adds	r6, #72	; 0x48
 8010344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010348:	3b01      	subs	r3, #1
 801034a:	d503      	bpl.n	8010354 <__sfp+0x28>
 801034c:	6833      	ldr	r3, [r6, #0]
 801034e:	b30b      	cbz	r3, 8010394 <__sfp+0x68>
 8010350:	6836      	ldr	r6, [r6, #0]
 8010352:	e7f7      	b.n	8010344 <__sfp+0x18>
 8010354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010358:	b9d5      	cbnz	r5, 8010390 <__sfp+0x64>
 801035a:	4b16      	ldr	r3, [pc, #88]	; (80103b4 <__sfp+0x88>)
 801035c:	60e3      	str	r3, [r4, #12]
 801035e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010362:	6665      	str	r5, [r4, #100]	; 0x64
 8010364:	f7ff fc0c 	bl	800fb80 <__retarget_lock_init_recursive>
 8010368:	f7ff ff96 	bl	8010298 <__sfp_lock_release>
 801036c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010374:	6025      	str	r5, [r4, #0]
 8010376:	61a5      	str	r5, [r4, #24]
 8010378:	2208      	movs	r2, #8
 801037a:	4629      	mov	r1, r5
 801037c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010380:	f7fd fb10 	bl	800d9a4 <memset>
 8010384:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010388:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801038c:	4620      	mov	r0, r4
 801038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010390:	3468      	adds	r4, #104	; 0x68
 8010392:	e7d9      	b.n	8010348 <__sfp+0x1c>
 8010394:	2104      	movs	r1, #4
 8010396:	4638      	mov	r0, r7
 8010398:	f7ff ff62 	bl	8010260 <__sfmoreglue>
 801039c:	4604      	mov	r4, r0
 801039e:	6030      	str	r0, [r6, #0]
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d1d5      	bne.n	8010350 <__sfp+0x24>
 80103a4:	f7ff ff78 	bl	8010298 <__sfp_lock_release>
 80103a8:	230c      	movs	r3, #12
 80103aa:	603b      	str	r3, [r7, #0]
 80103ac:	e7ee      	b.n	801038c <__sfp+0x60>
 80103ae:	bf00      	nop
 80103b0:	08011670 	.word	0x08011670
 80103b4:	ffff0001 	.word	0xffff0001

080103b8 <_fwalk_reent>:
 80103b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103bc:	4606      	mov	r6, r0
 80103be:	4688      	mov	r8, r1
 80103c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80103c4:	2700      	movs	r7, #0
 80103c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103ca:	f1b9 0901 	subs.w	r9, r9, #1
 80103ce:	d505      	bpl.n	80103dc <_fwalk_reent+0x24>
 80103d0:	6824      	ldr	r4, [r4, #0]
 80103d2:	2c00      	cmp	r4, #0
 80103d4:	d1f7      	bne.n	80103c6 <_fwalk_reent+0xe>
 80103d6:	4638      	mov	r0, r7
 80103d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103dc:	89ab      	ldrh	r3, [r5, #12]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d907      	bls.n	80103f2 <_fwalk_reent+0x3a>
 80103e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103e6:	3301      	adds	r3, #1
 80103e8:	d003      	beq.n	80103f2 <_fwalk_reent+0x3a>
 80103ea:	4629      	mov	r1, r5
 80103ec:	4630      	mov	r0, r6
 80103ee:	47c0      	blx	r8
 80103f0:	4307      	orrs	r7, r0
 80103f2:	3568      	adds	r5, #104	; 0x68
 80103f4:	e7e9      	b.n	80103ca <_fwalk_reent+0x12>

080103f6 <__swhatbuf_r>:
 80103f6:	b570      	push	{r4, r5, r6, lr}
 80103f8:	460e      	mov	r6, r1
 80103fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103fe:	2900      	cmp	r1, #0
 8010400:	b096      	sub	sp, #88	; 0x58
 8010402:	4614      	mov	r4, r2
 8010404:	461d      	mov	r5, r3
 8010406:	da07      	bge.n	8010418 <__swhatbuf_r+0x22>
 8010408:	2300      	movs	r3, #0
 801040a:	602b      	str	r3, [r5, #0]
 801040c:	89b3      	ldrh	r3, [r6, #12]
 801040e:	061a      	lsls	r2, r3, #24
 8010410:	d410      	bmi.n	8010434 <__swhatbuf_r+0x3e>
 8010412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010416:	e00e      	b.n	8010436 <__swhatbuf_r+0x40>
 8010418:	466a      	mov	r2, sp
 801041a:	f000 f903 	bl	8010624 <_fstat_r>
 801041e:	2800      	cmp	r0, #0
 8010420:	dbf2      	blt.n	8010408 <__swhatbuf_r+0x12>
 8010422:	9a01      	ldr	r2, [sp, #4]
 8010424:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010428:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801042c:	425a      	negs	r2, r3
 801042e:	415a      	adcs	r2, r3
 8010430:	602a      	str	r2, [r5, #0]
 8010432:	e7ee      	b.n	8010412 <__swhatbuf_r+0x1c>
 8010434:	2340      	movs	r3, #64	; 0x40
 8010436:	2000      	movs	r0, #0
 8010438:	6023      	str	r3, [r4, #0]
 801043a:	b016      	add	sp, #88	; 0x58
 801043c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010440 <__smakebuf_r>:
 8010440:	898b      	ldrh	r3, [r1, #12]
 8010442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010444:	079d      	lsls	r5, r3, #30
 8010446:	4606      	mov	r6, r0
 8010448:	460c      	mov	r4, r1
 801044a:	d507      	bpl.n	801045c <__smakebuf_r+0x1c>
 801044c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	6123      	str	r3, [r4, #16]
 8010454:	2301      	movs	r3, #1
 8010456:	6163      	str	r3, [r4, #20]
 8010458:	b002      	add	sp, #8
 801045a:	bd70      	pop	{r4, r5, r6, pc}
 801045c:	ab01      	add	r3, sp, #4
 801045e:	466a      	mov	r2, sp
 8010460:	f7ff ffc9 	bl	80103f6 <__swhatbuf_r>
 8010464:	9900      	ldr	r1, [sp, #0]
 8010466:	4605      	mov	r5, r0
 8010468:	4630      	mov	r0, r6
 801046a:	f7fd faf3 	bl	800da54 <_malloc_r>
 801046e:	b948      	cbnz	r0, 8010484 <__smakebuf_r+0x44>
 8010470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010474:	059a      	lsls	r2, r3, #22
 8010476:	d4ef      	bmi.n	8010458 <__smakebuf_r+0x18>
 8010478:	f023 0303 	bic.w	r3, r3, #3
 801047c:	f043 0302 	orr.w	r3, r3, #2
 8010480:	81a3      	strh	r3, [r4, #12]
 8010482:	e7e3      	b.n	801044c <__smakebuf_r+0xc>
 8010484:	4b0d      	ldr	r3, [pc, #52]	; (80104bc <__smakebuf_r+0x7c>)
 8010486:	62b3      	str	r3, [r6, #40]	; 0x28
 8010488:	89a3      	ldrh	r3, [r4, #12]
 801048a:	6020      	str	r0, [r4, #0]
 801048c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010490:	81a3      	strh	r3, [r4, #12]
 8010492:	9b00      	ldr	r3, [sp, #0]
 8010494:	6163      	str	r3, [r4, #20]
 8010496:	9b01      	ldr	r3, [sp, #4]
 8010498:	6120      	str	r0, [r4, #16]
 801049a:	b15b      	cbz	r3, 80104b4 <__smakebuf_r+0x74>
 801049c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104a0:	4630      	mov	r0, r6
 80104a2:	f000 f8d1 	bl	8010648 <_isatty_r>
 80104a6:	b128      	cbz	r0, 80104b4 <__smakebuf_r+0x74>
 80104a8:	89a3      	ldrh	r3, [r4, #12]
 80104aa:	f023 0303 	bic.w	r3, r3, #3
 80104ae:	f043 0301 	orr.w	r3, r3, #1
 80104b2:	81a3      	strh	r3, [r4, #12]
 80104b4:	89a0      	ldrh	r0, [r4, #12]
 80104b6:	4305      	orrs	r5, r0
 80104b8:	81a5      	strh	r5, [r4, #12]
 80104ba:	e7cd      	b.n	8010458 <__smakebuf_r+0x18>
 80104bc:	08010255 	.word	0x08010255

080104c0 <_malloc_usable_size_r>:
 80104c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104c4:	1f18      	subs	r0, r3, #4
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	bfbc      	itt	lt
 80104ca:	580b      	ldrlt	r3, [r1, r0]
 80104cc:	18c0      	addlt	r0, r0, r3
 80104ce:	4770      	bx	lr

080104d0 <_raise_r>:
 80104d0:	291f      	cmp	r1, #31
 80104d2:	b538      	push	{r3, r4, r5, lr}
 80104d4:	4604      	mov	r4, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	d904      	bls.n	80104e4 <_raise_r+0x14>
 80104da:	2316      	movs	r3, #22
 80104dc:	6003      	str	r3, [r0, #0]
 80104de:	f04f 30ff 	mov.w	r0, #4294967295
 80104e2:	bd38      	pop	{r3, r4, r5, pc}
 80104e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80104e6:	b112      	cbz	r2, 80104ee <_raise_r+0x1e>
 80104e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104ec:	b94b      	cbnz	r3, 8010502 <_raise_r+0x32>
 80104ee:	4620      	mov	r0, r4
 80104f0:	f000 f830 	bl	8010554 <_getpid_r>
 80104f4:	462a      	mov	r2, r5
 80104f6:	4601      	mov	r1, r0
 80104f8:	4620      	mov	r0, r4
 80104fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104fe:	f000 b817 	b.w	8010530 <_kill_r>
 8010502:	2b01      	cmp	r3, #1
 8010504:	d00a      	beq.n	801051c <_raise_r+0x4c>
 8010506:	1c59      	adds	r1, r3, #1
 8010508:	d103      	bne.n	8010512 <_raise_r+0x42>
 801050a:	2316      	movs	r3, #22
 801050c:	6003      	str	r3, [r0, #0]
 801050e:	2001      	movs	r0, #1
 8010510:	e7e7      	b.n	80104e2 <_raise_r+0x12>
 8010512:	2400      	movs	r4, #0
 8010514:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010518:	4628      	mov	r0, r5
 801051a:	4798      	blx	r3
 801051c:	2000      	movs	r0, #0
 801051e:	e7e0      	b.n	80104e2 <_raise_r+0x12>

08010520 <raise>:
 8010520:	4b02      	ldr	r3, [pc, #8]	; (801052c <raise+0xc>)
 8010522:	4601      	mov	r1, r0
 8010524:	6818      	ldr	r0, [r3, #0]
 8010526:	f7ff bfd3 	b.w	80104d0 <_raise_r>
 801052a:	bf00      	nop
 801052c:	20000024 	.word	0x20000024

08010530 <_kill_r>:
 8010530:	b538      	push	{r3, r4, r5, lr}
 8010532:	4d07      	ldr	r5, [pc, #28]	; (8010550 <_kill_r+0x20>)
 8010534:	2300      	movs	r3, #0
 8010536:	4604      	mov	r4, r0
 8010538:	4608      	mov	r0, r1
 801053a:	4611      	mov	r1, r2
 801053c:	602b      	str	r3, [r5, #0]
 801053e:	f7f3 fc27 	bl	8003d90 <_kill>
 8010542:	1c43      	adds	r3, r0, #1
 8010544:	d102      	bne.n	801054c <_kill_r+0x1c>
 8010546:	682b      	ldr	r3, [r5, #0]
 8010548:	b103      	cbz	r3, 801054c <_kill_r+0x1c>
 801054a:	6023      	str	r3, [r4, #0]
 801054c:	bd38      	pop	{r3, r4, r5, pc}
 801054e:	bf00      	nop
 8010550:	20004cd8 	.word	0x20004cd8

08010554 <_getpid_r>:
 8010554:	f7f3 bc14 	b.w	8003d80 <_getpid>

08010558 <__sread>:
 8010558:	b510      	push	{r4, lr}
 801055a:	460c      	mov	r4, r1
 801055c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010560:	f000 f894 	bl	801068c <_read_r>
 8010564:	2800      	cmp	r0, #0
 8010566:	bfab      	itete	ge
 8010568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801056a:	89a3      	ldrhlt	r3, [r4, #12]
 801056c:	181b      	addge	r3, r3, r0
 801056e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010572:	bfac      	ite	ge
 8010574:	6563      	strge	r3, [r4, #84]	; 0x54
 8010576:	81a3      	strhlt	r3, [r4, #12]
 8010578:	bd10      	pop	{r4, pc}

0801057a <__swrite>:
 801057a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057e:	461f      	mov	r7, r3
 8010580:	898b      	ldrh	r3, [r1, #12]
 8010582:	05db      	lsls	r3, r3, #23
 8010584:	4605      	mov	r5, r0
 8010586:	460c      	mov	r4, r1
 8010588:	4616      	mov	r6, r2
 801058a:	d505      	bpl.n	8010598 <__swrite+0x1e>
 801058c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010590:	2302      	movs	r3, #2
 8010592:	2200      	movs	r2, #0
 8010594:	f000 f868 	bl	8010668 <_lseek_r>
 8010598:	89a3      	ldrh	r3, [r4, #12]
 801059a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801059e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105a2:	81a3      	strh	r3, [r4, #12]
 80105a4:	4632      	mov	r2, r6
 80105a6:	463b      	mov	r3, r7
 80105a8:	4628      	mov	r0, r5
 80105aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105ae:	f000 b817 	b.w	80105e0 <_write_r>

080105b2 <__sseek>:
 80105b2:	b510      	push	{r4, lr}
 80105b4:	460c      	mov	r4, r1
 80105b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ba:	f000 f855 	bl	8010668 <_lseek_r>
 80105be:	1c43      	adds	r3, r0, #1
 80105c0:	89a3      	ldrh	r3, [r4, #12]
 80105c2:	bf15      	itete	ne
 80105c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80105c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80105ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80105ce:	81a3      	strheq	r3, [r4, #12]
 80105d0:	bf18      	it	ne
 80105d2:	81a3      	strhne	r3, [r4, #12]
 80105d4:	bd10      	pop	{r4, pc}

080105d6 <__sclose>:
 80105d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105da:	f000 b813 	b.w	8010604 <_close_r>
	...

080105e0 <_write_r>:
 80105e0:	b538      	push	{r3, r4, r5, lr}
 80105e2:	4d07      	ldr	r5, [pc, #28]	; (8010600 <_write_r+0x20>)
 80105e4:	4604      	mov	r4, r0
 80105e6:	4608      	mov	r0, r1
 80105e8:	4611      	mov	r1, r2
 80105ea:	2200      	movs	r2, #0
 80105ec:	602a      	str	r2, [r5, #0]
 80105ee:	461a      	mov	r2, r3
 80105f0:	f7f3 fc05 	bl	8003dfe <_write>
 80105f4:	1c43      	adds	r3, r0, #1
 80105f6:	d102      	bne.n	80105fe <_write_r+0x1e>
 80105f8:	682b      	ldr	r3, [r5, #0]
 80105fa:	b103      	cbz	r3, 80105fe <_write_r+0x1e>
 80105fc:	6023      	str	r3, [r4, #0]
 80105fe:	bd38      	pop	{r3, r4, r5, pc}
 8010600:	20004cd8 	.word	0x20004cd8

08010604 <_close_r>:
 8010604:	b538      	push	{r3, r4, r5, lr}
 8010606:	4d06      	ldr	r5, [pc, #24]	; (8010620 <_close_r+0x1c>)
 8010608:	2300      	movs	r3, #0
 801060a:	4604      	mov	r4, r0
 801060c:	4608      	mov	r0, r1
 801060e:	602b      	str	r3, [r5, #0]
 8010610:	f7f3 fc11 	bl	8003e36 <_close>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d102      	bne.n	801061e <_close_r+0x1a>
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	b103      	cbz	r3, 801061e <_close_r+0x1a>
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	bd38      	pop	{r3, r4, r5, pc}
 8010620:	20004cd8 	.word	0x20004cd8

08010624 <_fstat_r>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4d07      	ldr	r5, [pc, #28]	; (8010644 <_fstat_r+0x20>)
 8010628:	2300      	movs	r3, #0
 801062a:	4604      	mov	r4, r0
 801062c:	4608      	mov	r0, r1
 801062e:	4611      	mov	r1, r2
 8010630:	602b      	str	r3, [r5, #0]
 8010632:	f7f3 fc0c 	bl	8003e4e <_fstat>
 8010636:	1c43      	adds	r3, r0, #1
 8010638:	d102      	bne.n	8010640 <_fstat_r+0x1c>
 801063a:	682b      	ldr	r3, [r5, #0]
 801063c:	b103      	cbz	r3, 8010640 <_fstat_r+0x1c>
 801063e:	6023      	str	r3, [r4, #0]
 8010640:	bd38      	pop	{r3, r4, r5, pc}
 8010642:	bf00      	nop
 8010644:	20004cd8 	.word	0x20004cd8

08010648 <_isatty_r>:
 8010648:	b538      	push	{r3, r4, r5, lr}
 801064a:	4d06      	ldr	r5, [pc, #24]	; (8010664 <_isatty_r+0x1c>)
 801064c:	2300      	movs	r3, #0
 801064e:	4604      	mov	r4, r0
 8010650:	4608      	mov	r0, r1
 8010652:	602b      	str	r3, [r5, #0]
 8010654:	f7f3 fc0b 	bl	8003e6e <_isatty>
 8010658:	1c43      	adds	r3, r0, #1
 801065a:	d102      	bne.n	8010662 <_isatty_r+0x1a>
 801065c:	682b      	ldr	r3, [r5, #0]
 801065e:	b103      	cbz	r3, 8010662 <_isatty_r+0x1a>
 8010660:	6023      	str	r3, [r4, #0]
 8010662:	bd38      	pop	{r3, r4, r5, pc}
 8010664:	20004cd8 	.word	0x20004cd8

08010668 <_lseek_r>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	4d07      	ldr	r5, [pc, #28]	; (8010688 <_lseek_r+0x20>)
 801066c:	4604      	mov	r4, r0
 801066e:	4608      	mov	r0, r1
 8010670:	4611      	mov	r1, r2
 8010672:	2200      	movs	r2, #0
 8010674:	602a      	str	r2, [r5, #0]
 8010676:	461a      	mov	r2, r3
 8010678:	f7f3 fc04 	bl	8003e84 <_lseek>
 801067c:	1c43      	adds	r3, r0, #1
 801067e:	d102      	bne.n	8010686 <_lseek_r+0x1e>
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	b103      	cbz	r3, 8010686 <_lseek_r+0x1e>
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	bd38      	pop	{r3, r4, r5, pc}
 8010688:	20004cd8 	.word	0x20004cd8

0801068c <_read_r>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	4d07      	ldr	r5, [pc, #28]	; (80106ac <_read_r+0x20>)
 8010690:	4604      	mov	r4, r0
 8010692:	4608      	mov	r0, r1
 8010694:	4611      	mov	r1, r2
 8010696:	2200      	movs	r2, #0
 8010698:	602a      	str	r2, [r5, #0]
 801069a:	461a      	mov	r2, r3
 801069c:	f7f3 fb92 	bl	8003dc4 <_read>
 80106a0:	1c43      	adds	r3, r0, #1
 80106a2:	d102      	bne.n	80106aa <_read_r+0x1e>
 80106a4:	682b      	ldr	r3, [r5, #0]
 80106a6:	b103      	cbz	r3, 80106aa <_read_r+0x1e>
 80106a8:	6023      	str	r3, [r4, #0]
 80106aa:	bd38      	pop	{r3, r4, r5, pc}
 80106ac:	20004cd8 	.word	0x20004cd8

080106b0 <_init>:
 80106b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106b2:	bf00      	nop
 80106b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106b6:	bc08      	pop	{r3}
 80106b8:	469e      	mov	lr, r3
 80106ba:	4770      	bx	lr

080106bc <_fini>:
 80106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106be:	bf00      	nop
 80106c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106c2:	bc08      	pop	{r3}
 80106c4:	469e      	mov	lr, r3
 80106c6:	4770      	bx	lr
